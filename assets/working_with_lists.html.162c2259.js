import{_ as p,z as c,A as l,X as s,C as a,T as e,$ as t,a6 as o,Q as r}from"./framework.3d018c9f.js";const u={},i=o(`<h1 id="处理列表" tabindex="-1"><a class="header-anchor" href="#处理列表" aria-hidden="true">#</a> 处理列表</h1><h2 id="创建列表" tabindex="-1"><a class="header-anchor" href="#创建列表" aria-hidden="true">#</a> 创建列表</h2><p>列表(<code>List</code>)是一个有序的值的集合。 你可以用方括号创建一个列表，周围的值用空格和/或逗号隔开 (以方便阅读)。 例如，<code>[foo bar baz]</code> 或 <code>[foo, bar, baz]</code>。</p><h2 id="更新列表" tabindex="-1"><a class="header-anchor" href="#更新列表" aria-hidden="true">#</a> 更新列表</h2><p>当列表数据从管道流入时，你可以向列表中更新(<code>update</code>)和插入(<code>insert</code>)值，例如，让我们在列表的中间插入值<code>10</code>：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|</span> insert <span class="token number">2</span> <span class="token number">10</span>
<span class="token comment"># [1, 2, 10, 3, 4]</span>
</code></pre></div><p>我们也可以使用<code>update</code>将第二个元素的值替换为<code>10</code>：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|</span> update <span class="token number">1</span> <span class="token number">10</span>
<span class="token comment"># [1, 10, 3, 4]</span>
</code></pre></div><p>除了 <code>update</code> 和 <code>insert</code> 之外，还有 <code>prepend</code> 和 <code>append</code>，它们分别让你插入到列表的开头或列表的结尾。例如：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>yellow green<span class="token punctuation">]</span>
<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token operator">|</span> prepend red<span class="token punctuation">)</span>
<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token operator">|</span> append purple<span class="token punctuation">)</span>
<span class="token variable">$colors</span> <span class="token comment"># [red yellow green purple]</span>
</code></pre></div><h2 id="迭代列表" tabindex="-1"><a class="header-anchor" href="#迭代列表" aria-hidden="true">#</a> 迭代列表</h2>`,11),k=s("code",null,"each",-1),d=s("code",null,"{ |it| echo $it }",-1),m=s("code",null,"|it|",-1),b=s("code",null,"--numbered",-1),h=s("code",null,"-n",-1),g=s("code",null,"index",-1),_=s("code",null,"item",-1),v=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span>Mark Tami Amanda Jeremy<span class="token punctuation">]</span>
<span class="token variable">$names</span> <span class="token operator">|</span> each <span class="token punctuation">{</span> <span class="token operator">|</span>it<span class="token operator">|</span> $<span class="token string">&quot;Hello, (<span class="token variable">$it</span>)!&quot;</span> <span class="token punctuation">}</span>
<span class="token comment"># Outputs &quot;Hello, Mark!&quot; and three more similar lines.</span>

<span class="token variable">$names</span> <span class="token operator">|</span> each <span class="token parameter variable">-n</span> <span class="token punctuation">{</span> <span class="token operator">|</span>it<span class="token operator">|</span> $<span class="token string">&quot;(<span class="token variable">$it</span>.index + 1) - (<span class="token variable">$it</span>.item)&quot;</span> <span class="token punctuation">}</span>
<span class="token comment"># Outputs &quot;1 - Mark&quot;, &quot;2 - Tami&quot;, etc.</span>
</code></pre></div>`,1),$=s("code",null,"where",-1),f=o(`<p>下面的例子得到所有名称以 &quot;e&quot; 结尾的颜色：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>red orange yellow green blue purple<span class="token punctuation">]</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> where <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str ends-with <span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>在这个例子中，我们只保留大于<code>7</code>的数字：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># The block passed to where must evaluate to a boolean.</span>
<span class="token comment"># This outputs the list [orange blue purple].</span>

<span class="token builtin class-name">let</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">10</span> <span class="token number">8</span> <span class="token number">6</span> <span class="token number">7</span><span class="token punctuation">]</span>
<span class="token variable">$scores</span> <span class="token operator">|</span> where <span class="token variable">$it</span> <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token comment"># [10 8]</span>
</code></pre></div>`,4),x=s("code",null,"reduce",-1),w=s("code",null,"it",-1),q=s("code",null,"acc",-1),y=s("code",null,"--fold",-1),T=s("code",null,"-f",-1),A=s("code",null,"it",-1),z=s("code",null,"index",-1),M=s("code",null,"item",-1),C=s("code",null,"--numbered",-1),N=s("code",null,"-n",-1),E=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">8</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;total =&quot;</span> <span class="token punctuation">(</span><span class="token variable">$scores</span> <span class="token operator">|</span> reduce <span class="token punctuation">{</span> <span class="token operator">|</span>it, acc<span class="token operator">|</span> <span class="token variable">$acc</span> + <span class="token variable">$it</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># 15</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;total =&quot;</span> <span class="token punctuation">(</span><span class="token variable">$scores</span> <span class="token operator">|</span> math <span class="token function">sum</span><span class="token punctuation">)</span> <span class="token comment"># easier approach, same result</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;product =&quot;</span> <span class="token punctuation">(</span><span class="token variable">$scores</span> <span class="token operator">|</span> reduce <span class="token parameter variable">--fold</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token operator">|</span>it, acc<span class="token operator">|</span> <span class="token variable">$acc</span> * <span class="token variable">$it</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># 96</span>

<span class="token variable">$scores</span> <span class="token operator">|</span> reduce <span class="token parameter variable">-n</span> <span class="token punctuation">{</span> <span class="token operator">|</span>it, acc<span class="token operator">|</span> <span class="token variable">$acc</span>.item + <span class="token variable">$it</span>.index * <span class="token variable">$it</span>.item <span class="token punctuation">}</span> <span class="token comment"># 3 + 1*8 + 2*4 = 19</span>
</code></pre></div><h2 id="访问列表" tabindex="-1"><a class="header-anchor" href="#访问列表" aria-hidden="true">#</a> 访问列表</h2><p>要访问一个给定索引的列表元素, 可以使用<code>$name.index</code>形式, 其中<code>$name</code>是持有列表的变量。</p><p>例如，下面列表中的第二个元素可以用<code>$names.1</code>来访问：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span>Mark Tami Amanda Jeremy<span class="token punctuation">]</span>
<span class="token variable">$names</span>.1 <span class="token comment"># gives Tami</span>
</code></pre></div><p>如果索引在某个变量<code>$index</code>中，我们可以使用<code>get</code>命令从列表中提取该元素：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span>Mark Tami Amanda Jeremy<span class="token punctuation">]</span>
<span class="token builtin class-name">let</span> index <span class="token operator">=</span> <span class="token number">1</span>
<span class="token variable">$names</span> <span class="token operator">|</span> get <span class="token variable">$index</span> <span class="token comment"># gives Tami</span>
</code></pre></div>`,7),V=s("code",null,"length",-1),B=s("code",null,"[red green blue] | length",-1),D=s("code",null,"3",-1),H=s("code",null,"is-empty",-1),J=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>red green blue<span class="token punctuation">]</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> is-empty <span class="token comment"># false</span>

<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> is-empty <span class="token comment"># true</span>
</code></pre></div><p><code>in</code> 和 <code>not-in</code> 运算符用于测试一个值是否在一个列表中，例如：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>red green blue<span class="token punctuation">]</span>
<span class="token string">&#39;blue&#39;</span> <span class="token keyword">in</span> <span class="token variable">$colors</span> <span class="token comment"># true</span>
<span class="token string">&#39;yellow&#39;</span> <span class="token keyword">in</span> <span class="token variable">$colors</span> <span class="token comment"># false</span>
<span class="token string">&#39;gold&#39;</span> not-in <span class="token variable">$colors</span> <span class="token comment"># true</span>
</code></pre></div>`,3),L=s("code",null,"any",-1),I=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Do any color names end with &quot;e&quot;?</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> any <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str ends-with <span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span> <span class="token comment"># true</span>

<span class="token comment"># Is the length of any color name less than 3?</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> any <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token comment"># false</span>

<span class="token comment"># Are any scores greater than 7?</span>
<span class="token variable">$scores</span> <span class="token operator">|</span> any <span class="token variable">$it</span> <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token comment"># true</span>

<span class="token comment"># Are any scores odd?</span>
<span class="token variable">$scores</span> <span class="token operator">|</span> any <span class="token variable">$it</span> mod <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token comment"># true</span>
</code></pre></div>`,1),O=s("code",null,"all",-1),R=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Do all color names end with &quot;e&quot;?</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> all <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str ends-with <span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span> <span class="token comment"># false</span>

<span class="token comment"># Is the length of all color names greater than or equal to 3?</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> all <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str length<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token comment"># true</span>

<span class="token comment"># Are all scores greater than 7?</span>
<span class="token variable">$scores</span> <span class="token operator">|</span> all <span class="token variable">$it</span> <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token comment"># false</span>

<span class="token comment"># Are all scores even?</span>
<span class="token variable">$scores</span> <span class="token operator">|</span> all <span class="token variable">$it</span> mod <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment"># false</span>
</code></pre></div><h2 id="转换列表" tabindex="-1"><a class="header-anchor" href="#转换列表" aria-hidden="true">#</a> 转换列表</h2>`,2),S=s("code",null,"flatten",-1),Y=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token number">4</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> flatten <span class="token comment"># [1 2 3 4 5 6]</span>

<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span> <span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> flatten <span class="token operator">|</span> flatten <span class="token operator">|</span> flatten <span class="token comment"># [1 2 3 4 5 6 7 8]</span>
</code></pre></div>`,1),Z=s("code",null,"wrap",-1),Q=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> zones <span class="token operator">=</span> <span class="token punctuation">[</span>UTC CET Europe/Moscow Asia/Yekaterinburg<span class="token punctuation">]</span>

<span class="token comment"># Show world clock for selected time zones</span>
<span class="token variable">$zones</span> <span class="token operator">|</span> wrap <span class="token string">&#39;Zone&#39;</span> <span class="token operator">|</span> upsert Time <span class="token punctuation">{</span><span class="token operator">|</span>it<span class="token operator">|</span>
    <span class="token punctuation">(</span>
        <span class="token function">date</span> now
            <span class="token operator">|</span> <span class="token function">date</span> to-timezone <span class="token variable">$it</span>.Zone
            <span class="token operator">|</span> <span class="token function">date</span> <span class="token function">format</span> <span class="token string">&#39;%Y.%m.%d %H:%M&#39;</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>`,1);function U(X,j){const n=r("RouterLink");return c(),l("div",null,[i,s("p",null,[a("要遍历一个列表中的元素，可以使用"),e(n,{to:"/book/commands/each.html"},{default:t(()=>[k]),_:1}),a("命令和 "),e(n,{to:"/zh-CN/book/types_of_data.html#%E5%9D%97"},{default:t(()=>[a("Nu 代码块")]),_:1}),a(" 指定对每一个元素做什么操作。块参数（例如"),d,a("中的"),m,a("）通常是当前的列表元素，但如果需要，通过 "),b,a("("),h,a(") 标志可以将其改为包含"),g,a("和"),_,a("值的元素。比如：")]),v,s("p",null,[e(n,{to:"/book/commands/where.html"},{default:t(()=>[$]),_:1}),a("命令可以用来创建一个列表的子集，高效地根据一个条件过滤列表。")]),f,s("p",null,[e(n,{to:"/book/commands/reduce.html"},{default:t(()=>[x]),_:1}),a("命令从一个列表计算一个单一的值。 它使用了一个代码块，该块有两个参数：当前元素（即 "),w,a("）和一个累加器 (即 "),q,a(")。如果想要给累加器指定一个初始值，请使用 "),y,a(" ("),T,a(") 标志。 若要改变"),A,a("使其具有"),z,a("和"),M,a("两个值，请添加"),C,a("（"),N,a("）标志。 例如：")]),E,s("p",null,[e(n,{to:"/book/commands/length.html"},{default:t(()=>[V]),_:1}),a("命令返回列表中的元素个数。例如，"),B,a("输出"),D,a("。")]),s("p",null,[e(n,{to:"/book/commands/is-empty.html"},{default:t(()=>[H]),_:1}),a(" 命令确定一个字符串、列表或表格是否为空。它可以与列表一起使用，如下所示：")]),J,s("p",null,[e(n,{to:"/book/commands/any.html"},{default:t(()=>[L]),_:1}),a("命令用于确定一个列表中是否有任意一个元素匹配给定的条件，例如：")]),I,s("p",null,[e(n,{to:"/book/commands/all.html"},{default:t(()=>[O]),_:1}),a("命令确定一个列表中是否所有元素都匹配给定的条件。例如：")]),R,s("p",null,[e(n,{to:"/book/commands/flatten.html"},{default:t(()=>[S]),_:1}),a("命令通过将嵌套列表中的元素添加到顶层列表中来从现有的列表创建一个新列表。这条命令可以被多次调用，以使任意嵌套深度的列表变平。例如：")]),Y,s("p",null,[e(n,{to:"/book/commands/wrap.html"},{default:t(()=>[Z]),_:1}),a("命令将一个列表转换为一个表格。每个列表的值将都会被转换为一个单独的行和列：")]),Q])}const G=p(u,[["render",U],["__file","working_with_lists.html.vue"]]);export{G as default};
