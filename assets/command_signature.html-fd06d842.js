import{_ as a,M as i,p as c,q as d,Q as e,t,N as o,U as s,a1 as l}from"./framework-344bb0e4.js";const r={},u=e("h1",{id:"command-signature",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#command-signature","aria-hidden":"true"},"#"),t(" Command signature")],-1),p=e("code",null,"str distance",-1),h=l(`<div class="language-text" data-ext="text"><pre class="language-text"><code>Signatures(Cell paths are supported):
  &lt;string&gt; | str distance &lt;string&gt; -&gt; &lt;int&gt;
</code></pre></div><p>The first type name before <code>|</code> describes the type of input pipeline. The command name is followed by the required argument type(s) for the command. The output type is <code>int</code> and given after <code>-&gt;</code>.</p><p><code>(Cell paths are supported)</code> indicates that you can provide cell paths for <code>str distance</code> to apply an operation at the given cell path(s) in a nested structure or table, and replace the column or field with the result, like: <code>ls | str distance &#39;nushell&#39; &#39;name&#39;</code></p>`,3),m=e("code",null,"str join",-1),_=e("div",{class:"language-text","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`Signatures:
  list<string> | str join <string?> -> <string>
`)])],-1),g=e("code",null,"str join",-1),f=e("code",null,"string",-1),x=e("code",null,"string",-1),y=e("code",null,"<nothing>",-1),v=e("code",null,"null",-1),k=e("code",null,"rm",-1);function b(j,C){const n=i("RouterLink");return c(),d("div",null,[u,e("p",null,[t("nu commands contains a signature section, take "),o(n,{to:"/commands/docs/str_distance.html"},{default:s(()=>[p]),_:1}),t(" as example, the signature is like this:")]),h,e("p",null,[t("Here is another one example, "),o(n,{to:"/commands/docs/str_join.html"},{default:s(()=>[m]),_:1}),t(":")]),_,e("p",null,[t("It says that "),o(n,{to:"/commands/docs/str_join.html"},{default:s(()=>[g]),_:1}),t(" command expect input pipeline is a list of string, and take optional "),f,t(" type argument, finally the output type is "),x,t(".")]),e("p",null,[t("Some commands don't accept or require data through the input pipeline, thus the input type will be "),y,t(". The same is true for the output type if the command returns "),v,t(" (e.g. "),o(n,{to:"/commands/docs/rm.html"},{default:s(()=>[k]),_:1}),t(").")])])}const T=a(r,[["render",b],["__file","command_signature.html.vue"]]);export{T as default};
