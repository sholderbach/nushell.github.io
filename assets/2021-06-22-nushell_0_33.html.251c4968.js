import{_ as r,z as s,A as a,W as i,X as n,C as e,T as o,a6 as l,Q as h}from"./framework.3d018c9f.js";const d="/assets/0_32_themes.a37b6a85.png",u={},p=n("h1",{id:"nushell-0-33",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nushell-0-33","aria-hidden":"true"},"#"),e(" Nushell 0.33")],-1),c=n("p",null,"Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.",-1),m=n("p",null,"Today, we're releasing 0.33 of Nu. This release includes improved completions, support for pipeline variables, syntax theming and more.",-1),_=n("h1",{id:"where-to-get-it",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#where-to-get-it","aria-hidden":"true"},"#"),e(" Where to get it")],-1),f={href:"https://github.com/nushell/nushell/releases/tag/0.33.0",target:"_blank",rel:"noopener noreferrer"},g={href:"https://crates.io/crates/nu",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"cargo install nu",-1),k=l('<p>If you want all the goodies, you can install <code>cargo install nu --features=extra</code>.</p><p>If you&#39;d like to try the experimental paging feature in this release, you can install with <code>cargo install nu --features=table-pager</code>.</p><p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p><h1 id="what-s-new" tabindex="-1"><a class="header-anchor" href="#what-s-new" aria-hidden="true">#</a> What&#39;s New</h1><h2 id="improved-completions-fdncred-niklasjonsson-kubouch-andrasio-jt" tabindex="-1"><a class="header-anchor" href="#improved-completions-fdncred-niklasjonsson-kubouch-andrasio-jt" aria-hidden="true">#</a> Improved completions (fdncred, NiklasJonsson, kubouch, andrasio, jt)</h2>',5),w={href:"https://github.com/nushell/nushell/pull/3594",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/nushell/nushell/pull/3589",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/nushell/nushell/pull/3577",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/nushell/nushell/pull/3575",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/nushell/nushell/pull/3564",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/nushell/nushell/pull/3571",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/nushell/nushell/pull/3665",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/nushell/nushell/pull/3653",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"~",-1),z=l(`<p>Behind the scenes, we&#39;ve also refactored completions into their own crate, so that we can more easily grow the areas where completions are supported.</p><h2 id="pipeline-vars-jt" tabindex="-1"><a class="header-anchor" href="#pipeline-vars-jt" aria-hidden="true">#</a> Pipeline vars (jt)</h2><p>Sometimes, when you&#39;re working on a pipeline, you want to refer to values coming in using an xargs style. With 0.33, we&#39;ve introduced a new built-in variable called <code>$in</code>. The <code>$in</code> variable will collect the pipeline into a value for you, allowing you to access the whole stream as a parameter.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token variable">$in</span>.1 * <span class="token variable">$in</span>.2
<span class="token number">6</span>
</code></pre></div><h2 id="new-distributions-itsme-alan-zmedico" tabindex="-1"><a class="header-anchor" href="#new-distributions-itsme-alan-zmedico" aria-hidden="true">#</a> New distributions (itsme-alan, zmedico)</h2>`,5),T={href:"https://github.com/microsoft/winget-pkgs/pull/17428",target:"_blank",rel:"noopener noreferrer"},V={href:"https://packages.gentoo.org/packages/app-shells/nushell",target:"_blank",rel:"noopener noreferrer"},B=l('<h2 id="more-natural-pipeline-output-jt" tabindex="-1"><a class="header-anchor" href="#more-natural-pipeline-output-jt" aria-hidden="true">#</a> More natural pipeline output (jt)</h2><p>In this release, we&#39;ve also relaxed some of the strictness in when output happens to always be at the end of a pipeline. In previous versions of Nushell, it was common for people to try an example like <code>echo &quot;hello &quot;; echo &quot;world&quot;</code> only to be confused why they only saw <code>world</code> in the output. Now, we treat <code>;</code> like carriage return, so that pipelines more naturally output their results just as they do at the end of lines.</p><p>You can add back in the ignore ability using the new <code>ignore</code> command, which will ignore any stdout or data output from the previous command in the pipeline. For example, <code>ls | ignore</code>.</p><h2 id="syntax-highlighting-themes-fdncred" tabindex="-1"><a class="header-anchor" href="#syntax-highlighting-themes-fdncred" aria-hidden="true">#</a> Syntax highlighting themes (fdncred)</h2><p><img src="'+d+'" alt="image of syntax highlighting themes in Nushell"></p><p><em>Nu, with configurable colors</em></p>',6),E={href:"https://github.com/nushell/nushell/pull/3606",target:"_blank",rel:"noopener noreferrer"},L=n("h2",{id:"new-commands",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#new-commands","aria-hidden":"true"},"#"),e(" New commands")],-1),$={href:"https://github.com/nushell/nushell/pull/3629",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"unlet_env",-1),C={href:"https://github.com/nushell/nushell/pull/3643",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"ignore",-1),Y={href:"https://github.com/nushell/nushell/pull/3570",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"ansi gradient",-1),J=n("h2",{id:"additional-improvements",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#additional-improvements","aria-hidden":"true"},"#"),e(" Additional improvements")],-1),P={href:"https://github.com/nushell/nushell/pull/3660",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"char",-1),G={href:"https://github.com/nushell/nushell/pull/3634",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/nushell/nushell/pull/3601",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/nushell/nushell/pull/3548",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/nushell/nushell/pull/3649",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/nushell/nushell/pull/3635",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/nushell/nushell/pull/3632",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/nushell/nushell/pull/3630",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/nushell/nushell/pull/3628",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/nushell/nushell/pull/3618",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/nushell/nushell/pull/3561",target:"_blank",rel:"noopener noreferrer"},ee={href:"https://github.com/nushell/nushell/pull/3611",target:"_blank",rel:"noopener noreferrer"},ne={href:"https://github.com/nushell/nushell/pull/3600",target:"_blank",rel:"noopener noreferrer"},te={href:"https://github.com/nushell/nushell/pull/3529",target:"_blank",rel:"noopener noreferrer"},oe=n("code",null,"from sqlite",-1),le={href:"https://github.com/nushell/nushell/pull/3522",target:"_blank",rel:"noopener noreferrer"},re=n("code",null,"to sqlite",-1),se={href:"https://github.com/nushell/nushell/pull/3588",target:"_blank",rel:"noopener noreferrer"},ae={href:"https://github.com/nushell/nushell/pull/3580",target:"_blank",rel:"noopener noreferrer"},ie=n("code",null,"def",-1),he={href:"https://github.com/nushell/nushell/pull/3588",target:"_blank",rel:"noopener noreferrer"},de=n("code",null,"exec",-1),ue={href:"https://github.com/nushell/nushell/pull/3573",target:"_blank",rel:"noopener noreferrer"},pe=n("code",null,"where",-1),ce={href:"https://github.com/nushell/nushell/pull/3562",target:"_blank",rel:"noopener noreferrer"},me={href:"https://github.com/nushell/nushell/pull/3560",target:"_blank",rel:"noopener noreferrer"},_e={href:"https://github.com/nushell/nushell/pull/3524",target:"_blank",rel:"noopener noreferrer"},fe=n("li",null,"jt, LovecraftianHorror, apatrushev, sholderbach, elferherrera, inet56 added fixes to the website and docs",-1),ge=n("li",null,"fdncred, efx, jt, and andrasio all added scripts and fixes to the scripts repo",-1),be=n("h1",{id:"looking-ahead",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#looking-ahead","aria-hidden":"true"},"#"),e(" Looking ahead")],-1),ke={href:"https://github.com/nushell/nushell/pull/3608",target:"_blank",rel:"noopener noreferrer"};function we(ve,ye){const t=h("ExternalLinkIcon");return s(),a("div",null,[p,c,m,i(" more "),_,n("p",null,[e("Nu 0.33 is available as "),n("a",f,[e("pre-built binaries"),o(t)]),e(" or from "),n("a",g,[e("crates.io"),o(t)]),e(". If you have Rust installed you can install it using "),b,e(".")]),k,n("p",null,[e("We've begun the completion improvements that have been planned for some time. In this release, we've added completions for "),n("a",w,[e("alias definitions"),o(t)]),e(", "),n("a",v,[e("source imports"),o(t)]),e(", completions for "),n("a",y,[e("quoted paths"),o(t)]),e(", completions while "),n("a",x,[e("inside of a pipeline"),o(t)]),e(", completions in "),n("a",N,[e("incomplete expressions"),o(t)]),e(", "),n("a",j,[e("subcommand completions"),o(t)]),e(" and more.")]),n("p",null,[e("On Windows, we've "),n("a",I,[e("sped up path completions"),o(t)]),e(". We've also reworked path handling, which should help make "),n("a",W,[e("path completions in Windows more consistent"),o(t)]),e(", including handling of "),q,e(".")]),z,n("p",null,[e("You can now install Nushell from the "),n("a",T,[e("winget repo"),o(t)]),e(" and from "),n("a",V,[e("gentoo"),o(t)]),e(".")]),B,n("p",null,[e("You can now configure the colors used in syntax highlighting. For the currently supported token types and examples, check out "),n("a",E,[e("the original PR"),o(t)]),e(".")]),L,n("ul",null,[n("li",null,[e("nathom added "),n("a",$,[A,e(" to remove environment variables from the current scope"),o(t)])]),n("li",null,[e("jt added the "),n("a",C,[S,e(" command to ignore pipeline output"),o(t)])]),n("li",null,[e("fdncred added "),n("a",Y,[F,e(" command"),o(t)])])]),J,n("ul",null,[n("li",null,[e("fdncred added "),n("a",P,[e("path and environment path separators to "),R,o(t)]),e(" to allow for creating more portable scripts, fixed an issue with "),n("a",G,[e("error colors"),o(t)]),e(", added "),n("a",H,[e("single and double quote to char"),o(t)]),e(", "),n("a",M,[e("version now lists plugins"),o(t)])]),n("li",null,[e("efx updated "),n("a",O,[e("commands to engine-p style"),o(t)])]),n("li",null,[e("chrisfinazzo "),n("a",Q,[e("fixed some of our helper scripts"),o(t)])]),n("li",null,[e("andrasio, jt "),n("a",X,[e("removed the clap dependency, so nushell parses its own parameters"),o(t)])]),n("li",null,[e("vladdoster landed "),n("a",D,[e("some doc improvements"),o(t)])]),n("li",null,[e("NiklasJonsson improved "),n("a",K,[e("nu doc comments"),o(t)])]),n("li",null,[e("reaganmcf added "),n("a",U,[e("an optional plugin for handling mp4 metadata"),o(t)]),e(" and "),n("a",Z,[e("bumped sysinfo"),o(t)])]),n("li",null,[e("voanhduy1512 added support for "),n("a",ee,[e("invoking external commands via string interpolation"),o(t)])]),n("li",null,[e("Garfield96 added "),n("a",ne,[e("--sheets for xlsx/ods"),o(t)]),e(", "),n("a",te,[e("--tables for "),oe,o(t)]),e(", and "),n("a",le,[e("fixed a panic with giving empty tables to "),re,o(t)])]),n("li",null,[e("kubouch improved "),n("a",se,[e("errors and updated commands to engine-p"),o(t)]),e(", improved some "),n("a",ae,[e("internal handling of "),ie,o(t)]),e(", "),n("a",he,[e("clarified the "),de,e(" help message"),o(t)])]),n("li",null,[e("sholderbach improved "),n("a",ue,[pe,e(" docs"),o(t)])]),n("li",null,[e("jt added "),n("a",ce,[e("parsing for hex, binary, and octal numbers"),o(t)])]),n("li",null,[e("pka improved "),n("a",me,[e("territory in locale support for byte formatting"),o(t)])]),n("li",null,[e("ahkrr fixed handling of "),n("a",_e,[e("# in filenames"),o(t)])]),fe,ge]),be,n("p",null,[e("We're continuing to improve our dataframe support, and hope to be rolling it out a part of the default commands in the next release. Elfherrera has been "),n("a",ke,[e("hard at work improving the dataframe support to get it ready"),o(t)]),e(".")])])}const Ne=r(u,[["render",we],["__file","2021-06-22-nushell_0_33.html.vue"]]);export{Ne as default};
