import{_ as i,z as l,A as r,X as e,C as n,T as a,$ as t,a6 as o,Q as d}from"./framework.3d018c9f.js";const c={},p=o(`<h1 id="mit-text-arbeiten" tabindex="-1"><a class="header-anchor" href="#mit-text-arbeiten" aria-hidden="true">#</a> Mit Text arbeiten</h1><p>Texte können ganz verschiedene Formen von Daten annehmen. Es können Dateinamen, Verzeichniss-Pfade, Spaltennamen und vieles mehr sein. Texte kommen so oft vor, dass Nushell diverse Wege bereitstellt um mit ihnen zu arbeiten. Der Anwendungsfall entscheidet, welches am besten passt.</p><h2 id="texte-in-einfachen-anfuhrungszeichen" tabindex="-1"><a class="header-anchor" href="#texte-in-einfachen-anfuhrungszeichen" aria-hidden="true">#</a> Texte in einfachen Anführungszeichen</h2><p>Der einfachste Text in Nushell ist der in einfachen Anführungszeichen. Er wird mit dem <code>&#39;</code> Zeichen umgeben. Hier der Text als Hallo Welt.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;Hallo Welt&#39;</span>
Hallo Welt
</code></pre></div><p>Text in einfachen Anführungszeichen belassen den Text wie er ist, womit sie ideal sind, um diverse Formen von Text zu enthalten.</p><h2 id="texte-in-doppelten-anfuhrungszeichen" tabindex="-1"><a class="header-anchor" href="#texte-in-doppelten-anfuhrungszeichen" aria-hidden="true">#</a> Texte in doppelten Anführungszeichen</h2><p>Für komplexere Formen, werden in Nushell Texte in doppelte Anführungszeichen gesetzt. Diese werden mit dem <code>&#39;</code> Zeichen umgeben. Sie unterstützen die Verwendung von Escape-Zeichen mit der Verwendung eines <code>\\</code>.</p><p>Zum Beispiel kann das Hallo Welt von vorhin geschrieben werden als, Hallo gefolgt von einen <code>\\n</code> um eine neue Linie zu erzeugen, dann Welt. Das ganze in doppelten Anführungszeichen.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&quot;Hallo<span class="token entity" title="\\n">\\n</span>Welt&quot;</span>
Hallo
Welt
</code></pre></div><p>Escape Zeichen werden verwendet um Zeichen einzugeben, die ansonsten schwer zu tippen wären.</p><p>Nushell unterstützt aktuell folgende Escape Zeichen:</p><ul><li><code>\\&quot;</code> - Doppeltes Anführungszeichen</li><li><code>\\&#39;</code> - Einfaches Anführungszeichen</li><li><code>\\\\</code> - Gegenstrich</li><li><code>\\/</code> - Vorwärtsstrich</li><li><code>\\b</code> - Rücktaste</li><li><code>\\f</code> - Vorschub</li><li><code>\\r</code> - Zeilenumschalt</li><li><code>\\n</code> - Neue Zeile (line feed)</li><li><code>\\t</code> - Tabulator</li><li><code>\\uXXXX</code> - Ein Unicode Zeichen (Tausche XXXX mit der Nummer des Unicode Zeichens)</li></ul><h2 id="text-interpolation" tabindex="-1"><a class="header-anchor" href="#text-interpolation" aria-hidden="true">#</a> Text Interpolation</h2><p>Anwendungsfälle von komplexeren Text-Operationen benötigen eine neue Form von Text: Text Interpolation. Ein Weg um Texte zusammenzustellen, die sowohl aus rohem Text, als auch aus dem Ergebnis von laufenden Ausdrücken bestehen. Text Interpolation kombiniert diese Texte zusammen zu einem neuen Text-Ergebnis.</p><p>Die Text Interpolation wird mit <code>$&quot; &quot;</code> und <code>$&quot; &quot;</code> gebildet.</p><p>Soll zum Beispiel eine Person per Namen gegrüsst werden, deren Namen in einer Variablen steht, dann sieht das so aus:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span>
<span class="token operator">&gt;</span> $<span class="token string">&quot;greetings, (<span class="token variable">$name</span>)&quot;</span>
greetings, Alice
</code></pre></div><p>Ein Ausdruck in <code>()</code> wird zuerst fertig ausgeführt. Das Ergebnis wird zur Bildung des finalen Textes verwendet.</p><p>Text Interpolationen funktionieren mit einfachen Anführungszeichen, <code>$&#39; &#39;</code>, sowie mit doppelten Anführungszeichen <code>$&quot; &quot;</code>. Analog unterstützen doppelte Anführungszeichen auch bei der Text Interpolation Escape Zeichen, was einfache Anführungszeichen nicht tun.</p><p>Seit Version 0.61 unterstützt Nushell Escape Zeichen für Klammern. So können die Zeichen <code>(</code> und <code>)</code> in einem Text verwendet werden, ohne dass Nushell auswerten will, was sich dazwischen befindet.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> $<span class="token string">&quot;2 + 2 is (2 + 2) \\(you guessed it!)&quot;</span>
<span class="token number">2</span> + <span class="token number">2</span> is <span class="token number">4</span> <span class="token punctuation">(</span>you guessed it<span class="token operator">!</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="texte-aufsplitten" tabindex="-1"><a class="header-anchor" href="#texte-aufsplitten" aria-hidden="true">#</a> Texte aufsplitten</h2>`,23),h=e("code",null,"split row",-1),u=e("code",null,'let colors = ("red,green,blue" | split row ",")',-1),g=e("code",null,"[red green blue]",-1),m=e("code",null,"split column",-1),k=e("code",null,'let colors = ("red,green,blue" | split column ",")',-1),b=e("code",null,"split chars",-1),x=o(`<h2 id="der-str-befehl" tabindex="-1"><a class="header-anchor" href="#der-str-befehl" aria-hidden="true">#</a> Der <code>str</code> Befehl</h2><p>Viele Text Befehle sind Sub-Befehle des <code>str</code> Befehls. Mit <code>help str</code> wirden alle Sub-Befehle ausgegeben.</p><p>Zum Beispiel kann geprüft werden, ob sich ein Zeichen in einem Text befindet mit <code>str contains</code>:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&quot;Hallo Welt&quot;</span> <span class="token operator">|</span> str contains <span class="token string">&quot;W&quot;</span>
<span class="token boolean">true</span>
</code></pre></div><h3 id="texte-schneiden" tabindex="-1"><a class="header-anchor" href="#texte-schneiden" aria-hidden="true">#</a> Texte schneiden</h3>`,5),f=e("code",null,"str trim",-1),_=e("code",null,"str trim",-1),v=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;       My   string   &#39;</span> <span class="token operator">|</span> str trim
My   string
</code></pre></div><p>Mit den Optionen <code>--right</code> und <code>--left</code> kann die Seite angegeben werden, auf der geschnitten werden soll.</p><p>Um ein spezifisches Zeichen weg zu schneiden, wird <code>--char &lt;Character&gt;</code> verwendet. Hier ein Beispiel mit dieser Option:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;=== Nu shell ===&#39;</span> <span class="token operator">|</span> str trim <span class="token parameter variable">-r</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;=&#39;</span>
<span class="token operator">==</span><span class="token operator">=</span> Nu shell
</code></pre></div><h3 id="subtexte" tabindex="-1"><a class="header-anchor" href="#subtexte" aria-hidden="true">#</a> Subtexte</h3><p>Subtexte sind Stücke von Texten. Sie haben einen Start- und einen Endpunkt. Hier ein Beispiel eines Substrings:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;Hallo Welt!&#39;</span> <span class="token operator">|</span> str index-of <span class="token string">&#39;o&#39;</span>
<span class="token number">4</span>
<span class="token operator">&gt;</span> <span class="token string">&#39;Hallo Welt!&#39;</span> <span class="token operator">|</span> str index-of <span class="token string">&#39;l&#39;</span>
<span class="token number">8</span>
<span class="token operator">&gt;</span> <span class="token string">&#39;Hallo Welt!&#39;</span> <span class="token operator">|</span> str substring <span class="token string">&#39;4,8&#39;</span>
o We
</code></pre></div><h3 id="texte-ausrichten-padding" tabindex="-1"><a class="header-anchor" href="#texte-ausrichten-padding" aria-hidden="true">#</a> Texte ausrichten (padding)</h3>`,8),T=e("code",null,"[str lpad",-1),w=e("code",null,"str rpad",-1),z=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;1234&#39;</span> <span class="token operator">|</span> str lpad <span class="token parameter variable">-l</span> <span class="token number">10</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;0&#39;</span>
0000001234
<span class="token operator">&gt;</span> <span class="token string">&#39;1234&#39;</span> <span class="token operator">|</span> str rpad <span class="token parameter variable">-l</span> <span class="token number">10</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">|</span> str length
<span class="token number">10</span>
</code></pre></div><h3 id="texte-umkehren" tabindex="-1"><a class="header-anchor" href="#texte-umkehren" aria-hidden="true">#</a> Texte umkehren</h3>`,2),B=e("code",null,"str reverse",-1),Z=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;Nushell&#39;</span> <span class="token operator">|</span> str reverse
llehsuN
<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;Nushell&#39;</span> <span class="token string">&#39;is&#39;</span> <span class="token string">&#39;cool&#39;</span><span class="token punctuation">]</span> <span class="token operator">|</span> str reverse
╭───┬─────────╮
│ <span class="token number">0</span> │ llehsuN │
│ <span class="token number">1</span> │ si      │
│ <span class="token number">2</span> │ looc    │
╰───┴─────────╯
</code></pre></div><h2 id="texte-parsen" tabindex="-1"><a class="header-anchor" href="#texte-parsen" aria-hidden="true">#</a> Texte parsen</h2>`,2),N=e("code",null,"parse",-1),A=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;Nushell is the best&#39;</span> <span class="token operator">|</span> parse <span class="token string">&#39;{shell} is {type}&#39;</span>
╭───┬─────────┬──────────╮
│ <span class="token comment"># │  shell  │   type   │</span>
├───┼─────────┼──────────┤
│ <span class="token number">0</span> │ Nushell │ the best │
╰───┴─────────┴──────────╯
<span class="token operator">&gt;</span> <span class="token string">&#39;Bash is kinda cringe&#39;</span> <span class="token operator">|</span> parse <span class="token parameter variable">--regex</span> <span class="token string">&#39;(?P&lt;shell&gt;\\w+) is (?P&lt;type&gt;[\\w\\s]+)&#39;</span>
╭───┬───────┬──────────────╮
│ <span class="token comment"># │ shell │     type     │</span>
├───┼───────┼──────────────┤
│ <span class="token number">0</span> │ Bash  │ kinda cringe │
╰───┴───────┴──────────────╯
</code></pre></div><h2 id="texte-konvertieren" tabindex="-1"><a class="header-anchor" href="#texte-konvertieren" aria-hidden="true">#</a> Texte konvertieren</h2><p>Es gibt verschiedenste Wege Texte in und von anderen Typen zu konvertieren.</p><h3 id="in-einen-text" tabindex="-1"><a class="header-anchor" href="#in-einen-text" aria-hidden="true">#</a> In einen Text</h3>`,4),S=e("code",null,"into string",-1),q=e("code",null,"123 | into string",-1),E=e("li",null,[n("Mit Text Interpolation. e.g. "),e("code",null,"$'(123)'")],-1),W=e("code",null,"build-string",-1),D=e("code",null,"build-string (123)",-1),H=e("h3",{id:"von-einem-text",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#von-einem-text","aria-hidden":"true"},"#"),n(" Von einem Text")],-1),V=e("code",null,"into <type>",-1),y=e("code",null,"'123' | into int",-1),M=e("h2",{id:"texte-einfarben",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#texte-einfarben","aria-hidden":"true"},"#"),n(" Texte einfärben")],-1),$=e("code",null,"ansi",-1),X=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token operator"},">"),n(),e("span",{class:"token string"},"$'(ansi purple_bold)This text is a bold purple!(ansi reset)'"),n(`
`)])])],-1),F=e("p",null,[e("code",null,"ansi purple_bold"),n(" färbt den Text purpur. "),e("code",null,"ansi reset"),n(" stellt die Farbe wieder auf stadard. (Tipp: Ein Zurückstellen der Farben mit "),e("code",null,"ansi reset"),n(" sollte nach jeder Farbänderung stehen)")],-1);function I(L,P){const s=d("RouterLink");return l(),r("div",null,[p,e("p",null,[n("Der "),a(s,{to:"/book/commands/split_row.html"},{default:t(()=>[h]),_:1}),n(" Befehl erstellt eine Liste aus einem Text, getrennt durch das angegebene Trennzeichen. Zum Beispiel "),u,n(" erstellt die Liste "),g,n(".")]),e("p",null,[n("Der "),a(s,{to:"/book/commands/split_column.html"},{default:t(()=>[m]),_:1}),n(" Befehl erstellt eine Tabelle aus einem Text, getrennt durch ein angegebenes Trennzeichen. Zum Beispiel "),k,n(" erstellt eine Tabelle mit den Elementen als Spalte.")]),e("p",null,[n("Schliesslich trennt der "),a(s,{to:"/book/commands/split_chars.html"},{default:t(()=>[b]),_:1}),n(" Befehl einen Text in seine Zeichen auf.")]),x,e("p",null,[n("Die Seiten eines Textes werden mit dem "),a(s,{to:"/book/commands/str_trim.html"},{default:t(()=>[f]),_:1}),n(" Befehl geschnitten. Standardmässig schneidet der "),a(s,{to:"/book/commands/str_trim.html"},{default:t(()=>[_]),_:1}),n(" Befehl Leerraum von beiden Seiten des Textes. Zum Beispiel:")]),v,e("p",null,[n("Mit den Befehlen "),T,n("](/book/commands/str_lpad.md) und "),a(s,{to:"/book/commands/str_rpad.html"},{default:t(()=>[w]),_:1}),n(" können Texte der angegeben Ausrichtung nach erweitert werden. Dieses Padding erweitert den Text bis zur angegebenen Länge, zum Beispiel:")]),z,e("p",null,[n("Dies kann mit dem "),a(s,{to:"/book/commands/str_reverse.html"},{default:t(()=>[B]),_:1}),n(" Befehl ganz einfach erreicht werden.")]),Z,e("p",null,[n("Mit dem "),a(s,{to:"/book/commands/parse.html"},{default:t(()=>[N]),_:1}),n(" Befehl können Texte in Spalten geparst werden. Zum Beispiel:")]),A,e("ol",null,[e("li",null,[n("Mit "),a(s,{to:"/book/commands/into_string.html"},{default:t(()=>[S]),_:1}),n(". e.g. "),q]),E,e("li",null,[n("Mit "),a(s,{to:"/book/commands/build-string.html"},{default:t(()=>[W]),_:1}),n(". e.g. "),D])]),H,e("ol",null,[e("li",null,[n("Mit "),a(s,{to:"/book/commands/into.html"},{default:t(()=>[V]),_:1}),n(". e.g. "),y])]),M,e("p",null,[n("Texte können eingefärbt werden mit dem "),a(s,{to:"/book/commands/ansi.html"},{default:t(()=>[$]),_:1}),n(" Befehl Zum Beispiel:")]),X,F])}const O=i(c,[["render",I],["__file","working_with_strings.html.vue"]]);export{O as default};
