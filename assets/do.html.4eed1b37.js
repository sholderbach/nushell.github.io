import{_ as o,z as t,A as r,X as a,C as e,D as n,a6 as p}from"./framework.3d018c9f.js";const l={},c={id:"frontmatter-title-for-core",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title-for-core","aria-hidden":"true"},"#",-1),d={class:"command-title"},u=p(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; do (closure) ...rest --ignore-errors --ignore-shell-errors --ignore-program-errors --capture-errors</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>closure</code>: the closure to run</li><li><code>...rest</code>: the parameter(s) for the closure</li><li><code>--ignore-errors</code>: ignore errors as the closure runs</li><li><code>--ignore-shell-errors</code>: ignore shell errors as the closure runs</li><li><code>--ignore-program-errors</code>: ignore external program errors as the closure runs</li><li><code>--capture-errors</code>: catch errors as the closure runs, and return them</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Run the closure</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token builtin class-name">echo</span> hello <span class="token punctuation">}</span>
</code></pre></div><p>Run a stored first-class closure</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> text <span class="token operator">=</span> <span class="token string">&quot;I am enclosed&quot;</span><span class="token punctuation">;</span> <span class="token builtin class-name">let</span> hello <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token variable">$text</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token variable">$hello</span>
</code></pre></div><p>Run the closure and ignore both shell and external program errors</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token keyword">do</span> <span class="token parameter variable">-i</span> <span class="token punctuation">{</span> thisisnotarealcommand <span class="token punctuation">}</span>
</code></pre></div><p>Run the closure and ignore shell errors</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token keyword">do</span> <span class="token parameter variable">-s</span> <span class="token punctuation">{</span> thisisnotarealcommand <span class="token punctuation">}</span>
</code></pre></div><p>Run the closure and ignore external program errors</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token keyword">do</span> <span class="token parameter variable">-p</span> <span class="token punctuation">{</span> nu <span class="token parameter variable">-c</span> <span class="token string">&#39;exit 1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;I&#39;ll still run&quot;</span>
</code></pre></div><p>Abort the pipeline if a program returns a non-zero exit code</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token keyword">do</span> <span class="token parameter variable">-c</span> <span class="token punctuation">{</span> nu <span class="token parameter variable">-c</span> <span class="token string">&#39;exit 1&#39;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> myscarycommand
</code></pre></div><p>Run the closure, with a positional parameter</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token operator">|</span>x<span class="token operator">|</span> <span class="token number">100</span> + <span class="token variable">$x</span> <span class="token punctuation">}</span> <span class="token number">77</span>
</code></pre></div><p>Run the closure, with input</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token number">77</span> <span class="token operator">|</span> <span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token operator">|</span>x<span class="token operator">|</span> <span class="token number">100</span> + <span class="token variable">$in</span> <span class="token punctuation">}</span>
</code></pre></div>`,21);function h(s,k){return t(),r("div",null,[a("h1",c,[i,e(),a("code",null,n(s.$frontmatter.title),1),e(" for core")]),a("div",d,n(s.$frontmatter.core),1),u])}const m=o(l,[["render",h],["__file","do.html.vue"]]);export{m as default};
