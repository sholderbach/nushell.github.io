import{_ as n,p as o,q as r,Q as e,t,v as s,a1 as c}from"./framework-344bb0e4.js";const i={},d={id:"frontmatter-title-for-core",tabindex:"-1"},h=e("a",{class:"header-anchor",href:"#frontmatter-title-for-core","aria-hidden":"true"},"#",-1),l={class:"command-title"},p=c(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; source (filename)</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>filename</code>: the filepath to the script file to source</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>This command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Runs foo.nu in the current context</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">source</span> foo.nu
</code></pre></div><p>Runs foo.nu in current context and call the command defined, suppose foo.nu has content: <code>def say-hi [] { echo &#39;Hi!&#39; }</code></p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">source</span> ./foo.nu<span class="token punctuation">;</span> say-hi
</code></pre></div>`,11);function u(a,f){return o(),r("div",null,[e("h1",d,[h,t(),e("code",null,s(a.$frontmatter.title),1),t(" for core")]),e("div",l,s(a.$frontmatter.core),1),p])}const _=n(i,[["render",u],["__file","source.html.vue"]]);export{_ as default};
