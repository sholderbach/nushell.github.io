import{_ as i,z as l,A as r,X as e,C as a,T as t,$ as n,a6 as o,Q as d}from"./framework.3d018c9f.js";const h={},c=o(`<h1 id="variables-and-subexpressions" tabindex="-1"><a class="header-anchor" href="#variables-and-subexpressions" aria-hidden="true">#</a> Variables and Subexpressions</h1><p>There are two types of evaluation expressions in Nushell: variables and subexpressions. You know that you&#39;re looking at an evaluation expression because it begins with a dollar sign (<code>$</code>). This indicates that when Nushell gets the value in this position, it will need to run an evaluation step to process the expression and then use the resulting value. Both evaluation expression forms support a simple form and a &#39;path&#39; form for working with more complex data.</p><h2 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h2><p>The simpler of the two evaluation expressions is the variable. During evaluation, a variable is replaced by its value.</p><p>If we create a variable, we can print its contents by using <code>$</code> to refer to it:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; let my_value = 4
&gt; $my_value
4
</code></pre></div><p>Variables in Nushell are immutable, that means that you cannot change its value after declaration. They can be shadowed in nested block, that results in:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; let my_value = 4
&gt; do { let my_value = 5; $my_value }
5
&gt; $my_value
4
</code></pre></div><h2 id="variable-paths" tabindex="-1"><a class="header-anchor" href="#variable-paths" aria-hidden="true">#</a> Variable paths</h2><p>A variable path works by reaching inside of the contents of a variable, navigating columns inside of it, to reach a final value. Let&#39;s say instead of <code>4</code>, we had assigned a table value:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; let my_value = [[name]; [testuser]]
</code></pre></div><p>We can use a variable path to evaluate the variable <code>$my_value</code> and get the value from the <code>name</code> column in a single step:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; $my_value.name.0
testuser
</code></pre></div><h2 id="subexpressions" tabindex="-1"><a class="header-anchor" href="#subexpressions" aria-hidden="true">#</a> Subexpressions</h2><p>You can always evaluate a subexpression and use its result by wrapping the expression with parentheses <code>()</code>. Note that previous versions of Nushell (prior to 0.32) used <code>$()</code>.</p>`,15),u=e("code",null,"(ls)",-1),p=e("code",null,"ls",-1),g=e("code",null,"(git branch --show-current)",-1),x=e("code",null,"(2 + 3)",-1),b=o(`<p>Subexpressions can also be pipelines and not just single commands. If we wanted to get a list of filenames larger than ten kilobytes, we can use an subexpression to run a pipeline and assign the result to a variable:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; let names_of_big_files = (ls | where size &gt; 10kb)
&gt; $names_of_big_files
───┬────────────┬──────┬──────────┬──────────────
 # │    name    │ type │   size   │   modified
───┼────────────┼──────┼──────────┼──────────────
 0 │ Cargo.lock │ File │ 155.3 KB │ 17 hours ago
 1 │ README.md  │ File │  15.9 KB │ 17 hours ago
───┴────────────┴──────┴──────────┴──────────────
</code></pre></div><h2 id="subexpressions-and-paths" tabindex="-1"><a class="header-anchor" href="#subexpressions-and-paths" aria-hidden="true">#</a> Subexpressions and paths</h2><p>Subexpressions also support paths. For example, let&#39;s say we wanted to get a list of the filenames in the current directory. One way to do this is to use a pipeline:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; ls | get name
</code></pre></div><p>We can do a very similar action in a single step using a subexpression path:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; (ls).name
</code></pre></div><p>It depends on the needs of the code and your particular style which form works best for you.</p><h2 id="short-hand-subexpressions-row-conditions" tabindex="-1"><a class="header-anchor" href="#short-hand-subexpressions-row-conditions" aria-hidden="true">#</a> Short-hand subexpressions (row conditions)</h2>`,9),m=e("code",null,"ls",-1),v=e("div",{class:"language-text","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`> ls | where size > 10kb
`)])],-1),_=e("code",null,"where size > 10kb",-1),f=e("code",null,"where",-1),w=e("code",null,"size > 10kb",-1),y=e("code",null,"size",-1),k=e("code",null,"$it.size",-1),$=e("div",{class:"language-text","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`> ls | where $it.size > 10kb
> ls | where ($it.size > 10kb)
> ls | where {|$x| $x.size > 10kb }
`)])],-1),z=e("p",null,[a("For short-hand syntax to work, the column name must appear on the left-hand side of the operation (like "),e("code",null,"size"),a(" in "),e("code",null,"size > 10kb"),a(").")],-1);function N(T,V){const s=d("RouterLink");return l(),r("div",null,[c,e("p",null,[a("The parentheses contain a pipeline that will run to completion, and the resulting value will then be used. For example, "),u,a(" would run the "),t(s,{to:"/book/commands/ls.html"},{default:n(()=>[p]),_:1}),a(" command and give back the resulting table and "),g,a(" runs the external git command and returns a string with the name of the current branch. You can also use parentheses to run math expressions like "),x,a(".")]),b,e("p",null,[a("Nushell supports accessing columns in a subexpression using a simple short-hand. You may have already used this functionality before. If, for example, we wanted to only see rows from "),t(s,{to:"/book/commands/ls.html"},{default:n(()=>[m]),_:1}),a(" where the entry is at least ten kilobytes we can write:")]),v,e("p",null,[a("The "),_,a(" is a command with two parts: the command name "),t(s,{to:"/book/commands/where.html"},{default:n(()=>[f]),_:1}),a(" and the short-hand expression "),w,a(". We say short-hand because "),y,a(" here is the shortened version of writing "),k,a(". This could also be written in any of the following ways:")]),$,z])}const B=i(h,[["render",N],["__file","variables_and_subexpressions.html.vue"]]);export{B as default};
