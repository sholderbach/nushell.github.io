import{_ as l,z as r,A as c,X as s,T as n,$ as o,C as a,a6 as t,Q as p}from"./framework.3d018c9f.js";const d={},i=t(`<h1 id="处理字符串" tabindex="-1"><a class="header-anchor" href="#处理字符串" aria-hidden="true">#</a> 处理字符串</h1><p>Nushell 中的字符串用于保存文本数据以便后续使用，其中可以包括文件名、文件路径、列名以及更多。字符串是如此地普遍，以至于 Nushell 提供了几种处理它们的方法，你可以从中选择最合适的。</p><h2 id="单引号字符串" tabindex="-1"><a class="header-anchor" href="#单引号字符串" aria-hidden="true">#</a> 单引号字符串</h2><p>Nushell 中最简单的字符串是单引号字符串。这种字符串使用<code>&#39;</code>字符来包裹文本。下面是作为单引号字符串的<code>hello world</code>示例：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;hello world&#39;</span>
hello world
</code></pre></div><p>单引号字符串不会对它们所给予的文本做任何事情，这使得它们成为容纳广泛文本数据的理想选择。</p><h2 id="双引号字符串" tabindex="-1"><a class="header-anchor" href="#双引号字符串" aria-hidden="true">#</a> 双引号字符串</h2><p>对于更复杂的字符串，Nushell 也提供双引号字符串。这些字符串使用<code>&quot;</code>字符来包裹文本。它们还支持使用<code>\\</code>字符在文本中转义。</p><p>例如，我们可以用转义字符和双引号字符串写出文字 hello，然后换行，再写上 world：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&quot;hello<span class="token entity" title="\\n">\\n</span>world&quot;</span>
hello
world
</code></pre></div><p>转义字符让你快速添加一个非此难以输入的字符。</p><p>Nushell 目前支持以下转义字符：</p><ul><li><code>\\&quot;</code> - 双引号</li><li><code>\\&#39;</code> - 单引号</li><li><code>\\\\</code> - 反斜杠</li><li><code>\\/</code> - 斜杠</li><li><code>\\b</code> - 退格字符</li><li><code>\\f</code> - 换页符</li><li><code>\\r</code> - 回车符</li><li><code>\\n</code> - 换行符 (line feed)</li><li><code>\\t</code> - 制表符</li><li><code>\\uXXXX</code> - Unicode 字符 (用 Unicode 字符的编号替换 XXXX)</li></ul><h2 id="字符串插值" tabindex="-1"><a class="header-anchor" href="#字符串插值" aria-hidden="true">#</a> 字符串插值</h2><p>更复杂的字符串用例还需要一种新的字符串形式：字符串插值。这是一种从原始文本和执行表达式的结果中构建文本的方法。字符串插值将这些结果结合在一起，返回一个新的字符串。</p><p>字符串插值使用 <code>$&quot; &quot;</code> 和 <code>$&#39; &#39;</code> 作为包裹插值文本的方式。</p><p>例如，假设我们有一个叫做<code>$name</code>的变量，我们想问候这个变量中所包含的人：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span>
<span class="token operator">&gt;</span> $<span class="token string">&quot;greetings, (<span class="token variable">$name</span>)&quot;</span>
greetings, Alice
</code></pre></div><p>通过使用<code>()</code>包裹表达式，我们可以运行它们并使用结果来帮助生成字符串。</p><p>字符串插值有单引号：<code>$&#39; &#39;</code> 和双引号：<code>$&quot; &quot;</code> 这两种形式，分别对应于单引号和双引号字符串 —— 单引号字符串插值不支持转义字符，而双引号字符串插值支持。</p><p>从 0.61 版开始，字符串插值支持转义小括号，所以<code>(</code>和<code>)</code>字符可以在一个字符串中使用，而 Nushell 不会试图计算它们之间出现的内容：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> $<span class="token string">&quot;2 + 2 is (2 + 2) \\(you guessed it!)&quot;</span>
<span class="token number">2</span> + <span class="token number">2</span> is <span class="token number">4</span> <span class="token punctuation">(</span>you guessed it<span class="token operator">!</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="分割字符串" tabindex="-1"><a class="header-anchor" href="#分割字符串" aria-hidden="true">#</a> 分割字符串</h2>`,23),h=s("code",null,"split row",-1),u=s("code",null,'let colors = ("red,green,blue" | split row ",")',-1),g=s("code",null,"[red green blue]",-1),k=s("code",null,"split column",-1),_=s("code",null,'let colors = ("red,green,blue" | split column ",")',-1),b=s("code",null,"split chars",-1),m=t(`<h2 id="str-命令" tabindex="-1"><a class="header-anchor" href="#str-命令" aria-hidden="true">#</a> <code>str</code> 命令</h2><p>许多字符串函数是<code>str</code>命令的子命令，你可以使用<code>help str</code>来获得一个完整的 <code>str</code> 命令列表。</p><p>例如, 你可以使用<code>str contains</code>来检查一个字符串是否包含某个特定的字符：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&quot;hello world&quot;</span> <span class="token operator">|</span> str contains <span class="token string">&quot;w&quot;</span>
<span class="token boolean">true</span>
</code></pre></div><h3 id="修剪字符串" tabindex="-1"><a class="header-anchor" href="#修剪字符串" aria-hidden="true">#</a> 修剪字符串</h3>`,5),f=s("code",null,"str trim",-1),v=s("code",null,"str trim",-1),x=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;       My   string   &#39;</span> <span class="token operator">|</span> str trim
My   string
</code></pre></div><p>你可以用 <code>--right</code> 和 <code>--left</code> 选项来指定对哪一边进行修剪。</p><p>要修剪一个特定的字符，使用 <code>--char &lt;Character&gt;</code> 来指定要修剪的字符。</p><p>下面是一个传入了所有选项的例子：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;=== Nu shell ===&#39;</span> <span class="token operator">|</span> str trim <span class="token parameter variable">-r</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;=&#39;</span>
<span class="token operator">==</span><span class="token operator">=</span> Nu shell
</code></pre></div><h3 id="子字符串" tabindex="-1"><a class="header-anchor" href="#子字符串" aria-hidden="true">#</a> 子字符串</h3><p>子字符串是一个字符串的切片，它们有起始点和结束点。下面是一个使用子串的例子：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;Hello World!&#39;</span> <span class="token operator">|</span> str index-of <span class="token string">&#39;o&#39;</span>
<span class="token number">4</span>
<span class="token operator">&gt;</span> <span class="token string">&#39;Hello World!&#39;</span> <span class="token operator">|</span> str index-of <span class="token string">&#39;r&#39;</span>
<span class="token number">8</span>
<span class="token operator">&gt;</span> <span class="token string">&#39;Hello World!&#39;</span> <span class="token operator">|</span> str substring <span class="token string">&#39;4,8&#39;</span>
o Wo
</code></pre></div><h3 id="字符串填充" tabindex="-1"><a class="header-anchor" href="#字符串填充" aria-hidden="true">#</a> 字符串填充</h3>`,9),q=s("code",null,"str lpad",-1),w=s("code",null,"str rpad",-1),N=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;1234&#39;</span> <span class="token operator">|</span> str lpad <span class="token parameter variable">-l</span> <span class="token number">10</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;0&#39;</span>
0000001234
<span class="token operator">&gt;</span> <span class="token string">&#39;1234&#39;</span> <span class="token operator">|</span> str rpad <span class="token parameter variable">-l</span> <span class="token number">10</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">|</span> str length
<span class="token number">10</span>
</code></pre></div><h3 id="反转字符串" tabindex="-1"><a class="header-anchor" href="#反转字符串" aria-hidden="true">#</a> 反转字符串</h3>`,2),$=s("code",null,"str reverse",-1),y=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;Nushell&#39;</span> <span class="token operator">|</span> str reverse
llehsuN
<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;Nushell&#39;</span> <span class="token string">&#39;is&#39;</span> <span class="token string">&#39;cool&#39;</span><span class="token punctuation">]</span> <span class="token operator">|</span> str reverse
╭───┬─────────╮
│ <span class="token number">0</span> │ llehsuN │
│ <span class="token number">1</span> │ si      │
│ <span class="token number">2</span> │ looc    │
╰───┴─────────╯
</code></pre></div><h2 id="解析字符串" tabindex="-1"><a class="header-anchor" href="#解析字符串" aria-hidden="true">#</a> 解析字符串</h2>`,2),X=s("code",null,"parse",-1),B=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;Nushell is the best&#39;</span> <span class="token operator">|</span> parse <span class="token string">&#39;{shell} is {type}&#39;</span>
╭───┬─────────┬──────────╮
│ <span class="token comment"># │  shell  │   type   │</span>
├───┼─────────┼──────────┤
│ <span class="token number">0</span> │ Nushell │ the best │
╰───┴─────────┴──────────╯
<span class="token operator">&gt;</span> <span class="token string">&#39;Bash is kinda cringe&#39;</span> <span class="token operator">|</span> parse <span class="token parameter variable">--regex</span> <span class="token string">&#39;(?P&lt;shell&gt;\\w+) is (?P&lt;type&gt;[\\w\\s]+)&#39;</span>
╭───┬───────┬──────────────╮
│ <span class="token comment"># │ shell │     type     │</span>
├───┼───────┼──────────────┤
│ <span class="token number">0</span> │ Bash  │ kinda cringe │
╰───┴───────┴──────────────╯
</code></pre></div><h2 id="字符串转换" tabindex="-1"><a class="header-anchor" href="#字符串转换" aria-hidden="true">#</a> 字符串转换</h2><p>有多种方法可以将字符串转换为其他类型或者反之。</p><h3 id="转换为字符串" tabindex="-1"><a class="header-anchor" href="#转换为字符串" aria-hidden="true">#</a> 转换为字符串</h3>`,4),C=s("code",null,"into string",-1),V=s("code",null,"123 | into string",-1),W=s("li",null,[a("通过字符串插值。例如："),s("code",null,"$'(123)'")],-1),A=s("code",null,"build-string",-1),H=s("code",null,"build-string (123)",-1),T=s("h3",{id:"字符串转换为其他类型",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#字符串转换为其他类型","aria-hidden":"true"},"#"),a(" 字符串转换为其他类型")],-1),L=s("code",null,"into <type>",-1),M=s("code",null,"'123' | into int",-1),P=s("h2",{id:"字符串着色",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#字符串着色","aria-hidden":"true"},"#"),a(" 字符串着色")],-1),R=s("code",null,"ansi",-1),U=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">$&#39;(ansi purple_bold)This text is a bold purple!(ansi reset)&#39;</span>
</code></pre></div><p><code>ansi purple_bold</code> 使文本紫色加粗</p><p><code>ansi reset</code> 将着色重置为默认值。(提示: 你应该总是用 <code>ansi reset</code> 来结束着色的字符串)</p>`,3);function z(E,Q){const e=p("RouterLink");return r(),c("div",null,[i,s("p",null,[n(e,{to:"/book/commands/split_row.html"},{default:o(()=>[h]),_:1}),a("命令从一个基于分隔符的字符串创建一个列表。 例如，"),u,a(" 创建列表"),g,a("。")]),s("p",null,[n(e,{to:"/book/commands/split_column.html"},{default:o(()=>[k]),_:1}),a("命令将从一个基于分隔符的字符串中创建一个表。例如，"),_,a(" 创建一个表格，并为每个元素添加一列。")]),s("p",null,[a("最后, "),n(e,{to:"/book/commands/split_chars.html"},{default:o(()=>[b]),_:1}),a("命令将一个字符串分割成一个字符列表。")]),m,s("p",null,[a("你可以用 "),n(e,{to:"/book/commands/str_trim.html"},{default:o(()=>[f]),_:1}),a(" 命令修剪字符串的两侧。默认情况下，"),n(e,{to:"/book/commands/str_trim.html"},{default:o(()=>[v]),_:1}),a(" 命令会修剪字符串两边的空白。比如：")]),x,s("p",null,[a("使用 "),n(e,{to:"/book/commands/str_lpad.html"},{default:o(()=>[q]),_:1}),a(" 和 "),n(e,{to:"/book/commands/str_rpad.html"},{default:o(()=>[w]),_:1}),a(" 命令，你可以给字符串添加填充。填充会给字符串添加字符，直到它达到一定的长度。比如：")]),N,s("p",null,[a("反转字符串可以通过 "),n(e,{to:"/book/commands/str_reverse.html"},{default:o(()=>[$]),_:1}),a(" 命令轻松完成：")]),y,s("p",null,[a("通过 "),n(e,{to:"/book/commands/parse.html"},{default:o(()=>[X]),_:1}),a(" 命令，你可以将一个字符串解析成若干列。比如：")]),B,s("ol",null,[s("li",null,[a("使用 "),n(e,{to:"/book/commands/into_string.html"},{default:o(()=>[C]),_:1}),a("。例如："),V]),W,s("li",null,[a("使用 "),n(e,{to:"/book/commands/build-string.html"},{default:o(()=>[A]),_:1}),a("。例如："),H])]),T,s("ol",null,[s("li",null,[a("使用 "),n(e,{to:"/book/commands/into.html"},{default:o(()=>[L]),_:1}),a("。例如："),M])]),P,s("p",null,[a("你可以通过 "),n(e,{to:"/book/commands/ansi.html"},{default:o(()=>[R]),_:1}),a(" 命令给字符串着色。例如：")]),U])}const j=l(d,[["render",z],["__file","working_with_strings.html.vue"]]);export{j as default};
