import{_ as e,z as a,A as d,a6 as t}from"./framework.3d018c9f.js";const r={},h=t(`<h1 id="データ型" tabindex="-1"><a class="header-anchor" href="#データ型" aria-hidden="true">#</a> データ型</h1><p>従来、Unix シェルコマンドは文字列テキストを通じて互いに通信してきました。あるコマンドは標準出力(しばしば&#39;stdout&#39;と略されます)を介してテキストを出力し、他方のコマンドは標準入力(または&#39;stdin&#39;)を介してテキストを読み込みます。このようにして、２つのコマンドは通信できます。</p><p>この種の通信は文字列ベースと考えることができます。</p><p>Nu はコマンドに対してこのアプローチを採用しつつ、他の種類のデータを扱えるよう拡張しています。現在、Nu はシンプルなデータと構造化されたデータ、２つの種類をサポートしています。</p><h2 id="シンプルなデータ" tabindex="-1"><a class="header-anchor" href="#シンプルなデータ" aria-hidden="true">#</a> シンプルなデータ</h2><p>多くのプログラミング言語と同様に、Nu はシンプルなデータと構造化されたデータを用いてデータをモデル化します。シンプルなデータ型には、整数、浮動小数点、文字列、真偽値、日付、およびパスが含まれます。ファイルサイズのための特別な型もこれに含まれます。</p><h3 id="整数" tabindex="-1"><a class="header-anchor" href="#整数" aria-hidden="true">#</a> 整数</h3><p>整数(または丸めた数)。例として、１，５，および 100 があります。</p><h3 id="浮動小数点" tabindex="-1"><a class="header-anchor" href="#浮動小数点" aria-hidden="true">#</a> 浮動小数点</h3><p>浮動小数点は小数部を含む数です。例として、1.5、2.0、および 15.333 があります。</p><h3 id="文字列" tabindex="-1"><a class="header-anchor" href="#文字列" aria-hidden="true">#</a> 文字列</h3><p>文字列はテキストを表す基本的な方法です。文字列はダブルクォートを使って表されます。例として、&quot;Fred&quot;, &quot;myname.txt&quot;, and &quot;Lynchburg, VA&quot;があります。</p><p>Nu の文字列はデフォルトで Unicode に対応しているため UTF-8 のテキストを簡単に渡すことができます。</p><h3 id="lines" tabindex="-1"><a class="header-anchor" href="#lines" aria-hidden="true">#</a> Lines</h3><p>Lines は OS に依存した行末をもつ文字列です。使用される場合は、OS 固有の行末が使用されます。</p><h3 id="column-paths" tabindex="-1"><a class="header-anchor" href="#column-paths" aria-hidden="true">#</a> Column paths</h3><p>Column paths はテーブルにおける特定のサブテーブル、列、行、またはセルへのパスです。</p><h3 id="パターン" tabindex="-1"><a class="header-anchor" href="#パターン" aria-hidden="true">#</a> パターン</h3><p>&quot;glob&quot;パターンと呼ばれたりもするパターンはシェルでよく利用されるファイル名のマッチング方法です。<br><code>*</code>は何にでもマッチし、<code>?</code>は一文字にマッチすることを表しています。</p><p>例) <code>ls test*</code>における<code>test*</code>がパターンです。</p><h3 id="真偽値" tabindex="-1"><a class="header-anchor" href="#真偽値" aria-hidden="true">#</a> 真偽値</h3><p>真偽値は真か偽かの状態をとります。しばしば比較の結果を表すために使われます。</p><p>真偽値の２つの値は、<code>$true</code>と<code>$false</code>です。</p><h3 id="日付" tabindex="-1"><a class="header-anchor" href="#日付" aria-hidden="true">#</a> 日付</h3><p>日付と時間は日付型のデータに一緒に保持されます。システムで利用される日付データはタイムゾーンをもち、デフォルトでは UTC タイムゾーンが使用されます。</p><h3 id="duration" tabindex="-1"><a class="header-anchor" href="#duration" aria-hidden="true">#</a> Duration</h3><p>Duration は時間の長さを表します。1 秒、5 週間、1 年はすべて Duration の値です。</p><p>例) <code>1wk</code>は 1 週間を表す Duration です。</p><p>この表は現在サポートされているすべての Duration を示しています。</p><table><thead><tr><th>Duration</th><th>Length</th></tr></thead><tbody><tr><td>1sec</td><td>one second</td></tr><tr><td>1min</td><td>one minute</td></tr><tr><td>1hr</td><td>one hour</td></tr><tr><td>1day</td><td>one day</td></tr><tr><td>1wk</td><td>one week</td></tr></tbody></table><h3 id="ranges" tabindex="-1"><a class="header-anchor" href="#ranges" aria-hidden="true">#</a> Ranges</h3><p>値の範囲を表すこともできます。大抵は、開始と終了の間の数値を表すために利用します。</p><p>例) <code>ls | range 1..4</code></p><h3 id="パス" tabindex="-1"><a class="header-anchor" href="#パス" aria-hidden="true">#</a> パス</h3><p>パスは、特定の OS でファイルパスを表すプラットフォームに依存しない方法です。例として、<code>/usr/bin</code>や<code>C:\\Users\\file.txt</code>があげられます。</p><h3 id="バイト" tabindex="-1"><a class="header-anchor" href="#バイト" aria-hidden="true">#</a> バイト</h3><p>ファイルサイズはバイトと呼ばれる特別な整数型で保持されます。例として、<code>100</code>, <code>15kb</code>、<code>100mb</code>があります。</p><h3 id="バイナリデータ" tabindex="-1"><a class="header-anchor" href="#バイナリデータ" aria-hidden="true">#</a> バイナリデータ</h3><p>バイナリデータは、画像ファイルのデータのように、生のバイトの集まりです。</p><h2 id="構造化データ" tabindex="-1"><a class="header-anchor" href="#構造化データ" aria-hidden="true">#</a> 構造化データ</h2><p>構造化データはシンプルなデータから作られます。例えば、構造化データは、複数の整数を表す方法を提供します。現在サポートされている構造化データは次のとおりです。rows, lists, そして blocks です。</p><h3 id="rows" tabindex="-1"><a class="header-anchor" href="#rows" aria-hidden="true">#</a> Rows</h3><p>row データ型は表の１行のデータで見えるものを表しています。異なる要素のデータをもち、データにはそれぞれ列名が与えられます。</p><h3 id="lists" tabindex="-1"><a class="header-anchor" href="#lists" aria-hidden="true">#</a> Lists</h3><p>Lists は一つ以上の値を保持できます。単純な値だけでなく、rows も保持することができます。rows の lists はしばしばテーブルと呼ばれます。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; echo [sam fred george]
───┬────────
 0 │ sam
 1 │ fred
 2 │ george
───┴────────
</code></pre></div><h3 id="blocks" tabindex="-1"><a class="header-anchor" href="#blocks" aria-hidden="true">#</a> Blocks</h3><p>Blocks は Nu のコードブロックを表します。例えば、<code>each { echo $it }</code>というコマンドでは、<code>{ echo $it }</code>が block になります。 block はデータの行ごとに実行するコードを表すのに便利です。</p>`,48),o=[h];function n(i,s){return a(),d("div",null,o)}const p=e(r,[["render",n],["__file","types_of_data.html.vue"]]);export{p as default};
