import{_ as d,M as u,p as e,q as o,Q as l,t as n,N as c,a1 as s}from"./framework-344bb0e4.js";const r={},a=s(`<h1 id="从-bash-到-nu" tabindex="-1"><a class="header-anchor" href="#从-bash-到-nu" aria-hidden="true">#</a> 从 Bash 到 Nu</h1><p>如果你是来自 Windows 上的<code>Git Bash</code>用户，那么你习惯的外部命令（bash、grep 等）在<code>nu</code>中默认是不可用的（除非你在 Windows 路径环境变量中明确包含了它们）。 要使这些命令在<code>nu</code>中可用，请在你的<code>config.nu</code>中添加以下一行，用<code>append</code>或<code>prepend</code>。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>let-env Path <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$env</span>.Path <span class="token operator">|</span> prepend <span class="token string">&#39;C:\\Program Files\\Git\\usr\\bin&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>注意：本表针对 Nu 0.60.0 或更高版本。</p>`,4),h=l("thead",null,[l("tr",null,[l("th",null,"Bash"),l("th",null,"Nu"),l("th",null,"Task")])],-1),i=l("tr",null,[l("td",null,[l("code",null,"ls")]),l("td",null,[l("code",null,"ls")]),l("td",null,"列出当前目录中的文件")],-1),_=l("tr",null,[l("td",null,[l("code",null,"ls <dir>")]),l("td",null,[l("code",null,"ls <dir>")]),l("td",null,"列出给定目录中的文件")],-1),p=l("tr",null,[l("td",null,[l("code",null,"ls pattern*")]),l("td",null,[l("code",null,"ls pattern*")]),l("td",null,"列出匹配给定模式的文件")],-1),m=l("tr",null,[l("td",null,[l("code",null,"ls -la")]),l("td",null,[l("code",null,"ls --long --all"),n(" or "),l("code",null,"ls -la")]),l("td",null,"列出包含所有可用信息的文件，包括隐藏文件")],-1),f=l("tr",null,[l("td",null,[l("code",null,"ls -d */")]),l("td",null,[l("code",null,"ls | where type == dir")]),l("td",null,"列出目录")],-1),b=l("tr",null,[l("td",null,[l("code",null,"find . -name *.rs")]),l("td",null,[l("code",null,"ls **/*.rs")]),l("td",null,"递归地查找匹配给定模式的所有文件")],-1),g=l("tr",null,[l("td",null,[l("code",null,"find . -name Makefile | xargs vim")]),l("td",null,[l("code",null,"ls \\*\\*/Makefile | get name | vim $in")]),l("td",null,"将值作为命令参数传递")],-1),v=l("tr",null,[l("td",null,[l("code",null,"cd <directory>")]),l("td",null,[l("code",null,"cd <directory>")]),l("td",null,"切换到给定目录")],-1),O=l("tr",null,[l("td",null,[l("code",null,"cd")]),l("td",null,[l("code",null,"cd")]),l("td",null,"切换到用户主目录")],-1),k=l("tr",null,[l("td",null,[l("code",null,"cd -")]),l("td",null,[l("code",null,"cd -")]),l("td",null,"切换到前一个目录")],-1),x=l("tr",null,[l("td",null,[l("code",null,"mkdir <path>")]),l("td",null,[l("code",null,"mkdir <path>")]),l("td",null,"创建给定的路径")],-1),$=l("tr",null,[l("td",null,[l("code",null,"mkdir -p <path>")]),l("td",null,[l("code",null,"mkdir <path>")]),l("td",null,"创建给定的路径，如果父目录不存在则自动创建")],-1),A=l("tr",null,[l("td",null,[l("code",null,"touch test.txt")]),l("td",null,[l("code",null,"touch test.txt")]),l("td",null,"新建文件")],-1),P=l("tr",null,[l("td",null,[l("code",null,"> <path>")]),l("td",null,[l("code",null,"| save --raw <path>")]),l("td",null,"保存字符串到给定文件")],-1),w=l("tr",null,[l("td",null,[l("code",null,">> <path>")]),l("td",null,[l("code",null,"| save --raw --append <path>")]),l("td",null,"追加字符串到给定文件")],-1),F=l("tr",null,[l("td",null,[l("code",null,"cat <path>")]),l("td",null,[l("code",null,"open --raw <path>")]),l("td",null,"显示给定文件的内容")],-1),B=l("tr",null,[l("td"),l("td",null,[l("code",null,"open <path>")]),l("td",null,"将文件作为结构化数据读取")],-1),T=l("tr",null,[l("td",null,[l("code",null,"mv <source> <dest>")]),l("td",null,[l("code",null,"mv <source> <dest>")]),l("td",null,"移动文件到新的位置")],-1),H=l("tr",null,[l("td",null,[l("code",null,"cp <source> <dest>")]),l("td",null,[l("code",null,"cp <source> <dest>")]),l("td",null,"复制文件到新的位置")],-1),N=l("tr",null,[l("td",null,[l("code",null,"cp -r <source> <dest>")]),l("td",null,[l("code",null,"cp -r <source> <dest>")]),l("td",null,"递归地将目录复制到一个新的位置")],-1),y=l("tr",null,[l("td",null,[l("code",null,"rm <path>")]),l("td",null,[l("code",null,"rm <path>")]),l("td",null,"删除给定的文件")],-1),R=l("tr",null,[l("td"),l("td",null,[l("code",null,"rm -t <path>")]),l("td",null,"将给定的文件移到系统垃圾箱")],-1),V=l("tr",null,[l("td",null,[l("code",null,"rm -rf <path>")]),l("td",null,[l("code",null,"rm -r <path>")]),l("td",null,"递归地删除给定的路径")],-1),E=l("td",null,[l("code",null,"date -d <date>")],-1),M=l("td",null,[l("code",null,'"<date>" | into datetime -f <format>')],-1),W={href:"https://docs.rs/chrono/0.4.15/chrono/format/strftime/index.html",target:"_blank",rel:"noopener noreferrer"},C=l("tr",null,[l("td",null,[l("code",null,"sed")]),l("td",null,[l("code",null,"str replace")]),l("td",null,"查找和替换一个字符串中的模式")],-1),G=l("tr",null,[l("td",null,[l("code",null,"grep <pattern>")]),l("td",null,[l("code",null,"where $it =~ <substring>"),n(" or "),l("code",null,"find <substring>")]),l("td",null,"过滤包含特定字符串的字符串")],-1),I=l("tr",null,[l("td",null,[l("code",null,"man <command>")]),l("td",null,[l("code",null,"help <command>")]),l("td",null,"获得特定命令的帮助信息")],-1),L=l("tr",null,[l("td"),l("td",null,[l("code",null,"help commands")]),l("td",null,"列出所有可用的命令")],-1),S=l("tr",null,[l("td"),l("td",null,[l("code",null,"help --find <string>")]),l("td",null,"在所有可用的命令中搜索")],-1),q=l("tr",null,[l("td",null,[l("code",null,"command1 && command2")]),l("td",null,[l("code",null,"command1; command2")]),l("td",null,"运行一条命令，如果成功的话，再运行第二条")],-1),D=l("tr",null,[l("td",null,[l("code",null,"stat $(which git)")]),l("td",null,[l("code",null,"stat (which git).path")]),l("td",null,"使用命令输出作为其他命令的参数")],-1),Q=l("tr",null,[l("td",null,[l("code",null,"echo $PATH")]),l("td",null,[l("code",null,"echo $env.PATH")]),l("td",null,"查看当前路径")],-1),j=l("tr",null,[l("td",null,[l("code",null,"<update ~/.bashrc>")]),l("td",null,[l("code",null,"vim $nu.config-path")]),l("td",null,"永久地更新 PATH")],-1),z=l("tr",null,[l("td",null,[l("code",null,"export PATH = $PATH:/usr/other/bin")]),l("td",null,[l("code",null,"let-env PATH = ($env.PATH | append /usr/other/bin)")]),l("td",null,"临时更新 PATH")],-1),J=l("tr",null,[l("td",null,[l("code",null,"export")]),l("td",null,[l("code",null,"echo $env")]),l("td",null,"列出当前的环境变量")],-1),K=l("tr",null,[l("td",null,[l("code",null,"<update ~/.bashrc>")]),l("td",null,[l("code",null,"vim $nu.config-path")]),l("td",null,"永久地更新环境变量")],-1),U=l("tr",null,[l("td",null,[l("code",null,"FOO=BAR ./bin")]),l("td",null,[l("code",null,"FOO=BAR ./bin")]),l("td",null,"临时修改环境变量")],-1),X=l("tr",null,[l("td",null,[l("code",null,"export FOO=BAR")]),l("td",null,[l("code",null,"let-env FOO = BAR")]),l("td",null,"为当前会话设置环境变量")],-1),Y=l("tr",null,[l("td",null,[l("code",null,"echo $FOO")]),l("td",null,[l("code",null,"echo $env.FOO")]),l("td",null,"使用环境变量")],-1),Z=l("tr",null,[l("td",null,[l("code",null,"unset FOO")]),l("td",null,[l("code",null,"hide FOO")]),l("td",null,"取消对当前会话的环境变量设置")],-1),ll=l("tr",null,[l("td",null,[l("code",null,'alias s="git status -sb"')]),l("td",null,[l("code",null,"alias s = git status -sb")]),l("td",null,"临时定义一个别名")],-1),nl=l("tr",null,[l("td",null,[l("code",null,"type FOO")]),l("td",null,[l("code",null,"which FOO")]),l("td",null,"显示一个命令的信息（内置、别名或可执行）")],-1),tl=l("tr",null,[l("td",null,[l("code",null,"<update ~/.bashrc>")]),l("td",null,[l("code",null,"vim $nu.config-path")]),l("td",null,"永久添加和编辑别名（新开Shell会话生效）")],-1),dl=l("tr",null,[l("td",null,[l("code",null,"bash -c <commands>")]),l("td",null,[l("code",null,"nu -c <commands>")]),l("td",null,"运行一组命令（需要0.9.1或更高版本）")],-1),ul=l("tr",null,[l("td",null,[l("code",null,"bash <script file>")]),l("td",null,[l("code",null,"nu <script file>")]),l("td",null,"运行一个脚本文件（需要0.9.1或更高版本）")],-1),el=l("tr",null,[l("td",null,[l("code",null,"\\")]),l("td",null,[l("code",null,"( <command> )")]),l("td",null,[n("当命令被 "),l("code",null,"("),n(" 和 "),l("code",null,")"),n(" 包裹的时候可以跨多行")])],-1),ol=l("tr",null,[l("td",null,[l("code",null,"pwd")]),l("td",null,[l("code",null,"$env.PWD")]),l("td",null,"显示当前目录")],-1);function cl(sl,rl){const t=u("ExternalLinkIcon");return e(),o("div",null,[a,l("table",null,[h,l("tbody",null,[i,_,p,m,f,b,g,v,O,k,x,$,A,P,w,F,B,T,H,N,y,R,V,l("tr",null,[E,M,l("td",null,[n("解析日期 ("),l("a",W,[n("日期格式文档"),c(t)]),n(")")])]),C,G,I,L,S,q,D,Q,j,z,J,K,U,X,Y,Z,ll,nl,tl,dl,ul,el,ol])])])}const hl=d(r,[["render",cl],["__file","coming_from_bash.html.vue"]]);export{hl as default};
