import{_ as t,z as d,A as c,X as n,C as e,T as r,$ as s,a6 as a,Q as p}from"./framework.3d018c9f.js";const i={},l=a(`<h1 id="パイプライン" tabindex="-1"><a class="header-anchor" href="#パイプライン" aria-hidden="true">#</a> パイプライン</h1><p>Nu のコアデザインのひとつがパイプラインです。パイプラインは Unix の背後にある哲学にまでそのルーツを遡ることができるデザインアイデアです。Nu は、Unix の文字列データを拡張したように、パイプラインの概念も拡張してテキスト以外のものも扱えるようにします。</p><h2 id="基礎" tabindex="-1"><a class="header-anchor" href="#基礎" aria-hidden="true">#</a> 基礎</h2><p>パイプラインは、入力、フィルター、出力の３つの部分から構成されます。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; open &quot;Cargo.toml&quot; | inc package.version | save &quot;Cargo_new.toml&quot;
</code></pre></div><p>最初のコマンド<code>open &quot;Cargo.toml&quot;</code>が入力です(しばしば&quot;source&quot;や&quot;producer&quot;と呼ばれます)。これによりデータが作成またはロードされパイプラインに送られます。パイプラインは入力から渡された値を扱います。<code>ls</code>のようなコマンドも入力です。ファイルシステムからデータを取得し、パイプラインを経由して扱えるようにするからです。</p><p>２番目のコマンド<code>inc package.version</code>はフィルターです。フィルターは与えられたデータをうけとると大抵の場合はなにかします。それは変更(<code>inc</code>コマンドの例のように)であったり、ロギングなどの別の操作かもしれません。</p><p>最後のコマンド<code>save &quot;Cargo_new.toml&quot;</code>が出力です(&quot;sink&quot;と呼ばれることもあります)。出力はパイプラインから入力を受け取り、最終的な操作を実行します。この例では、最終ステップとして、パイプラインを介しておくられてきたものをファイルに保存しています。他の出力コマンドとしては、値をうけとりユーザのために表示するものがあります。</p><h2 id="外部コマンドの使用" tabindex="-1"><a class="header-anchor" href="#外部コマンドの使用" aria-hidden="true">#</a> 外部コマンドの使用</h2>`,9),u=a(`<p><code>internal_command | external_command</code></p><p>データは内部コマンドから外部コマンドにむかって流れます。このデータは文字列であることが期待されるので、外部コマンドの<code>stdin</code>に送られます。</p><p><code>external_command | internal_command</code></p><p>外部コマンドから Nu に送られるデータは単一の文字列にまとめられ、内部コマンドに渡されます。<code>lines</code>のようなコマンドは外部からのデータを取り込む際に便利です。</p><p><code>external_command_1 | external_command_2</code></p><p>Nu は Bash のような他のシェルと同じように２つの外部コマンドでパイプされるデータを処理します。外部コマンド１の<code>stdout</code>は外部コマンド２の<code>stdin</code>につながれます。これにより２つのコマンドの間でデータは自然にやりとりされます。</p><h2 id="内部の仕組み" tabindex="-1"><a class="header-anchor" href="#内部の仕組み" aria-hidden="true">#</a> 内部の仕組み</h2><p><code>ls</code>が出力ではなく入力の場合、テーブルがどのように表示されるのか疑問に思われるかもしれません。Nu は<code>autoview</code>とよばれるコマンドを自動的に出力に加えます。<code>autoview</code>コマンドは結果を確認できる出力をもたないパイプラインに追加されるのです。</p><p>実質的にこのコマンドと</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; ls
</code></pre></div><p>このパイプラインは</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; ls | autoview
</code></pre></div><p>同じものです。</p>`,13);function h(_,x){const o=p("RouterLink");return d(),c("div",null,[l,n("p",null,[e("Nu のコマンドは互いに Nu のデータ型("),r(o,{to:"/ja/book/types_of_data.html"},{default:s(()=>[e("types of data")]),_:1}),e("を参照してください)を利用してやりとりします。しかし、Nu 以外のコマンドはどうでしょうか。外部コマンドの使用例をみてみましょう。")]),u])}const g=t(i,[["render",h],["__file","pipeline.html.vue"]]);export{g as default};
