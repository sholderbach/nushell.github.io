import{_ as o,p as r,q as i,Q as t,t as a,v as s,a1 as n}from"./framework-344bb0e4.js";const h={},d={id:"frontmatter-title-for-default",tabindex:"-1"},l=t("a",{class:"header-anchor",href:"#frontmatter-title-for-default","aria-hidden":"true"},"#",-1),c={class:"command-title"},p=n('<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; path </code></p><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>You must use one of the following subcommands. Using this command as-is will only produce this help message.</p><p>There are three ways to represent a path:</p><ul><li>As a path literal, e.g., &#39;/home/viking/spam.txt&#39;</li><li>As a structured path: a table with &#39;parent&#39;, &#39;stem&#39;, and &#39;extension&#39; (and</li><li>&#39;prefix&#39; on Windows) columns. This format is produced by the &#39;path parse&#39; subcommand.</li><li>As a list of path parts, e.g., &#39;[ / home viking spam.txt ]&#39;. Splitting into parts is done by the <code>path split</code> command.</li></ul><p>All subcommands accept all three variants as an input. Furthermore, the &#39;path join&#39; subcommand can be used to join the structured path or path parts back into the path literal.</p>',7);function u(e,m){return r(),i("div",null,[t("h1",d,[l,a(),t("code",null,s(e.$frontmatter.title),1),a(" for default")]),t("div",c,s(e.$frontmatter.default),1),p])}const _=o(h,[["render",u],["__file","path.html.vue"]]);export{_ as default};
