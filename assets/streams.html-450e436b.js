import{_ as o,M as t,p as r,q as p,Q as s,t as a,N as c,U as d,a1 as e}from"./framework-344bb0e4.js";const l={},u=e(`<h1 id="streams" tabindex="-1"><a class="header-anchor" href="#streams" aria-hidden="true">#</a> Streams</h1><p>Streams assíncronas formam a base de como a informação trafega de um lado do pipeline para o outro. Isso permite que o Nu trabalhe com comandos internos, comandos externos e plugins de uma forma relativamente contínua.</p><p>Existem dois tipos fundamentais de streams no Nu: InputStream e OutputStream</p><h2 id="inputstream" tabindex="-1"><a class="header-anchor" href="#inputstream" aria-hidden="true">#</a> InputStream</h2><p>Vamos ver o tipo InputStream mais próximo:</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token class-name">BoxStream</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;static</span><span class="token punctuation">,</span> <span class="token class-name">Tagged</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token operator">&gt;&gt;</span>
</code></pre></div>`,6),i=s("code",null,"Tagged<Value>",-1),m=e(`<h2 id="outputstream" tabindex="-1"><a class="header-anchor" href="#outputstream" aria-hidden="true">#</a> OutputStream</h2><p>Similar ao InputStream a cima, um OutputStream vai retornar valores de um comando:</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token class-name">BoxStream</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;static</span><span class="token punctuation">,</span> <span class="token class-name">ReturnValue</span><span class="token operator">&gt;</span>
</code></pre></div><p>Onde um ReturnValue é:</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">type</span> <span class="token type-definition class-name">ReturnValue</span> <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">ReturnSuccess</span><span class="token punctuation">,</span> <span class="token class-name">ShellError</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre></div><p>E um ReturnSuccess é:</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">ReturnSuccess</span> <span class="token punctuation">{</span>
    <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token class-name">Tagged</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Action</span><span class="token punctuation">(</span><span class="token class-name">CommandAction</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Por que o OutputStream é diferente do InputStream? Isso ocorre devido as diferentes necessidades de cada ponta (entrada e saída) da stream. No momento em que os dados estiverem disponíveis no comando, já foi realizada a verificação de possíveis erros, então é esperado que seja uma stream pura de dados.</p><p>Por outro lado, OutputStreams devem ser capazes de retornar dois outros tipos de dado além dos valores: erros e ações.</p><h3 id="errors" tabindex="-1"><a class="header-anchor" href="#errors" aria-hidden="true">#</a> Errors</h3><p>Erros que forem passados para a stream vão ser detectados como valores que são copiados de uma stream para a outra. Assim que o erro for detectado, a stream vai ser parada e o erro informado.</p><h3 id="actions" tabindex="-1"><a class="header-anchor" href="#actions" aria-hidden="true">#</a> Actions</h3><p>Uma ação se difere de um valor, pois enquanto um valor é um pedaço de dado que será visto pelo próximo comando no pipeline, uma ação é algo destinado apenas para o ambiente de execução interno do Nu. Ações mudam o estado do shell, por exemplo, ao mudar o diretório corrente, mudando o shell atual, atualizando tabelas, e assim por diante.</p>`,13);function k(h,g){const n=t("RouterLink");return r(),p("div",null,[u,s("p",null,[a("É uma stream assíncrona que vai enviar um "),i,a(" no comando. Para mais informações sobre tagging, veja no capítulo de "),c(n,{to:"/pt-BR/contributor-book/metadados.html"},{default:d(()=>[a("metadados")]),_:1}),a(".")]),m])}const v=o(l,[["render",k],["__file","streams.html.vue"]]);export{v as default};
