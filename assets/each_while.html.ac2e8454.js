import{_ as t,z as p,A as o,X as a,C as n,D as e,a6 as c}from"./framework.3d018c9f.js";const r={},l={id:"frontmatter-title-for-filters",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title-for-filters","aria-hidden":"true"},"#",-1),u={class:"command-title"},d=c(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; each while (closure) --numbered</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>closure</code>: the closure to run</li><li><code>--numbered</code>: iterate with an index (deprecated; use a two-parameter closure instead)</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Produces a list of each element before the 3, doubled</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|</span> each <span class="token keyword">while</span> <span class="token punctuation">{</span><span class="token operator">|</span>e<span class="token operator">|</span> <span class="token keyword">if</span> <span class="token variable">$e</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span> <span class="token variable">$e</span> * <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre></div><p>Output elements until reaching &#39;stop&#39;</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> stop <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|</span> each <span class="token keyword">while</span> <span class="token punctuation">{</span><span class="token operator">|</span>e<span class="token operator">|</span> <span class="token keyword">if</span> <span class="token variable">$e</span> <span class="token operator">!=</span> <span class="token string">&#39;stop&#39;</span> <span class="token punctuation">{</span> $<span class="token string">&quot;Output: (<span class="token variable">$e</span>)&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre></div><p>Iterate over each element, printing the matching value and its index</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> each <span class="token keyword">while</span> <span class="token punctuation">{</span><span class="token operator">|</span>el ind<span class="token operator">|</span> <span class="token keyword">if</span> <span class="token variable">$el</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span> $<span class="token string">&quot;value (<span class="token variable">$el</span>) at (<span class="token variable">$ind</span>)!&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre></div>`,11);function k(s,h){return p(),o("div",null,[a("h1",l,[i,n(),a("code",null,e(s.$frontmatter.title),1),n(" for filters")]),a("div",u,e(s.$frontmatter.filters),1),d])}const b=t(r,[["render",k],["__file","each_while.html.vue"]]);export{b as default};
