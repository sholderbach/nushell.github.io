import{_ as s,M as d,p as n,q as t,Q as r,t as o,N as c,U as i,a1 as a}from"./framework-344bb0e4.js";const p={},m=a(`<h1 id="o-pipeline" tabindex="-1"><a class="header-anchor" href="#o-pipeline" aria-hidden="true">#</a> O pipeline</h1><p>Um dos principais designs do Nu é o pipeline, uma ideia de design que tem suas raízes décadas atrás, na filosofia original por trás do Unix. Assim como Nu se extende a partir do tipo de dado string do Unix, também extende a ideia do pipeline para incluir mais do que apenas texto.</p><h2 id="basico" tabindex="-1"><a class="header-anchor" href="#basico" aria-hidden="true">#</a> Básico</h2><p>Um pipeline é construído com três partes: a entrada, o filtro e a saída.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">open</span> <span class="token string">&quot;Cargo.toml&quot;</span> <span class="token operator">|</span> inc package.version <span class="token operator">|</span> save <span class="token string">&quot;Cargo_new.toml&quot;</span>
</code></pre></div><p>O primeiro comando, <code>open &quot;Cargo.toml&quot;</code>, é uma entrada (às vezes também chamado de &quot;fonte&quot; ou &quot;produtor&quot;). Ele cria ou carrega dados com os quais alimenta o pipeline. É a partir da entrada que os pipelines conseguem dados para trabalhar. Comandos como <code>ls</code> também são entradas, já que pegam dados do sistema de arquivos e os enviam através dos pipelines para que possam ser usados adiante.</p><p>O segundo comando, <code>inc package.version</code>, é um filtro. Filtros recebem dados e normalmente fazem alguma coisa com eles. Podem mudá-los (como o comando <code>inc</code> no nosso exemplo), ou podem executar outra operação, como registro de log, conforme os valores passam.</p><p>O último comando, <code>save &quot;Cargo_new.toml&quot;</code>, é uma saída (às vezes chamado de &quot;pia&quot; ou &quot;ralo&quot;). Uma saída recebe dados do pipeline e executa alguma operação final sobre eles. No nosso exemplo, salvamos o que chega pelo pipeline em um arquivo como passo final. Outros tipos de comandos de saída podem exibir os dados para o usuário.</p><h2 id="trabalhando-com-comandos-externos" tabindex="-1"><a class="header-anchor" href="#trabalhando-com-comandos-externos" aria-hidden="true">#</a> Trabalhando com comandos externos</h2>`,9),u=a(`<p><code>comando_interno | comando_externo</code></p><p>Dados fluem do comando_interno para o comando_externo. Espera-se que esses dados sejam strings, para que possam ser enviados para a entrada padrão (<code>stdin</code>) do comando_externo.</p><p><code>comando_externo | comando_interno</code></p><p>Dados vindo de um comando externo para o Nu são agrupados em uma string única e, então, passados para o comando_interno. Comandos como <code>lines</code> ajudam a trazer dados de comandos externos de modo a facilitar sua utilização.</p><p><code>comando_externo_1 | comando_externo_2</code></p><p>Nu trabalha com dados canalizados entre dois comandos externos da mesma maneira que em outros shells, como Bash. A saída padrão (<code>stdout</code>) do comando_externo_1 é conectada à entrada padrão (<code>stdin</code>) do comando_externo_2, permitindo que os dados fluam naturalmente entre os dois comandos.</p><h2 id="nos-bastidores" tabindex="-1"><a class="header-anchor" href="#nos-bastidores" aria-hidden="true">#</a> Nos bastidores</h2><p>Você pode ter se perguntado como vemos uma tabela se o <code>ls</code> é uma entrada e não uma saída. Nu adiciona automaticamente por nós uma saída usando outro comando chamado <code>autoview</code>, que é adicionado a qualquer pipeline que não tenha uma saída que nos permita ver o resultado.</p><p>Com efeito, o comando:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span>
</code></pre></div><p>E o pipeline:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> <span class="token operator">|</span> autoview
</code></pre></div><p>São a mesma coisa.</p>`,13);function l(h,g){const e=d("RouterLink");return n(),t("div",null,[m,r("p",null,[o("Os comandos do Nu se comunicam entre si usando tipos de dados fornecidos pelo próprio Nu (veja "),c(e,{to:"/pt-BR/book/tipos_de_dados.html"},{default:i(()=>[o("tipos de dados")]),_:1}),o("), mas e os comandos de fora do Nu? Vejamos alguns exemplos de como trabalhar com comandos externos:")]),u])}const x=s(p,[["render",l],["__file","pipeline.html.vue"]]);export{x as default};
