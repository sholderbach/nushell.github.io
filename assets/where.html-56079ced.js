import{_ as t,p as o,q as p,Q as a,t as n,v as e,a1 as r}from"./framework-344bb0e4.js";const c={},l={id:"frontmatter-title-for-filters",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title-for-filters","aria-hidden":"true"},"#",-1),d={class:"command-title"},u=r(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; where (row_condition)</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>row_condition</code>: Filter condition</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>This command works similar to &#39;filter&#39; but allows extra shorthands for working with tables, known as &quot;row conditions&quot;. On the other hand, reading the condition from a variable is not supported.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Filter rows of a table according to a condition</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>a: <span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>a: <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">|</span> where a <span class="token operator">&gt;</span> <span class="token number">1</span>
</code></pre></div><p>Filter items of a list according to a condition</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|</span> where <span class="token punctuation">{</span><span class="token operator">|</span>x<span class="token operator">|</span> <span class="token variable">$x</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">}</span>
</code></pre></div><p>List all files in the current directory with sizes greater than 2kb</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> <span class="token operator">|</span> where size <span class="token operator">&gt;</span> 2kb
</code></pre></div><p>List only the files in the current directory</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> <span class="token operator">|</span> where <span class="token builtin class-name">type</span> <span class="token operator">==</span> <span class="token function">file</span>
</code></pre></div><p>List all files with names that contain &quot;Car&quot;</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> <span class="token operator">|</span> where name <span class="token operator">=~</span> <span class="token string">&quot;Car&quot;</span>
</code></pre></div><p>List all files that were modified in the last two weeks</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> <span class="token operator">|</span> where modified <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>date now<span class="token punctuation">)</span> - 2wk
</code></pre></div><p>Find files whose filenames don&#39;t begin with the correct sequential number</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> <span class="token operator">|</span> where <span class="token builtin class-name">type</span> <span class="token operator">==</span> <span class="token function">file</span> <span class="token operator">|</span> sort-by name <span class="token parameter variable">-n</span> <span class="token operator">|</span> enumerate <span class="token operator">|</span> where <span class="token punctuation">{</span><span class="token operator">|</span>e<span class="token operator">|</span> <span class="token variable">$e</span>.item.name <span class="token operator">!</span>~ <span class="token string">$&#39;^($e.index + 1)&#39;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> each <span class="token punctuation">{</span> get item <span class="token punctuation">}</span>
</code></pre></div>`,21);function h(s,k){return o(),p("div",null,[a("h1",l,[i,n(),a("code",null,e(s.$frontmatter.title),1),n(" for filters")]),a("div",d,e(s.$frontmatter.filters),1),u])}const f=t(c,[["render",h],["__file","where.html.vue"]]);export{f as default};
