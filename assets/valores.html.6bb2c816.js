import{_ as o,z as t,A as p,X as s,C as a,T as c,$ as l,a6 as n,Q as i}from"./framework.3d018c9f.js";const u={},r=n(`<h1 id="valores" tabindex="-1"><a class="header-anchor" href="#valores" aria-hidden="true">#</a> Valores</h1><p>Um Valor é a estrutura básica de dados no Nu.</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Value</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> value<span class="token punctuation">:</span> <span class="token class-name">UntaggedValue</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> tag<span class="token punctuation">:</span> <span class="token class-name">Tag</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div>`,3),d=s("code",null,"value",-1),m=s("code",null,"UntaggedValue",-1),k=s("code",null,"tag",-1),g=n(`<p>Um <code>UntaggedValue</code> representa um dos seguintes tipos de valor:</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">UntaggedValue</span> <span class="token punctuation">{</span>
    <span class="token class-name">Primitive</span><span class="token punctuation">(</span><span class="token class-name">Primitive</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Row</span><span class="token punctuation">(</span><span class="token class-name">Dictionary</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token class-name">ShellError</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token class-name">Block</span><span class="token punctuation">(</span><span class="token class-name">Evaluate</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Onde <code>Primitive</code> é:</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Primitive</span> <span class="token punctuation">{</span>
    <span class="token class-name">Nothing</span><span class="token punctuation">,</span>
    <span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token class-name">BigInt</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Decimal</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Bytes</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Line</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">ColumnPath</span><span class="token punctuation">(</span><span class="token class-name">ColumnPath</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Pattern</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">DateTime</span><span class="token operator">&lt;</span><span class="token class-name">Utc</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Duration</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Range</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Range</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token class-name">PathBuf</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Binary</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token comment">// Stream markers (used as bookend markers rather than actual values)</span>
    <span class="token class-name">BeginningOfStream</span><span class="token punctuation">,</span>
    <span class="token class-name">EndOfStream</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Vamos ver em ordem reversa para ver como Primitives é construido até um Value completo:</p><h2 id="primitive" tabindex="-1"><a class="header-anchor" href="#primitive" aria-hidden="true">#</a> Primitive</h2><p>Um tipo de dado <code>Primitive</code> é um tipo fundamental no Nu. Apesar disso ter similaridades com tipos de dados de linguagens de programação, existem algumas diferenças devido as capacidades de shell do Nu.</p><p>Nu vêm com dois &quot;grandes&quot; tipos de números: <code>BigInt</code> para inteiros e <code>BigDecimal</code> para números decimais. Isso permite que o Nu realize futuramente operações matemáticas e mantenha precisão por mais tempo.</p><p>Outros tipos de dados que talvez sejam um pouco diferentes do normal:</p><ul><li><code>Nothing</code> = Um valor vazio</li><li><code>Bytes(u64)</code> = tamanho do arquivo em número de bytes</li><li><code>Line(String)</code> = Um valor do tipo string com um carriage return (ou cr/lf) no final</li><li><code>ColumnPath(ColumnPath)</code> = Um caminho para percorrer até chegar a um valor em uma tabela</li><li><code>Pattern(string)</code> = um padrão glob (como <code>nu*</code> em <code>ls nu*</code>)</li><li><code>Duration(u64)</code> = Uma contagem no valor de segundos (como <code>1hr</code> em <code>ls | where modified &lt; 1hr</code> )</li><li><code>Range(Box&lt;Range&gt;)</code> = Um intervalo de valores (como <code>0..2</code> em <code>ls | range 0..2</code>)</li><li><code>Path(PathBuf)</code> = um caminho de arquivo</li><li><code>Binary(Vec&lt;u8&gt;)</code> = um array de bytes</li><li><code>BeginningOfStream</code> = um marcador para indicar o início de uma stream</li><li><code>EndOfStream</code> = um marcador para indicar o fim de uma stream</li></ul><h2 id="untaggedvalue" tabindex="-1"><a class="header-anchor" href="#untaggedvalue" aria-hidden="true">#</a> UntaggedValue</h2><p>Além dos tipos primitivos, Nu sporta agregação de tipos de dados. Coletivamente, esses valores agregados são chamados de <code>UntaggedValue</code>s.</p><p>Atualmente, Nu suporta 5 tipos de <code>UntaggedValue</code>: <code>Row</code>, <code>Table</code>, <code>Block</code>, <code>Primitive</code>, e <code>Error</code>.</p><h3 id="tables-e-rows" tabindex="-1"><a class="header-anchor" href="#tables-e-rows" aria-hidden="true">#</a> Tables e Rows</h3><p>Nu usa um conjunto de termos que são mais próximos de planilhas. Ao invés de ter listas de objetos, Nu tem uma tabela, que contém linhas. Cada linha contém o nome das colunas e os seus respectivos valores.</p><h3 id="blocks" tabindex="-1"><a class="header-anchor" href="#blocks" aria-hidden="true">#</a> Blocks</h3><p>Blocks representam código que está pronto para ser executado pelo avaliador. Um exemplo disso é a condição na expressão <code>where {$it &gt; 10}</code>.</p><h3 id="errors" tabindex="-1"><a class="header-anchor" href="#errors" aria-hidden="true">#</a> Errors</h3><p>Representa erros que podem ocorrer quando o pipeline é executado.</p>`,19);function h(v,f){const e=i("RouterLink");return t(),p("div",null,[r,s("p",null,[a("Onde o campo "),d,a(" é qualquer tipo de valor "),m,a(" e o campo "),k,a(" armazena um "),c(e,{to:"/pt-BR/contributor-book/metadados.html"},{default:l(()=>[a("metadado")]),_:1}),a(" associado com o valor.")]),g])}const _=o(u,[["render",h],["__file","valores.html.vue"]]);export{_ as default};
