import{_ as n,o as t,c,a,t as s,d as r,e as o}from"./app.8034769a.js";const p={},i={id:"frontmatter-title",tabindex:"-1"},l=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),d=r(),u={style:{"white-space":"pre-wrap"}},h=o(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; char (character) ...rest --list --unicode --integer</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>character</code>: the name of the character to output</li><li><code>...rest</code>: multiple Unicode bytes</li><li><code>--list</code>: List all supported character names</li><li><code>--unicode</code>: Unicode string i.e. 1f378</li><li><code>--integer</code>: Create a codepoint from an integer</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Output newline</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> char newline
</code></pre></div><p>Output prompt character, newline and a hamburger character</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">echo</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>char prompt<span class="token punctuation">)</span> <span class="token punctuation">(</span>char newline<span class="token punctuation">)</span> <span class="token punctuation">(</span>char hamburger<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">|</span> str collect
</code></pre></div><p>Output Unicode character</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> char <span class="token parameter variable">-u</span> 1f378
</code></pre></div><p>Create Unicode from integer codepoint values</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> char <span class="token parameter variable">-i</span> <span class="token punctuation">(</span>0x60 + <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>0x60 + <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div><p>Output multi-byte Unicode character</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> char <span class="token parameter variable">-u</span> 1F468 200D 1F466 200D 1F466
</code></pre></div>`,15);function g(e,m){return t(),c("div",null,[a("h1",i,[l,d,a("code",null,s(e.$frontmatter.title),1)]),a("div",u,s(e.$frontmatter.usage),1),h])}const b=n(p,[["render",g],["__file","char.html.vue"]]);export{b as default};
