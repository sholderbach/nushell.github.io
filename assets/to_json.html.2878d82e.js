import{_ as n,z as o,A as r,X as a,C as t,D as s,a6 as p}from"./framework.3d018c9f.js";const i={},c={id:"frontmatter-title-for-formats",tabindex:"-1"},l=a("a",{class:"header-anchor",href:"#frontmatter-title-for-formats","aria-hidden":"true"},"#",-1),d={class:"command-title"},h=p(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; to json --raw --indent --tabs</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>--raw</code>: remove all of the whitespace</li><li><code>--indent {number}</code>: specify indentation width</li><li><code>--tabs {number}</code>: specify indentation tab quantity</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Outputs a JSON string, with default indentation, representing the contents of this table</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span>a b c<span class="token punctuation">]</span> <span class="token operator">|</span> to json
</code></pre></div><p>Outputs a JSON string, with 4-space indentation, representing the contents of this table</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span>Joe Bob Sam<span class="token punctuation">]</span> <span class="token operator">|</span> to json <span class="token parameter variable">-i</span> <span class="token number">4</span>
</code></pre></div><p>Outputs an unformatted JSON string representing the contents of this table</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> to json <span class="token parameter variable">-r</span>
</code></pre></div>`,11);function u(e,m){return o(),r("div",null,[a("h1",c,[l,t(),a("code",null,s(e.$frontmatter.title),1),t(" for formats")]),a("div",d,s(e.$frontmatter.formats),1),h])}const b=n(i,[["render",u],["__file","to_json.html.vue"]]);export{b as default};
