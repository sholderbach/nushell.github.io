import{_ as n,z as t,A as i,X as s,C as e,T as r,$ as l,a6 as d,Q as c}from"./framework.3d018c9f.js";const o={},u=d(`<h1 id="aliase" tabindex="-1"><a class="header-anchor" href="#aliase" aria-hidden="true">#</a> Aliase</h1><p>Aliase in Nushell bieten eine einfache Möglichkeit, um Texte zur ersetzen. Damit ist es möglich, einen Kurznamen für längere Befehle zu definieren - inklusive der Argumente.</p><p>Beispielsweise kann ein Alias namens <code>ll</code> definiert werden, der den längeren Befehl <code>ls -l</code> ersetzt:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; alias ll = ls -l
</code></pre></div><p>Nun kann der Alias aufgerufen werden:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; ll
</code></pre></div><p>Wenn das getan wird, wirkt es, als sei <code>ls -l</code> aufgerufen worden. Das bietet auch die Möglichkeit weitere Parameter anzugeben. So kann auch geschrieben werden:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; ll -a
</code></pre></div><p>Das ist äquivalent zu <code>ls -l -a</code>. Deutlich kürzer.</p><h2 id="persistenz" tabindex="-1"><a class="header-anchor" href="#persistenz" aria-hidden="true">#</a> Persistenz</h2>`,10);function h(g,p){const a=c("RouterLink");return t(),i("div",null,[u,s("p",null,[e("Für Informationen, um Aliase dauerhaft zu speichern, damit diese immer in Nushell nutzbar sind, kann ein Blick auf das "),r(a,{to:"/de/book/konfiguration.html"},{default:l(()=>[e("Konfigurationskapitel")]),_:1}),e(" geworfen werden.")])])}const m=n(o,[["render",h],["__file","aliase.html.vue"]]);export{m as default};
