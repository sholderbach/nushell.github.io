(window.webpackJsonp=window.webpackJsonp||[]).push([[911],{1427:function(t,s,e){"use strict";e.r(s);var n=e(35),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"外部命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#外部命令"}},[t._v("#")]),t._v(" 外部命令")]),t._v(" "),e("p",[t._v("调用外部命令是将 Nushell 作为一个 Shell 使用的基本部分（通常也将 Nushell 作为一种语言使用）。但是有一个问题，对于 Nushell 之外的命令而言，Nushell 不能帮助寻找调用中的错误，或者自动补全，或者语法高亮。")]),t._v(" "),e("p",[t._v("这就是 "),e("code",[t._v("extern")]),t._v(" 的作用。"),e("code",[t._v("extern")]),t._v("关键字允许你为 Nushell 之外的命令写一个完整的签名，这样你就能得到上述所有的好处。如果你看一下默认配置，你会发现其中有一些"),e("code",[t._v("extern")]),t._v("调用。下面是其中之一：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" extern "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git push"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    remote?: string@"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nu-complete git remotes"')]),t._v(",   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the name of the remote")]),t._v("\n    refspec?: string@"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nu-complete git branches"')]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the branch / refspec")]),t._v("\n    --verbose"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-v"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# be more verbose")]),t._v("\n    --quiet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-q"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                                  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# be more quiet")]),t._v("\n    --repo: string                               "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# repository")]),t._v("\n    --all                                        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# push all refs")]),t._v("\n    --mirror                                     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mirror all refs")]),t._v("\n    --delete"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-d"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete refs")]),t._v("\n    --tags                                       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# push tags (can't be used with --all or --mirror)")]),t._v("\n    --dry-run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dry run")]),t._v("\n    --porcelain                                  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# machine-readable output")]),t._v("\n    --force"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                                  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# force updates")]),t._v("\n    --force-with-lease: string                   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# require old value of ref to be at this value")]),t._v("\n    --recurse-submodules: string                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# control recursive pushing of submodules")]),t._v("\n    --thin                                       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# use thin pack")]),t._v("\n    --receive-pack: string                       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# receive pack program")]),t._v("\n    --exec: string                               "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# receive pack program")]),t._v("\n    --set-upstream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-u"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                           "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set upstream for git pull/status")]),t._v("\n    --progress                                   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# force progress reporting")]),t._v("\n    --prune                                      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# prune locally removed refs")]),t._v("\n    --no-verify                                  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# bypass pre-push hook")]),t._v("\n    --follow-tags                                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# push missing but relevant tags")]),t._v("\n    --signed: string                             "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# GPG sign the push")]),t._v("\n    --atomic                                     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# request atomic transaction on remote side")]),t._v("\n    --push-option"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-o"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": string                    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# option to transmit")]),t._v("\n    --ipv4"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-4"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                                   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# use IPv4 addresses only")]),t._v("\n    --ipv6"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-6"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                                   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# use IPv6 addresses only")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("p",[t._v("你会注意到这给了你所有与内部命令相同的描述性语法，让你描述标志(Flags)、短标志(Short Flags)、位置参数、类型等等。")]),t._v(" "),e("h2",{attrs:{id:"类型和自定义补全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型和自定义补全"}},[t._v("#")]),t._v(" 类型和自定义补全")]),t._v(" "),e("p",[t._v("在上面的例子中，你会注意到有些类型后面有"),e("code",[t._v("@")]),t._v("，接着后面是命令的名称。我们有独立的章节进一步谈论 "),e("RouterLink",{attrs:{to:"/zh-CN/book/custom_completions.html"}},[t._v("自定义补全")]),t._v("。")],1),t._v(" "),e("p",[t._v("参数的类型（或形状）和自定义补全都告诉 Nushell 如何完成对该标志或位置值的补全。例如，将类型设置为"),e("code",[t._v("path")]),t._v("允许 Nushell 为你将值补全为一个文件路径。使用"),e("code",[t._v("@")]),t._v("和一个自定义的补全方式覆盖了这个默认行为，让该自定义补全方式返回给你完整的补全列表。")]),t._v(" "),e("h2",{attrs:{id:"局限性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#局限性"}},[t._v("#")]),t._v(" 局限性")]),t._v(" "),e("p",[t._v("目前的"),e("code",[t._v("extern")]),t._v("语法有一些限制。在 Nushell 中，标志和位置参数是非常灵活的：标志可以在位置参数之前, 也可以与位置参数混合, 还可以跟随位置参数。许多外部命令没有这种灵活性。目前还没有一种方法来确保标志和位置参数的特定顺序与外部命令所要求的风格保持一致。")]),t._v(" "),e("p",[t._v("第二个限制是，有些外部命令要求使用"),e("code",[t._v("=")]),t._v("来传递标志和值。在 Nushell 中，"),e("code",[t._v("=")]),t._v("是一种方便的可选默认参数语法，目前还没有办法按要求使用它。")])])}),[],!1,null,null,null);s.default=a.exports}}]);