(window.webpackJsonp=window.webpackJsonp||[]).push([[493],{1008:function(t,e,n){"use strict";n.r(e);var a=n(35),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"reedline-nu-s-line-editor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reedline-nu-s-line-editor"}},[t._v("#")]),t._v(" Reedline, Nu's line editor")]),t._v(" "),n("p",[t._v("Nushell's line editor "),n("a",{attrs:{href:"https://github.com/nushell/reedline",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reedline"),n("OutboundLink")],1),t._v(" is a\ncross platform line reader designed to be modular and flexible. The engine is\nin charge of controlling the command history, validations, completions, hints\nand screen paint.")]),t._v(" "),n("h2",{attrs:{id:"configuration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),n("h3",{attrs:{id:"editing-mode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#editing-mode"}},[t._v("#")]),t._v(" Editing mode")]),t._v(" "),n("p",[t._v("Reedline allows you to edit text using two modes: vi and emacs. If not\nspecified, the default edit mode is emacs mode. In order to select your\nfavorite you need to modify your config file and write down your preferred\nmode.")]),t._v(" "),n("p",[t._v("For example:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    edit_mode: emacs\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h4",{attrs:{id:"default-keybindings"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#default-keybindings"}},[t._v("#")]),t._v(" Default keybindings")]),t._v(" "),n("p",[t._v("Each edit mode comes with the usual keybinding for vi and emacs text editing.")]),t._v(" "),n("p",[t._v("Emacs and Vi Insert keybindings")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Key")]),t._v(" "),n("th",[t._v("Event")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Esc")]),t._v(" "),n("td",[t._v("Esc")])]),t._v(" "),n("tr",[n("td",[t._v("Backspace")]),t._v(" "),n("td",[t._v("Backspace")])]),t._v(" "),n("tr",[n("td",[t._v("End")]),t._v(" "),n("td",[t._v("Move to end of line")])]),t._v(" "),n("tr",[n("td",[t._v("End")]),t._v(" "),n("td",[t._v("Complete history hint")])]),t._v(" "),n("tr",[n("td",[t._v("Home")]),t._v(" "),n("td",[t._v("Move to line start")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + c")]),t._v(" "),n("td",[t._v("Cancel current line")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + l")]),t._v(" "),n("td",[t._v("Clear screen")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + r")]),t._v(" "),n("td",[t._v("Search history")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + Right")]),t._v(" "),n("td",[t._v("Complete history word")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + Right")]),t._v(" "),n("td",[t._v("Move word right")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + Left")]),t._v(" "),n("td",[t._v("Move word left")])]),t._v(" "),n("tr",[n("td",[t._v("Up")]),t._v(" "),n("td",[t._v("Move menu up")])]),t._v(" "),n("tr",[n("td",[t._v("Up")]),t._v(" "),n("td",[t._v("Move up")])]),t._v(" "),n("tr",[n("td",[t._v("Down")]),t._v(" "),n("td",[t._v("Move menu down")])]),t._v(" "),n("tr",[n("td",[t._v("Down")]),t._v(" "),n("td",[t._v("Move down")])]),t._v(" "),n("tr",[n("td",[t._v("Left")]),t._v(" "),n("td",[t._v("Move menu left")])]),t._v(" "),n("tr",[n("td",[t._v("Left")]),t._v(" "),n("td",[t._v("Move left")])]),t._v(" "),n("tr",[n("td",[t._v("Right")]),t._v(" "),n("td",[t._v("History hint complete")])]),t._v(" "),n("tr",[n("td",[t._v("Right")]),t._v(" "),n("td",[t._v("Move menu right")])]),t._v(" "),n("tr",[n("td",[t._v("Right")]),t._v(" "),n("td",[t._v("Move right")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + b")]),t._v(" "),n("td",[t._v("Move menu left")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + b")]),t._v(" "),n("td",[t._v("Move left")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + f")]),t._v(" "),n("td",[t._v("History hint complete")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + f")]),t._v(" "),n("td",[t._v("Move menu right")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + f")]),t._v(" "),n("td",[t._v("Move right")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + p")]),t._v(" "),n("td",[t._v("Move menu up")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + p")]),t._v(" "),n("td",[t._v("Move up")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + n")]),t._v(" "),n("td",[t._v("Move menu down")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + n")]),t._v(" "),n("td",[t._v("Move down")])])])]),t._v(" "),n("p",[t._v("Vi Normal keybindings")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Key")]),t._v(" "),n("th",[t._v("Event")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Ctr + c")]),t._v(" "),n("td",[t._v("Cancel current line")])]),t._v(" "),n("tr",[n("td",[t._v("Ctr + l")]),t._v(" "),n("td",[t._v("Clear screen")])]),t._v(" "),n("tr",[n("td",[t._v("Up")]),t._v(" "),n("td",[t._v("Move menu up")])]),t._v(" "),n("tr",[n("td",[t._v("Up")]),t._v(" "),n("td",[t._v("Move up")])]),t._v(" "),n("tr",[n("td",[t._v("Down")]),t._v(" "),n("td",[t._v("Move menu down")])]),t._v(" "),n("tr",[n("td",[t._v("Down")]),t._v(" "),n("td",[t._v("Move down")])]),t._v(" "),n("tr",[n("td",[t._v("Left")]),t._v(" "),n("td",[t._v("Move menu left")])]),t._v(" "),n("tr",[n("td",[t._v("Left")]),t._v(" "),n("td",[t._v("Move left")])]),t._v(" "),n("tr",[n("td",[t._v("Right")]),t._v(" "),n("td",[t._v("Move menu right")])]),t._v(" "),n("tr",[n("td",[t._v("Right")]),t._v(" "),n("td",[t._v("Move right")])])])]),t._v(" "),n("p",[t._v("Besides the previous keybindings, while in Vi normal mode you can use the classic\nvi mode of executing actions by selecting a motion or an action. The available\noptions for the combinations are:")]),t._v(" "),n("p",[t._v("Vi Normal motions")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Key")]),t._v(" "),n("th",[t._v("motion")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("w")]),t._v(" "),n("td",[t._v("Word")])]),t._v(" "),n("tr",[n("td",[t._v("d")]),t._v(" "),n("td",[t._v("Line end")])]),t._v(" "),n("tr",[n("td",[t._v("0")]),t._v(" "),n("td",[t._v("Line start")])]),t._v(" "),n("tr",[n("td",[t._v("$")]),t._v(" "),n("td",[t._v("Line end")])]),t._v(" "),n("tr",[n("td",[t._v("f")]),t._v(" "),n("td",[t._v("Right until char")])]),t._v(" "),n("tr",[n("td",[t._v("t")]),t._v(" "),n("td",[t._v("Right before char")])]),t._v(" "),n("tr",[n("td",[t._v("F")]),t._v(" "),n("td",[t._v("Left until char")])]),t._v(" "),n("tr",[n("td",[t._v("T")]),t._v(" "),n("td",[t._v("Left before char")])])])]),t._v(" "),n("p",[t._v("Vi Normal actions")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Key")]),t._v(" "),n("th",[t._v("action")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("d")]),t._v(" "),n("td",[t._v("Delete")])]),t._v(" "),n("tr",[n("td",[t._v("p")]),t._v(" "),n("td",[t._v("Paste after")])]),t._v(" "),n("tr",[n("td",[t._v("P")]),t._v(" "),n("td",[t._v("Paste before")])]),t._v(" "),n("tr",[n("td",[t._v("h")]),t._v(" "),n("td",[t._v("Move left")])]),t._v(" "),n("tr",[n("td",[t._v("l")]),t._v(" "),n("td",[t._v("Move right")])]),t._v(" "),n("tr",[n("td",[t._v("j")]),t._v(" "),n("td",[t._v("Move down")])]),t._v(" "),n("tr",[n("td",[t._v("k")]),t._v(" "),n("td",[t._v("Move up")])]),t._v(" "),n("tr",[n("td",[t._v("w")]),t._v(" "),n("td",[t._v("Move word right")])]),t._v(" "),n("tr",[n("td",[t._v("b")]),t._v(" "),n("td",[t._v("Move word left")])]),t._v(" "),n("tr",[n("td",[t._v("i")]),t._v(" "),n("td",[t._v("Enter Vi insert at current char")])]),t._v(" "),n("tr",[n("td",[t._v("a")]),t._v(" "),n("td",[t._v("Enter Vi insert after char")])]),t._v(" "),n("tr",[n("td",[t._v("0")]),t._v(" "),n("td",[t._v("Move to start of line")])]),t._v(" "),n("tr",[n("td",[t._v("^")]),t._v(" "),n("td",[t._v("Move to start of line")])]),t._v(" "),n("tr",[n("td",[t._v("$")]),t._v(" "),n("td",[t._v("Move to end of line")])]),t._v(" "),n("tr",[n("td",[t._v("u")]),t._v(" "),n("td",[t._v("Undo")])]),t._v(" "),n("tr",[n("td",[t._v("c")]),t._v(" "),n("td",[t._v("Change")])]),t._v(" "),n("tr",[n("td",[t._v("x")]),t._v(" "),n("td",[t._v("Delete char")])]),t._v(" "),n("tr",[n("td",[t._v("s")]),t._v(" "),n("td",[t._v("History search")])]),t._v(" "),n("tr",[n("td",[t._v("D")]),t._v(" "),n("td",[t._v("Delete to end")])]),t._v(" "),n("tr",[n("td",[t._v("A")]),t._v(" "),n("td",[t._v("Append to end")])])])]),t._v(" "),n("h3",{attrs:{id:"command-history"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#command-history"}},[t._v("#")]),t._v(" Command history")]),t._v(" "),n("p",[t._v("As mentioned before, Reedline manages and stores all the commands that are\nedited and sent to Nushell. To configure the max number of records that\nReedline should store you will need to adjust this value in your config file:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    max_history_size: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"customizing-your-prompt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#customizing-your-prompt"}},[t._v("#")]),t._v(" Customizing your prompt")]),t._v(" "),n("p",[t._v("Reedline prompt is also highly customizable. In order to construct your perfect\nprompt, you could define the next environmental variables in your config file:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Use nushell functions to define your right and left prompt")]),t._v("\ndef create_left_prompt "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" path_segment "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$env")]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PWD")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$path_segment")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ndef create_right_prompt "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" time_segment "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date now "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%m/%d/%Y %r'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" str collect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$time_segment")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nlet-env PROMPT_COMMAND "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" create_left_prompt "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nlet-env PROMPT_COMMAND_RIGHT "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" create_right_prompt "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("You don't have to define the environmental variables using Nushell\nfunctions. You can use simple strings to define them.")])]),t._v(" "),n("p",[t._v("You can also customize the prompt indicator for the line editor by modifying\nthe next env variables.")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("let-env PROMPT_INDICATOR "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"〉"')]),t._v("\nlet-env PROMPT_INDICATOR_VI_INSERT "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),t._v("\nlet-env PROMPT_INDICATOR_VI_NORMAL "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"〉"')]),t._v("\nlet-env PROMPT_MULTILINE_INDICATOR "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"::: "')]),t._v("\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("The prompt indicators are environmental variables that represent the\nstate of the prompt")])]),t._v(" "),n("h2",{attrs:{id:"keybindings"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#keybindings"}},[t._v("#")]),t._v(" Keybindings")]),t._v(" "),n("p",[t._v("Reedline keybindings are powerful constructs that let you build chains of\nevents that can be triggered with a specific combination of keys.")]),t._v(" "),n("p",[t._v("For example, let's say that you would like to map the completion menu to the\n"),n("code",[t._v("Ctrl + t")]),t._v(" keybinding (default is "),n("code",[t._v("tab")]),t._v("). You can add the next entry to your\nconfig file.")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: emacs\n        event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menu name: completion_menu "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("After loading this new "),n("code",[t._v("config.nu")]),t._v(", your new keybinding ("),n("code",[t._v("Ctrl + t")]),t._v(") will open\nthe completion command.")]),t._v(" "),n("p",[t._v("Each keybinding requires the next elements:")]),t._v(" "),n("ul",[n("li",[t._v("name: Unique name for your keybinding for easy reference in "),n("code",[t._v("$config.keybindings")])]),t._v(" "),n("li",[t._v("modifier: A key modifier for the keybinding. The options are:\n"),n("ul",[n("li",[t._v("none")]),t._v(" "),n("li",[t._v("control")]),t._v(" "),n("li",[t._v("alt")]),t._v(" "),n("li",[t._v("shift")]),t._v(" "),n("li",[t._v("control | alt")]),t._v(" "),n("li",[t._v("control | alt | shift")])])]),t._v(" "),n("li",[t._v("keycode: This represent the key to be pressed")]),t._v(" "),n("li",[t._v("mode: emacs, vi_insert, vi_normal (a single string or a list. e.g.\n["),n("code",[t._v("vi_insert")]),t._v(" "),n("code",[t._v("vi_normal")]),t._v("])")]),t._v(" "),n("li",[t._v("event: The type of event that is going to be sent by the keybinding. The\noptions are:\n"),n("ul",[n("li",[t._v("send")]),t._v(" "),n("li",[t._v("edit")]),t._v(" "),n("li",[t._v("until")])])])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("All of the available modifiers, keycodes and events can be found with\nthe command "),n("code",[t._v("keybindings list")])])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("The keybindings added to "),n("code",[t._v("vi_insert")]),t._v(" mode will be available when the\nline editor is in insert mode (when you can write text), and the keybindings\nmarked with "),n("code",[t._v("vi_normal")]),t._v(" mode will be available when in normal (when the cursor\nmoves using h, j, k or l)")])]),t._v(" "),n("p",[t._v("The event section of the keybinding entry is where the actions to be performed\nare defined. In this field you can use either a record or a list of records.\nSomething like this")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: Enter "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),n("p",[t._v("or")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" edit: Clear "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: Enter "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),n("p",[t._v("The first keybinding example shown in this page follows the first case; a\nsingle event is sent to the engine.")]),t._v(" "),n("p",[t._v("The next keybinding is an example of a series of events sent to the engine. It\nfirst clears the prompt, inserts a string and then enters that value")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name: change_dir_with_fzf\n      modifier: CONTROL\n      keycode: Char_t\n      mode: emacs\n      event:"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" edit: Clear "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" edit: InsertString,\n            value: "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cd (ls | where type == dir | each { |it| '),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$it")]),t._v('.name} | str collect (char nl) | fzf | decode utf-8 | str trim)"')]),t._v("\n\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: Enter "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("One disadvantage of the previous keybinding is the fact that the inserted text\nwill be processed by the validator and saved in the history, making the\nkeybinding a bit slow and populating the command history with the same command.\nFor that reason there is the "),n("code",[t._v("executehostcommand")]),t._v(" type of event. The next\nexample does the same as the previous one in a simpler way, sending a single\nevent to the engine")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name: change_dir_with_fzf\n      modifier: CONTROL\n      keycode: Char_y\n      mode: emacs\n      event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        send: executehostcommand,\n        cmd: "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cd (ls | where type == dir | each { |it| '),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$it")]),t._v('.name} | str collect (char nl) | fzf | decode utf-8 | str trim)"')]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("Before we continue you must have noticed that the syntax changes for edits and\nsends, and for that reason it is important to explain them a bit more. A "),n("code",[t._v("send")]),t._v("\nis all the "),n("code",[t._v("Reedline")]),t._v(" events that can be processed by the engine and an "),n("code",[t._v("edit")]),t._v("\nare all the "),n("code",[t._v("EditCommands")]),t._v(" that can be processed by the engine.")]),t._v(" "),n("h3",{attrs:{id:"send-type"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#send-type"}},[t._v("#")]),t._v(" Send type")]),t._v(" "),n("p",[t._v("To find all the available options for "),n("code",[t._v("send")]),t._v(" you can use")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("keybindings list "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" events\n")])])]),n("p",[t._v("And the syntax for "),n("code",[t._v("send")]),t._v(" events is the next one")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NAME OF EVENT FROM LIST"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("You can write the name of the events with capital letters. The\nkeybinding parser is case insensitive")])]),t._v(" "),n("p",[t._v("There are two exceptions to this rule: the "),n("code",[t._v("Menu")]),t._v(" and "),n("code",[t._v("ExecuteHostCommand")]),t._v(".\nThose two events require an extra field to be complete. The "),n("code",[t._v("Menu")]),t._v(" needs the\nname of the menu to be activated (completion_menu or history_menu)")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        send: menu\n        name: completion_menu\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),n("p",[t._v("and the "),n("code",[t._v("ExecuteHostCommand")]),t._v(" requires a valid command that will be sent to the\nengine")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        send: executehostcommand\n        cmd: "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cd ~"')]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),n("p",[t._v("It is worth mentioning that in the events list you will also see "),n("code",[t._v("Edit([])")]),t._v(",\n"),n("code",[t._v("Multiple([])")]),t._v(" and "),n("code",[t._v("UntilFound([])")]),t._v(". These options are not available for the\nparser since they are constructed based on the keybinding definition. For\nexample, a "),n("code",[t._v("Multiple([])")]),t._v(" event is built for you when defining a list of\nrecords in the keybinding's event. An "),n("code",[t._v("Edit([])")]),t._v(" event is the same as the\n"),n("code",[t._v("edit")]),t._v(" type that was mentioned. And the "),n("code",[t._v("UntilFound([])")]),t._v(" event is the same as\nthe "),n("code",[t._v("until")]),t._v(" type mentioned before.")]),t._v(" "),n("h3",{attrs:{id:"edit-type"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#edit-type"}},[t._v("#")]),t._v(" Edit type")]),t._v(" "),n("p",[t._v("The "),n("code",[t._v("edit")]),t._v(" type is the simplification of the "),n("code",[t._v("Edit([])")]),t._v(" event. The "),n("code",[t._v("event")]),t._v(" type\nsimplifies defining complex editing events for the keybindings. To list the\navailable options you can use the next command")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("keybindings list "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" edits\n")])])]),n("p",[t._v("The usual syntax for an "),n("code",[t._v("edit")]),t._v(" is the next one")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" edit: "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NAME OF EDIT FROM LIST"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),n("p",[t._v("The syntax for the edits in the list that have a "),n("code",[t._v("()")]),t._v(" changes a little bit.\nSince those edits require an extra value to be fully defined. For example, if\nwe would like to insert a string where the prompt is located, then you will\nhave to use")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        edit: insertstring\n        value: "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MY NEW STRING"')]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),n("p",[t._v("or say you want to move right until the first "),n("code",[t._v("S")])]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        edit: moverightuntil\n        value: "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"S"')]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),n("p",[t._v("As you can see, these two types will allow you to construct any type of\nkeybinding that you require")]),t._v(" "),n("h3",{attrs:{id:"until-type"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#until-type"}},[t._v("#")]),t._v(" Until type")]),t._v(" "),n("p",[t._v("To complete this keybinding tour we need to discuss the "),n("code",[t._v("until")]),t._v(" type for event.\nAs you have seen so far, you can send a single event or a list of events. And\nas we have seen, when a list of events is sent, each and every one of them is\nprocessed.")]),t._v(" "),n("p",[t._v("However, there may be cases when you want to assign different events to the\nsame keybinding. This is especially useful with Nushell menus. For example, say\nyou still want to activate your completion menu with "),n("code",[t._v("Ctrl + t")]),t._v(" but you also\nwant to move to the next element in the menu once it is activated using the\nsame keybinding.")]),t._v(" "),n("p",[t._v("For these cases, we have the "),n("code",[t._v("until")]),t._v(" keyword. The events listed inside the\nuntil event will be processed one by one with the difference that as soon as\none is successful, the event processing is stopped.")]),t._v(" "),n("p",[t._v("The next keybinding represents this case.")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: emacs\n        event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          until: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menu name: completion_menu "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menunext "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("The previous keybinding will first try to open a completion menu. If the menu\nis not active, it will activate it and send a success signal. If the keybinding\nis pressed again, since there is an active menu, then the next event it will\nsend is MenuNext, which means that it will move the selector to the next\nelement in the menu.")]),t._v(" "),n("p",[t._v("As you can see the "),n("code",[t._v("until")]),t._v(" keyword allows us to define two events for the same\nkeybinding. At the moment of this writing, only the Menu events allow this type\nof layering. The other non menu event types will always return a success value,\nmeaning that the "),n("code",[t._v("until")]),t._v(" event will stop as soon as it reaches the command.")]),t._v(" "),n("p",[t._v("For example, the next keybinding will always send a "),n("code",[t._v("down")]),t._v(" because that event\nis always successful")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: emacs\n        event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          until: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: down "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menu name: completion_menu "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menunext "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"removing-a-default-keybinding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#removing-a-default-keybinding"}},[t._v("#")]),t._v(" Removing a default keybinding")]),t._v(" "),n("p",[t._v("If you want to remove a certain default keybinding without replacing it with a different action, you can set "),n("code",[t._v("event: null")]),t._v(".")]),t._v(" "),n("p",[t._v("e.g. to disable screen clearing with "),n("code",[t._v("Ctrl + l")]),t._v(" for all edit modes")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        modifier: control\n        keycode: char_l\n        mode: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("emacs, vi_normal, vi_insert"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        event: null\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),n("h3",{attrs:{id:"troubleshooting-keybinding-problems"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting-keybinding-problems"}},[t._v("#")]),t._v(" Troubleshooting keybinding problems")]),t._v(" "),n("p",[t._v("Your terminal environment may not always propagate your key combinations on to nushell the way you expect it to.\nYou can use the command "),n("code",[t._v("keybindings listen")]),t._v(" to figure out if certain keypresses are actually received by nushell, and how.")]),t._v(" "),n("h2",{attrs:{id:"menus"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#menus"}},[t._v("#")]),t._v(" Menus")]),t._v(" "),n("p",[t._v("Thanks to Reedline, Nushell has menus that can help you with your day to day\nshell scripting. Next we present the default menus that are always available\nwhen using Nushell")]),t._v(" "),n("h3",{attrs:{id:"help-menu"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#help-menu"}},[t._v("#")]),t._v(" Help menu")]),t._v(" "),n("p",[t._v("The help menu is there to ease your transition into Nushell. Say you are\nputting together an amazing pipeline and then you forgot the internal command\nthat would reverse a string for you. Instead of deleting your pipe, you can\nactivate the help menu with "),n("code",[t._v("ctr+q")]),t._v(". Once active just type keywords for the\ncommand you are looking for and the menu will show you commands that match your\ninput. The matching is done on the name of the commands or the commands\ndescription.")]),t._v(" "),n("p",[t._v("To navigate the menu you can select the next element by using "),n("code",[t._v("tab")]),t._v(", you can\nscroll the description by pressing left or right and you can even paste into\nthe line the available command examples.")]),t._v(" "),n("p",[t._v("The help menu can be configured by modifying the next parameters")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    menus "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: help_menu\n        only_buffer_difference: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Search is done on the text written after activating the menu")]),t._v("\n        marker: "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"? "')]),t._v("                 "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Indicator that appears with the menu is active")]),t._v("\n        type: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            layout: description      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Type of menu")]),t._v("\n            columns: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("               "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of columns where the options are displayed")]),t._v("\n            col_width: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional value. If missing all the screen width is used to calculate column width")]),t._v("\n            col_padding: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Padding between columns")]),t._v("\n            selection_rows: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of rows allowed to display found options")]),t._v("\n            description_rows: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of rows allowed to display command description")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        style: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            text: green                   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style")]),t._v("\n            selected_text: green_reverse  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style for selected option")]),t._v("\n            description_text: yellow      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style for description")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),n("h3",{attrs:{id:"completion-menu"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#completion-menu"}},[t._v("#")]),t._v(" Completion menu")]),t._v(" "),n("p",[t._v("The completion menu is a context sensitive menu that will present suggestions\nbased on the status of the prompt. These suggestions can range from path\nsuggestions to command alternatives. While writing a command, you can activate\nthe menu to see available flags for an internal command. Also, if you have\ndefined your custom completions for external commands, these will appear in the\nmenu as well.")]),t._v(" "),n("p",[t._v("The completion menu by default is accessed by pressing "),n("code",[t._v("tab")]),t._v(" and it can be configured by\nmodifying these values from the config object:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    menus "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: completion_menu\n        only_buffer_difference: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Search is done on the text written after activating the menu")]),t._v("\n        marker: "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"| "')]),t._v("                  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Indicator that appears with the menu is active")]),t._v("\n        type: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            layout: columnar          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Type of menu")]),t._v("\n            columns: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of columns where the options are displayed")]),t._v("\n            col_width: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("             "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional value. If missing all the screen width is used to calculate column width")]),t._v("\n            col_padding: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Padding between columns")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        style: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            text: green                   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style")]),t._v("\n            selected_text: green_reverse  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style for selected option")]),t._v("\n            description_text: yellow      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style for description")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),n("p",[t._v("By modifying these parameters you can customize the layout of your menu to your\nliking.")]),t._v(" "),n("h3",{attrs:{id:"history-menu"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#history-menu"}},[t._v("#")]),t._v(" History menu")]),t._v(" "),n("p",[t._v("The history menu is a handy way to access the editor history. When activating\nthe menu (default "),n("code",[t._v("Ctrl+x")]),t._v(") the command history is presented in reverse\nchronological order, making it extremely easy to select a previous command.")]),t._v(" "),n("p",[t._v("The history menu can be configured by modifying these values from the config object:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    menus "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: help_menu\n        only_buffer_difference: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Search is done on the text written after activating the menu")]),t._v("\n        marker: "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"? "')]),t._v("                 "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Indicator that appears with the menu is active")]),t._v("\n        type: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            layout: list             "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Type of menu")]),t._v("\n            page_size: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of entries that will presented when activating the menu")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        style: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            text: green                   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style")]),t._v("\n            selected_text: green_reverse  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style for selected option")]),t._v("\n            description_text: yellow      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style for description")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),n("p",[t._v("When the history menu is activated, it pulls "),n("code",[t._v("page_size")]),t._v(" records from the\nhistory and presents them in the menu. If there is space in the terminal, when\nyou press "),n("code",[t._v("Ctrl+x")]),t._v(" again the menu will pull the same number of records and\nappend them to the current page. If it isn't possible to present all the pulled\nrecords, the menu will create a new page. The pages can be navigated by\npressing "),n("code",[t._v("Ctrl+z")]),t._v(" to go to previous page or "),n("code",[t._v("Ctrl+x")]),t._v(" to go to next page.")]),t._v(" "),n("h4",{attrs:{id:"searching-the-history"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#searching-the-history"}},[t._v("#")]),t._v(" Searching the history")]),t._v(" "),n("p",[t._v("To search in your history you can start typing key words for the command you\nare looking for. Once the menu is activated, anything that you type will be\nreplaced by the selected command from your history. for example, say that you\nhave already typed this")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("you can place the cursor inside the "),n("code",[t._v("()")]),t._v(" and activate the menu. You can filter\nthe history by typing key words and as soon as you select an entry, the typed\nwords will be replaced")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ls "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where size "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 10MiB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h4",{attrs:{id:"menu-quick-selection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#menu-quick-selection"}},[t._v("#")]),t._v(" Menu quick selection")]),t._v(" "),n("p",[t._v("Another nice feature of the menu is the ability to quick select something from\nit. Say you have activated your menu and it looks like this")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(": "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where size "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 10MiB\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(": "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where size "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 20MiB\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(": "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where size "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 30MiB\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(": "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where size "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 40MiB\n")])])]),n("p",[t._v("Instead of pressing down to select the fourth entry, you can type "),n("code",[t._v("!3")]),t._v(" and\npress enter. This will insert the selected text in the prompt position, saving\nyou time scrolling down the menu.")]),t._v(" "),n("p",[t._v("History search and quick selection can be used together. You can activate the\nmenu, do a quick search, and then quick select using the quick selection\ncharacter.")]),t._v(" "),n("h3",{attrs:{id:"user-defined-menus"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#user-defined-menus"}},[t._v("#")]),t._v(" User defined menus")]),t._v(" "),n("p",[t._v("In case you find that the default menus are not enough for you and you have\nthe need to create your own menu, Nushell can help you with that.")]),t._v(" "),n("p",[t._v("In order to add a new menu that fulfills your needs, you can use one of the default\nlayouts as a template. The templates available in nushell are columnar, list or\ndescription.")]),t._v(" "),n("p",[t._v("The columnar menu will show you data in a columnar fashion adjusting the column\nnumber based on the size of the text displayed in your columns.")]),t._v(" "),n("p",[t._v("The list type of menu will always display suggestions as a list, giving you the\noption to select values using "),n("code",[t._v("!")]),t._v(" plus number combination.")]),t._v(" "),n("p",[t._v("The description type will give you more space to display a description for some\nvalues, together with extra information that could be inserted into the buffer.")]),t._v(" "),n("p",[t._v("Let's say we want to create a menu that displays all the variables created\nduring your session, we are going to call it "),n("code",[t._v("vars_menu")]),t._v(". This menu will use a\nlist layout (layout: list). To search for values, we want to use only the things\nthat are written after the menu has been activated (only_buffer_difference:\ntrue).")]),t._v(" "),n("p",[t._v("With that in mind, the desired menu would look like this")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    menus "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: vars_menu\n        only_buffer_difference: "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n        marker: "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"# "')]),t._v("\n        type: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            layout: list\n            page_size: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        style: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            text: green\n            selected_text: green_reverse\n            description_text: yellow\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        source: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("buffer, position"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$nu")]),t._v(".scope.vars\n            "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=~")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$buffer")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" sort-by name\n            "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" each "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("it"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("value: "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$it")]),t._v(".name description: "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$it")]),t._v(".type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),n("p",[t._v("As you can see, the new menu is identical to the "),n("code",[t._v("history_menu")]),t._v(" previously\ndescribed. The only huge difference is the new field called "),n("code",[t._v("source")]),t._v(". The\n"),n("code",[t._v("source")]),t._v(" field is a nushell definition of the values you want to display in the\nmenu. For this menu we are extracting the data from "),n("code",[t._v("$nu.scope.vars")]),t._v(" and we\nare using it to create records that will be used to populate the menu.")]),t._v(" "),n("p",[t._v("The required structure for the record is the next one")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  value:       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The value that will be inserted in the buffer")]),t._v("\n  description: "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional. Description that will be display with the selected value")]),t._v("\n  span: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional. Span indicating what section of the string will be replaced by the value")]),t._v("\n    start:\n    end:\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  extra: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional. A list of strings that will be displayed with the selected value. Only works with a description menu")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("For the menu to display something, at least the "),n("code",[t._v("value")]),t._v(" field has to be present\nin the resulting record.")]),t._v(" "),n("p",[t._v("In order to make the menu interactive, these two variables are available in\nthe block: "),n("code",[t._v("$buffer")]),t._v(" and "),n("code",[t._v("$position")]),t._v(". The "),n("code",[t._v("$buffer")]),t._v(" contains the value captured\nby the menu, when the option "),n("code",[t._v("only_buffer_difference")]),t._v(" is true, "),n("code",[t._v("$buffer")]),t._v(" is the\ntext written after the menu was activated. If "),n("code",[t._v("only_buffer_difference")]),t._v(" is\nfalse, "),n("code",[t._v("$buffer")]),t._v(" is all the string in line. The "),n("code",[t._v("$position")]),t._v(" variable can be\nused to create replacement spans based on the idea you had for your menu. The\nvalue of "),n("code",[t._v("$position")]),t._v(" changes based on whether "),n("code",[t._v("only_buffer_difference")]),t._v(" is true\nor false. When true, "),n("code",[t._v("$position")]),t._v(" is the starting position in the string where\ntext was inserted after the menu was activated. When the value is false,\n"),n("code",[t._v("$position")]),t._v(" indicates the actual cursor position.")]),t._v(" "),n("p",[t._v("Using this information, you can design your menu to present the information you\nrequire and to replace that value in the location you need it. The only thing\nextra that you need to play with your menu is to define a keybinding that will\nactivate your brand new menu.")]),t._v(" "),n("h3",{attrs:{id:"menu-keybindings"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#menu-keybindings"}},[t._v("#")]),t._v(" Menu keybindings")]),t._v(" "),n("p",[t._v("In case you want to change the default way both menus are activated, you can\nchange that by defining new keybindings. For example, the next two keybindings\nassign the completion and history menu to "),n("code",[t._v("Ctrl+t")]),t._v(" and "),n("code",[t._v("Ctrl+y")]),t._v(" respectively")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vi_insert vi_normal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          until: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menu name: completion_menu "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menupagenext "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: history_menu\n        modifier: control\n        keycode: char_y\n        mode: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vi_insert vi_normal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        event: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          until: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menu name: history_menu "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menupagenext "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);