(window.webpackJsonp=window.webpackJsonp||[]).push([[852],{1337:function(s,t,e){"use strict";e.r(t);var a=e(35),v=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"处理字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#处理字符串"}},[s._v("#")]),s._v(" 处理字符串")]),s._v(" "),e("p",[s._v("Nushell 中的字符串用于保存文本数据以便后续使用，其中可以包括文件名、文件路径、列名以及更多。字符串是如此地普遍，以至于 Nushell 提供了几种处理它们的方法，你可以从中选择最合适的。")]),s._v(" "),e("h2",{attrs:{id:"单引号字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单引号字符串"}},[s._v("#")]),s._v(" 单引号字符串")]),s._v(" "),e("p",[s._v("Nushell 中最简单的字符串是单引号字符串。这种字符串使用"),e("code",[s._v("'")]),s._v("字符来包裹文本。下面是作为单引号字符串的"),e("code",[s._v("hello world")]),s._v("示例：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello world'")]),s._v("\nhello world\n")])])]),e("p",[s._v("单引号字符串不会对它们所给予的文本做任何事情，这使得它们成为容纳广泛文本数据的理想选择。")]),s._v(" "),e("h2",{attrs:{id:"双引号字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双引号字符串"}},[s._v("#")]),s._v(" 双引号字符串")]),s._v(" "),e("p",[s._v("对于更复杂的字符串，Nushell 也提供双引号字符串。这些字符串使用"),e("code",[s._v('"')]),s._v("字符来包裹文本。它们还支持使用"),e("code",[s._v("\\")]),s._v("字符在文本中转义。")]),s._v(" "),e("p",[s._v("例如，我们可以用转义字符和双引号字符串写出文字 hello，然后换行，再写上 world：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello'),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('world"')]),s._v("\nhello\nworld\n")])])]),e("p",[s._v("转义字符让你快速添加一个非此难以输入的字符。")]),s._v(" "),e("p",[s._v("Nushell 目前支持以下转义字符：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v('\\"')]),s._v(" - 双引号")]),s._v(" "),e("li",[e("code",[s._v("\\'")]),s._v(" - 单引号")]),s._v(" "),e("li",[e("code",[s._v("\\\\")]),s._v(" - 反斜杠")]),s._v(" "),e("li",[e("code",[s._v("\\/")]),s._v(" - 斜杠")]),s._v(" "),e("li",[e("code",[s._v("\\b")]),s._v(" - 退格字符")]),s._v(" "),e("li",[e("code",[s._v("\\f")]),s._v(" - 换页符")]),s._v(" "),e("li",[e("code",[s._v("\\r")]),s._v(" - 回车符")]),s._v(" "),e("li",[e("code",[s._v("\\n")]),s._v(" - 换行符 (line feed)")]),s._v(" "),e("li",[e("code",[s._v("\\t")]),s._v(" - 制表符")]),s._v(" "),e("li",[e("code",[s._v("\\uXXXX")]),s._v(" - Unicode 字符 (用 Unicode 字符的编号替换 XXXX)")])]),s._v(" "),e("h2",{attrs:{id:"字符串插值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串插值"}},[s._v("#")]),s._v(" 字符串插值")]),s._v(" "),e("p",[s._v("更复杂的字符串用例还需要一种新的字符串形式：字符串插值。这是一种从原始文本和执行表达式的结果中构建文本的方法。字符串插值将这些结果结合在一起，返回一个新的字符串。")]),s._v(" "),e("p",[s._v("字符串插值使用 "),e("code",[s._v('$" "')]),s._v(" 和 "),e("code",[s._v("$' '")]),s._v(" 作为包裹插值文本的方式。")]),s._v(" "),e("p",[s._v("例如，假设我们有一个叫做"),e("code",[s._v("$name")]),s._v("的变量，我们想问候这个变量中所包含的人：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Alice"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"greetings, ('),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$name")]),s._v(')"')]),s._v("\ngreetings, Alice\n")])])]),e("p",[s._v("通过使用"),e("code",[s._v("()")]),s._v("包裹表达式，我们可以运行它们并使用结果来帮助生成字符串。")]),s._v(" "),e("p",[s._v("字符串插值有单引号："),e("code",[s._v("$' '")]),s._v(" 和双引号："),e("code",[s._v('$" "')]),s._v(" 这两种形式，分别对应于单引号和双引号字符串 —— 单引号字符串插值不支持转义字符，而双引号字符串插值支持。")]),s._v(" "),e("h2",{attrs:{id:"分割字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分割字符串"}},[s._v("#")]),s._v(" 分割字符串")]),s._v(" "),e("p",[e("RouterLink",{attrs:{to:"/book/commands/split_row.html"}},[e("code",[s._v("split row")])]),s._v("命令从一个基于分隔符的字符串创建一个列表。\n例如，"),e("code",[s._v('let colors = ("red,green,blue" | split row ",")')]),s._v(" 创建列表"),e("code",[s._v("[red green blue]")]),s._v("。")],1),s._v(" "),e("p",[e("RouterLink",{attrs:{to:"/book/commands/split_column.html"}},[e("code",[s._v("split column")])]),s._v("命令将从一个基于分隔符的字符串中创建一个表。例如，"),e("code",[s._v('let colors = ("red,green,blue" | split column ",")')]),s._v(" 创建一个表格，并为每个元素添加一列。")],1),s._v(" "),e("p",[s._v("最后, "),e("RouterLink",{attrs:{to:"/book/commands/split_chars.html"}},[e("code",[s._v("split chars")])]),s._v("命令将一个字符串分割成一个字符列表。")],1),s._v(" "),e("h2",{attrs:{id:"str-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#str-命令"}},[s._v("#")]),s._v(" "),e("code",[s._v("str")]),s._v(" 命令")]),s._v(" "),e("p",[s._v("许多字符串函数是"),e("code",[s._v("str")]),s._v("命令的子命令，你可以使用"),e("code",[s._v("help str")]),s._v("来获得一个完整的命令列表。")]),s._v(" "),e("p",[s._v("例如, 你可以使用"),e("code",[s._v("str contains")]),s._v("来检查一个字符串是否包含某个特定的字符：")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" str contains "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"w"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);