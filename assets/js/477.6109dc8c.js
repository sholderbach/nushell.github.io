(window.webpackJsonp=window.webpackJsonp||[]).push([[477],{993:function(a,t,e){"use strict";e.r(t);var s=e(35),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"frontmatter-title"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[a._v("#")]),a._v(" "),e("code",[a._v(a._s(a.$frontmatter.title))])]),a._v(" "),e("div",{staticStyle:{"white-space":"pre-wrap"}},[a._v(a._s(a.$frontmatter.usage))]),a._v(" "),e("h2",{attrs:{id:"signature"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#signature"}},[a._v("#")]),a._v(" Signature")]),a._v(" "),e("p",[e("code",[a._v("> watch (path) (block) --debounce-ms --glob --recursive --verbose")])]),a._v(" "),e("h2",{attrs:{id:"parameters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("path")]),a._v(": the path to watch. Can be a file or directory")]),a._v(" "),e("li",[e("code",[a._v("block")]),a._v(": A Nu block of code to run whenever a file changes. The block will be passed "),e("code",[a._v("operation")]),a._v(", "),e("code",[a._v("path")]),a._v(", and "),e("code",[a._v("new_path")]),a._v(" (for renames only) arguments in that order")]),a._v(" "),e("li",[e("code",[a._v("--debounce-ms {int}")]),a._v(": Debounce changes for this many milliseconds (default: 100). Adjust if you find that single writes are reported as multiple events")]),a._v(" "),e("li",[e("code",[a._v("--glob {string}")]),a._v(": Only report changes for files that match this glob pattern (default: all files)")]),a._v(" "),e("li",[e("code",[a._v("--recursive {bool}")]),a._v(": Watch all directories under "),e("path",[a._v(" recursively. Will be ignored if "),e("path",[a._v(" is a file (default: true)")])])]),a._v(" "),e("li",[e("code",[a._v("--verbose")]),a._v(": Operate in verbose mode (default: false)")])]),a._v(" "),e("h2",{attrs:{id:"examples"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[a._v("#")]),a._v(" Examples")]),a._v(" "),e("p",[a._v("Run "),e("code",[a._v("cargo test")]),a._v(" whenever a Rust file changes")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("watch")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" --glob"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("**/*.rs "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" cargo "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("p",[a._v("Watch all changes in the current directory")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("watch")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("op, path, new_path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" $"),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"('),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$op")]),a._v(") ("),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$path")]),a._v(") ("),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$new_path")]),a._v(')"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("p",[a._v("Log all changes in a directory")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("watch")]),a._v(" /foo/bar "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("op, path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" $"),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"('),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$op")]),a._v(") - ("),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$path")]),a._v(')(char nl)"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" save --append changes_in_bar.log "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);