(window.webpackJsonp=window.webpackJsonp||[]).push([[933],{1449:function(a,v,_){"use strict";_.r(v);var e=_(35),t=Object(e.a)({},(function(){var a=this,v=a.$createElement,_=a._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[a._v("#")]),a._v(" 数据类型")]),a._v(" "),_("p",[a._v('传统上，Unix Shell 命令之间使用字符串文本进行通信。一个命令通过标准输出（通常缩写为 "stdout"）输出文本，另一个命令通过标准输入（或 "stdin"）读入文本，以此来让两个命令进行通信。')]),a._v(" "),_("p",[a._v("我们可以认为这种通信是基于字符串的。")]),a._v(" "),_("p",[a._v("Nu 在其命令中采用了这种方法，并将其扩展到包括其他类型的数据。目前，Nu 支持两种数据类型：简单的和结构化的数据。")]),a._v(" "),_("p",[a._v("像许多编程语言一样，Nu 使用一组简单和结构化的数据类型对数据进行建模。简单的数据类型包括整数、浮点数、字符串、布尔、日期和路径。它还包括一个用于表示文件大小的特殊类型。")]),a._v(" "),_("h2",{attrs:{id:"整数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#整数"}},[a._v("#")]),a._v(" 整数")]),a._v(" "),_("p",[a._v("整数（或整形）数字：例子包括 1、5 和 100。")]),a._v(" "),_("h2",{attrs:{id:"小数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小数"}},[a._v("#")]),a._v(" 小数")]),a._v(" "),_("p",[a._v("小数是指带有一些小数成分的数字，例如，1.5，2.0，和 15.333。")]),a._v(" "),_("h2",{attrs:{id:"字符串"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[a._v("#")]),a._v(" 字符串")]),a._v(" "),_("p",[a._v("代表文本的字符串。在 Nushell 中，我们有几种方法可以表示字符串：")]),a._v(" "),_("p",[_("strong",[a._v("双引号")])]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v('"my message"\n')])])]),_("p",[a._v("双引号是最常见的引号形式，只要是需要文字的地方，你都可能看到。")]),a._v(" "),_("p",[_("strong",[a._v("单引号")])]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("'my message'\n")])])]),_("p",[a._v("单引号也生成一个字符串值，就像双引号一样。这里的区别是，它们允许你在文本中使用双引号，例如："),_("code",[a._v("'他说：\"你能帮我拿下杯子吗？\"'")]),a._v("。")]),a._v(" "),_("p",[_("strong",[a._v("字符串插值")])]),a._v(" "),_("p",[a._v("Nushell 支持字符串插值，允许你在以"),_("code",[a._v("$")]),a._v("为前缀的字符串中运行子表达式。比如：")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v('> echo $"6 x 7 = (6 * 7)"\n6 x 7 = 42\n')])])]),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v('> ls | each { |it| echo $"($it.name) is ($it.size)" }\n───┬─────────────────────\n 0 │ genawait is 4.1 KB\n 1 │ learncpp is 4.1 KB\n 2 │ nuscripts is 4.1 KB\n───┴─────────────────────\n')])])]),_("p",[_("strong",[a._v("裸字符串")])]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("> echo hello\n")])])]),_("p",[a._v("Nushell 的一个独特特征是，你也可以创建一个没有任何引号的单字字符串。")]),a._v(" "),_("p",[a._v("上面的内容和如下写法是一样的：")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v('> echo "hello"\n')])])]),_("p",[a._v("另见 "),_("RouterLink",{attrs:{to:"/zh-CN/book/loading_data.html#处理字符串"}},[a._v("字符串的使用")]),a._v("。")],1),a._v(" "),_("h2",{attrs:{id:"文本行"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#文本行"}},[a._v("#")]),a._v(" 文本行")]),a._v(" "),_("p",[a._v("文本行(Lines)是具有隐含的操作系统特定行结尾的字符串。使用时需要加上操作系统特定的行尾标识。")]),a._v(" "),_("h2",{attrs:{id:"列路径"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#列路径"}},[a._v("#")]),a._v(" 列路径")]),a._v(" "),_("p",[a._v("列路径(Column Paths)是指通过表格到特定子表、列、行或单元格的路径。")]),a._v(" "),_("p",[a._v("例如) "),_("code",[a._v("open data.toml | get foo.0.bar")]),a._v("中的值"),_("code",[a._v("foo.0.bar")])]),a._v(" "),_("h2",{attrs:{id:"glob-模式-通配符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#glob-模式-通配符"}},[a._v("#")]),a._v(" Glob 模式（通配符）")]),a._v(" "),_("p",[a._v('在 Nushell 中，文件操作也允许你传入一个 glob 模式，有时被称为 "通配符"。这允许你给出一个可以匹配多个文件路径的模式。')]),a._v(" "),_("p",[a._v("最常见的模式是 "),_("code",[a._v("*")]),a._v("，它将匹配所有的路径。通常，你会看到这个模式被用作另一个模式的一部分，例如"),_("code",[a._v("*.bak")]),a._v("和"),_("code",[a._v("temp\\*")]),a._v("。")]),a._v(" "),_("p",[a._v("在 Nushell 中，我们也支持通过双 "),_("code",[a._v("*")]),a._v(" 来遍历其他目录内嵌套得更深的路径。例如，"),_("code",[a._v("ls **/*")]),a._v("将列出所有嵌套在当前目录下的非隐藏路径。")]),a._v(" "),_("p",[a._v("除了"),_("code",[a._v("*")]),a._v("，还有"),_("code",[a._v("?")]),a._v("模式，它将匹配一个单一的字符。例如，你可以通过使用模式"),_("code",[a._v("p???")]),a._v('来匹配 "port"。')]),a._v(" "),_("h2",{attrs:{id:"布尔类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型"}},[a._v("#")]),a._v(" 布尔类型")]),a._v(" "),_("p",[a._v("布尔类型是指真或假的状态。它通常用于一个比较的结果，而非直接使用该值。")]),a._v(" "),_("p",[a._v("布尔类型的两个值是"),_("code",[a._v("true")]),a._v("和"),_("code",[a._v("false")]),a._v("。")]),a._v(" "),_("h2",{attrs:{id:"日期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#日期"}},[a._v("#")]),a._v(" 日期")]),a._v(" "),_("p",[a._v("日期和时间被保存在日期(Date)值类型中。系统使用的日期值是有时区的，默认使用 UTC 时区。")]),a._v(" "),_("p",[a._v("日期有三种形式，基于 RFC 3339 标准：")]),a._v(" "),_("ul",[_("li",[a._v("日期:\n"),_("ul",[_("li",[_("code",[a._v("2022-02-02")])])])]),a._v(" "),_("li",[a._v("日期和时间 (GMT 格式):\n"),_("ul",[_("li",[_("code",[a._v("2022-02-02T14:30:00")])])])]),a._v(" "),_("li",[a._v("包含时区的日期和时间:\n"),_("ul",[_("li",[_("code",[a._v("2022-02-02T14:30:00+05:00")])])])])]),a._v(" "),_("h2",{attrs:{id:"时间间隔"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#时间间隔"}},[a._v("#")]),a._v(" 时间间隔")]),a._v(" "),_("p",[a._v("时间间隔(Duration)表示时间的长短。一秒钟、五周和一年都是时间间隔。")]),a._v(" "),_("p",[a._v("Eg) "),_("code",[a._v("1wk")]),a._v("是一个星期的时间间隔。")]),a._v(" "),_("p",[a._v("下表显示了目前支持的所有时间间隔：")]),a._v(" "),_("table",[_("thead",[_("tr",[_("th",[a._v("Duration")]),a._v(" "),_("th",[a._v("时长")])])]),a._v(" "),_("tbody",[_("tr",[_("td",[_("code",[a._v("1ns")])]),a._v(" "),_("td",[a._v("1 纳秒")])]),a._v(" "),_("tr",[_("td",[_("code",[a._v("1us")])]),a._v(" "),_("td",[a._v("1 微秒")])]),a._v(" "),_("tr",[_("td",[_("code",[a._v("1ms")])]),a._v(" "),_("td",[a._v("1 毫秒")])]),a._v(" "),_("tr",[_("td",[_("code",[a._v("1sec")])]),a._v(" "),_("td",[a._v("1 秒")])]),a._v(" "),_("tr",[_("td",[_("code",[a._v("1min")])]),a._v(" "),_("td",[a._v("1 分钟")])]),a._v(" "),_("tr",[_("td",[_("code",[a._v("1hr")])]),a._v(" "),_("td",[a._v("1 小时")])]),a._v(" "),_("tr",[_("td",[_("code",[a._v("1day")])]),a._v(" "),_("td",[a._v("1 天")])]),a._v(" "),_("tr",[_("td",[_("code",[a._v("1wk")])]),a._v(" "),_("td",[a._v("1 周")])])])]),a._v(" "),_("h2",{attrs:{id:"区间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#区间"}},[a._v("#")]),a._v(" 区间")]),a._v(" "),_("p",[a._v("区间(Ranges)是一种表达从开始到结束的数值序列的方式。它们的形式是"),_("code",[a._v("'start' + '..' + 'end'")]),a._v("。例如，范围 "),_("code",[a._v("1..3")]),a._v("表示数字 1、2、和 3。")]),a._v(" "),_("h2",{attrs:{id:"闭区间和开区间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#闭区间和开区间"}},[a._v("#")]),a._v(" 闭区间和开区间")]),a._v(" "),_("p",[a._v("默认情况下，区间是包含性的，也就是说，结束值被算作区间的一部分。区间"),_("code",[a._v("1..3")]),a._v("包括数字"),_("code",[a._v("3")]),a._v("作为区间内的最后一个值。")]),a._v(" "),_("p",[a._v("有时，你可能想要一个达到某个数字的区间，但在输出中不包含该数字。对于这种情况，你可以使用"),_("code",[a._v("..<")]),a._v("代替"),_("code",[a._v("..")]),a._v("。例如，"),_("code",[a._v("1..<5")]),a._v("包含数字 1、2、3 和 4。")]),a._v(" "),_("h2",{attrs:{id:"开放式区间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#开放式区间"}},[a._v("#")]),a._v(" 开放式区间")]),a._v(" "),_("p",[a._v("区间也可以是开放式的。你可以去掉区间的起点或终点，使其成为开放式的。")]),a._v(" "),_("p",[a._v("比方说，你想从 3 开始计数，但你心里没有一个具体的终点。你可以用 "),_("code",[a._v("3..")]),a._v(" 这个区间来表示。当你在右边使用一个无限制的区间时，请记住，这将持续计数尽可能长的时间，这可能是一个非常长的时间，你可能会在 "),_("code",[a._v("first")]),a._v(" 这样的命令中使用开放式区间，这样你就可以从区间中取出你想要的指定数量的元素。")]),a._v(" "),_("p",[a._v("你也可以使区间的开始部分开放。在这种情况下，Nushell 将从"),_("code",[a._v("0")]),a._v("开始向上计数。区间"),_("code",[a._v("..2")]),a._v("包含数字 0、1 和 2。")]),a._v(" "),_("h2",{attrs:{id:"文件路径"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#文件路径"}},[a._v("#")]),a._v(" 文件路径")]),a._v(" "),_("p",[a._v("文件路径(File Paths)是在给定的操作系统中代表文件路径的一种与平台无关的方式。比如"),_("code",[a._v("/usr/bin")]),a._v("和"),_("code",[a._v("C:\\Users\\file.txt")]),a._v("。")]),a._v(" "),_("h2",{attrs:{id:"文件大小"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#文件大小"}},[a._v("#")]),a._v(" 文件大小")]),a._v(" "),_("p",[a._v("文件大小(File Sizes)保存在一种特殊的称为字节的整数类型中。例如包括 "),_("code",[a._v("100b")]),a._v(", "),_("code",[a._v("15kb")]),a._v(", 和 "),_("code",[a._v("100mb")]),a._v("。")]),a._v(" "),_("p",[a._v("文件大小单位的完整列表是：")]),a._v(" "),_("ul",[_("li",[_("code",[a._v("b")]),a._v(": bytes")]),a._v(" "),_("li",[_("code",[a._v("kb")]),a._v(": kilobytes (aka 1000 bytes)")]),a._v(" "),_("li",[_("code",[a._v("mb")]),a._v(": megabytes")]),a._v(" "),_("li",[_("code",[a._v("gb")]),a._v(": gigabytes")]),a._v(" "),_("li",[_("code",[a._v("tb")]),a._v(": terabytes")]),a._v(" "),_("li",[_("code",[a._v("pb")]),a._v(": petabytes")]),a._v(" "),_("li",[_("code",[a._v("kib")]),a._v(": kibibytes (aka 1024 bytes)")]),a._v(" "),_("li",[_("code",[a._v("mib")]),a._v(": mebibytes")]),a._v(" "),_("li",[_("code",[a._v("gib")]),a._v(": gibibytes")]),a._v(" "),_("li",[_("code",[a._v("tib")]),a._v(": tebibytes")]),a._v(" "),_("li",[_("code",[a._v("pib")]),a._v(": pebibytes")])]),a._v(" "),_("h2",{attrs:{id:"二进制数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二进制数据"}},[a._v("#")]),a._v(" 二进制数据")]),a._v(" "),_("p",[a._v("二进制数据，像图像文件的数据一样，是一组原始字节。")]),a._v(" "),_("p",[a._v("你可以使用 "),_("code",[a._v("0x[...]")]),a._v(" 或 "),_("code",[a._v("0b[...]")]),a._v(" 或 "),_("code",[a._v("0o[...]")]),a._v(" 形式将二进制写成一个字面值：")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("> 0x[1F FF]\n> 0b[1 1010]\n> 0o[777]\n")])])]),_("p",[a._v("不完整的字节将用零来填充。")]),a._v(" "),_("h2",{attrs:{id:"结构化数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#结构化数据"}},[a._v("#")]),a._v(" 结构化数据")]),a._v(" "),_("p",[a._v("结构化数据是在简单数据的基础上建立的。例如，结构化数据给我们提供了一种在同一数值中表示多个整数的方法，而不是一个单一的整数。目前支持的结构化数据类型有：记录、列表和表格。")]),a._v(" "),_("h2",{attrs:{id:"记录"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#记录"}},[a._v("#")]),a._v(" 记录")]),a._v(" "),_("p",[a._v("记录(Records)持有键值对，很像 JSON 中的对象。由于这些记录有时会有很多字段，所以记录是从上到下打印的，而不是从左到右：")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("> echo {name: sam, rank: 10}\n╭──────┬─────╮\n│ name │ sam │\n│ rank │ 10  │\n╰──────┴─────╯\n")])])]),_("p",[a._v("你可以将其转换到一个表然后遍历该记录：")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("> echo {name: sam, rank: 10} | transpose key value\n╭───┬──────┬───────╮\n│ # │ key  │ value │\n├───┼──────┼───────┤\n│ 0 │ name │  sam  │\n│ 1 │ rank │   10  │\n╰───┴──────┴───────╯\n")])])]),_("h2",{attrs:{id:"列表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#列表"}},[a._v("#")]),a._v(" 列表")]),a._v(" "),_("p",[a._v('列表(Lists)可以容纳一个以上的值。这些可以是简单的值，也可以容纳行，而一组记录的组合通常被称为 "表"。')]),a._v(" "),_("p",[a._v("例如，一个字符串的列表：")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("> echo [sam fred george]\n───┬────────\n 0 │ sam\n 1 │ fred\n 2 │ george\n───┴────────\n")])])]),_("h2",{attrs:{id:"表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#表"}},[a._v("#")]),a._v(" 表")]),a._v(" "),_("p",[a._v("表(Table)是 Nushell 的一个核心数据结构。当你运行 Nushell 命令时，你会发现许多命令都会将表作为输出返回。表由行和列组成。")]),a._v(" "),_("p",[a._v("我们可以创建自己的表，就像我们创建一个列表一样。因为表也包含列，而不仅仅是值，所以我们需要传入列的名称：")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("> echo [[column1, column2]; [Value1, Value2]]\n───┬─────────┬─────────\n # │ column1 │ column2\n───┼─────────┼─────────\n 0 │ Value1  │ Value2\n───┴─────────┴─────────\n")])])]),_("p",[a._v("我们还可以创建一个有多行数据的表格：")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("> echo [[column1, column2]; [Value1, Value2] [Value3, Value4]]\n───┬─────────┬─────────\n # │ column1 │ column2\n───┼─────────┼─────────\n 0 │ Value1  │ Value2\n 1 │ Value3  │ Value4\n───┴─────────┴─────────\n")])])]),_("p",[a._v("你也可以通过一个记录列表来创建表格:")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("> echo [{name: sam, rank: 10}, {name: bob, rank: 7}]\n╭───┬──────┬──────╮\n│ # │ name │ rank │\n├───┼──────┼──────┤\n│ 0 │ sam  │   10 │\n│ 1 │ bob  │    7 │\n╰───┴──────┴──────╯\n")])])]),_("h2",{attrs:{id:"块"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#块"}},[a._v("#")]),a._v(" 块")]),a._v(" "),_("p",[a._v("块(Blocks)表示 Nu 中的一个代码块。例如，在命令 "),_("code",[a._v("each { |it| echo $it }")]),a._v(" 中，块是包含在大括号中的部分，"),_("code",[a._v("{ |it| echo $it }")]),a._v("。如果有必要，可以在一对管道符号（例如，"),_("code",[a._v("|it|")]),a._v("）之间指定块参数。")]),a._v(" "),_("p",[a._v("块是表示可以在每行数据上执行的代码的一种有效方法。在"),_("RouterLink",{attrs:{to:"/book/commands/each.html"}},[_("code",[a._v("each")])]),a._v("块中使用"),_("code",[a._v("$it")]),a._v("作为参数名是惯例，但并不是必须的："),_("code",[a._v("each { |x| echo $x }")]),a._v("与"),_("code",[a._v("each { |it| echo $it }")]),a._v("的结果相同。")],1),a._v(" "),_("h2",{attrs:{id:"组"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#组"}},[a._v("#")]),a._v(" 组")]),a._v(" "),_("p",[a._v("以此为例：")]),a._v(" "),_("div",{staticClass:"language-bash extra-class"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[a._v("foo "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  line1\n  line2"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" line3 "),_("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" line4\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),_("p",[a._v("在该代码块内，你有两个独立的组(Groups)直到运行完毕。组是一个以分号分隔的管道集合，其中最后一个管道会输出到屏幕。")]),a._v(" "),_("ul",[_("li",[_("code",[a._v("line1")]),a._v(" 是一个独立的组，所以该命令将运行到结束并显示在屏幕上。")]),a._v(" "),_("li",[_("code",[a._v("line2")]),a._v(" 是第二组中的一个管道。它会运行，但其内容不会在屏幕上显示。")]),a._v(" "),_("li",[_("code",[a._v("line3")]),a._v(" | "),_("code",[a._v("line4")]),a._v(" 是第二组中的第二个管道。它会运行并且它的内容会在屏幕上显示。")])])])}),[],!1,null,null,null);v.default=t.exports}}]);