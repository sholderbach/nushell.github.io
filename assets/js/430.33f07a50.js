(window.webpackJsonp=window.webpackJsonp||[]).push([[430],{946:function(a,s,t){"use strict";t.r(s);var e=t(35),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"frontmatter-title"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[a._v("#")]),a._v(" "),t("code",[a._v(a._s(a.$frontmatter.title))])]),a._v(" "),t("div",{staticStyle:{"white-space":"pre-wrap"}},[a._v(a._s(a.$frontmatter.usage))]),a._v(" "),t("h2",{attrs:{id:"signature"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#signature"}},[a._v("#")]),a._v(" Signature")]),a._v(" "),t("p",[t("code",[a._v("> str replace (find) (replace) ...rest --all --no-expand --string")])]),a._v(" "),t("h2",{attrs:{id:"parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("find")]),a._v(": the pattern to find")]),a._v(" "),t("li",[t("code",[a._v("replace")]),a._v(": the replacement pattern")]),a._v(" "),t("li",[t("code",[a._v("...rest")]),a._v(": optionally find and replace text by column paths")]),a._v(" "),t("li",[t("code",[a._v("--all")]),a._v(": replace all occurrences of find string")]),a._v(" "),t("li",[t("code",[a._v("--no-expand")]),a._v(": do not expand the replace parameter as a regular expression")]),a._v(" "),t("li",[t("code",[a._v("--string")]),a._v(": do not use regular expressions for string find and replace")])]),a._v(" "),t("h2",{attrs:{id:"examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[a._v("#")]),a._v(" Examples")]),a._v(" "),t("p",[a._v("Find and replace contents with capture group")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'my_library.rb'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" str replace "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'(.+).rb'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'$1.nu'")]),a._v("\n")])])]),t("p",[a._v("Find and replace all occurrences of find string")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'abc abc abc'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" str replace -a "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'z'")]),a._v("\n")])])]),t("p",[a._v("Find and replace all occurrences of find string in table")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("ColA ColB ColC"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("abc abc ads"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" str replace -a "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'z'")]),a._v(" ColA ColC\n")])])]),t("p",[a._v("Find and replace contents without using the replace parameter as a regular expression")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'dogs_$1_cats'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" str replace "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'\\$1'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'$2'")]),a._v(" -n\n")])])]),t("p",[a._v("Find and replace the first occurence using string replacement "),t("em",[a._v("not")]),a._v(" regular expressions")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'c:\\some\\cool\\path'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" str replace "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'c:\\some\\cool'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'~'")]),a._v(" -s\n")])])]),t("p",[a._v("Find and replace all occurences using string replacement "),t("em",[a._v("not")]),a._v(" regular expressions")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'abc abc abc'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" str replace -a "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'z'")]),a._v(" -s\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);