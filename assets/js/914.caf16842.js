(window.webpackJsonp=window.webpackJsonp||[]).push([[914],{1430:function(t,s,a){"use strict";a.r(s);var n=a(35),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"reedline-nu-的行编辑器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reedline-nu-的行编辑器"}},[t._v("#")]),t._v(" Reedline，Nu 的行编辑器")]),t._v(" "),a("p",[t._v("Nushell 的行编辑器 "),a("a",{attrs:{href:"https://github.com/nushell/reedline",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reedline"),a("OutboundLink")],1),t._v(" 是一个跨平台的行读取器，它被设计为模块化且颇具灵活性的。该引擎的作用是负责控制命令历史，验证，自动补全，提示以及屏幕绘制。")]),t._v(" "),a("h2",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("h3",{attrs:{id:"编辑模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编辑模式"}},[t._v("#")]),t._v(" 编辑模式")]),t._v(" "),a("p",[t._v("Reedline 允许你使用两种模式来编辑文本：vi 和 emacs。如果没有指定，默认的编辑模式是 emacs 模式。若要自行设置喜欢的模式，你可以修改配置文件为相应模式。比如：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    edit_mode: emacs\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"默认键盘绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认键盘绑定"}},[t._v("#")]),t._v(" 默认键盘绑定")]),t._v(" "),a("p",[t._v("每种编辑模式都有相应的 vi 或 emacs 文本编辑的常用快捷键设置。")]),t._v(" "),a("p",[t._v("Emacs 和 Vi 快捷键绑定")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("快捷键")]),t._v(" "),a("th",[t._v("事件")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Esc")]),t._v(" "),a("td",[t._v("Esc")])]),t._v(" "),a("tr",[a("td",[t._v("Backspace")]),t._v(" "),a("td",[t._v("退格")])]),t._v(" "),a("tr",[a("td",[t._v("End")]),t._v(" "),a("td",[t._v("移至行尾")])]),t._v(" "),a("tr",[a("td",[t._v("End")]),t._v(" "),a("td",[t._v("补全历史提示")])]),t._v(" "),a("tr",[a("td",[t._v("Home")]),t._v(" "),a("td",[t._v("移至行首")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + c")]),t._v(" "),a("td",[t._v("取消当前行")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + l")]),t._v(" "),a("td",[t._v("清除屏幕")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + r")]),t._v(" "),a("td",[t._v("搜索历史")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + Right")]),t._v(" "),a("td",[t._v("Complete history word")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + Right")]),t._v(" "),a("td",[t._v("右移一个词")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + Left")]),t._v(" "),a("td",[t._v("左移一个词")])]),t._v(" "),a("tr",[a("td",[t._v("Up")]),t._v(" "),a("td",[t._v("菜单上移")])]),t._v(" "),a("tr",[a("td",[t._v("Up")]),t._v(" "),a("td",[t._v("上移")])]),t._v(" "),a("tr",[a("td",[t._v("Down")]),t._v(" "),a("td",[t._v("菜单下移")])]),t._v(" "),a("tr",[a("td",[t._v("Down")]),t._v(" "),a("td",[t._v("下移")])]),t._v(" "),a("tr",[a("td",[t._v("Left")]),t._v(" "),a("td",[t._v("菜单左移")])]),t._v(" "),a("tr",[a("td",[t._v("Left")]),t._v(" "),a("td",[t._v("左移")])]),t._v(" "),a("tr",[a("td",[t._v("Right")]),t._v(" "),a("td",[t._v("完成历史提示")])]),t._v(" "),a("tr",[a("td",[t._v("Right")]),t._v(" "),a("td",[t._v("菜单右移")])]),t._v(" "),a("tr",[a("td",[t._v("Right")]),t._v(" "),a("td",[t._v("右移")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + b")]),t._v(" "),a("td",[t._v("菜单左移")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + b")]),t._v(" "),a("td",[t._v("左移")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + f")]),t._v(" "),a("td",[t._v("完成历史提示")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + f")]),t._v(" "),a("td",[t._v("菜单右移")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + f")]),t._v(" "),a("td",[t._v("右移")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + p")]),t._v(" "),a("td",[t._v("菜单上移")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + p")]),t._v(" "),a("td",[t._v("上移")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + n")]),t._v(" "),a("td",[t._v("菜单下移")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + n")]),t._v(" "),a("td",[t._v("下移")])])])]),t._v(" "),a("p",[t._v("Vi 普通键绑定")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("快捷键")]),t._v(" "),a("th",[t._v("事件")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Ctr + c")]),t._v(" "),a("td",[t._v("取消当前行")])]),t._v(" "),a("tr",[a("td",[t._v("Ctr + l")]),t._v(" "),a("td",[t._v("清除屏幕")])]),t._v(" "),a("tr",[a("td",[t._v("Up")]),t._v(" "),a("td",[t._v("菜单上移")])]),t._v(" "),a("tr",[a("td",[t._v("Up")]),t._v(" "),a("td",[t._v("上移")])]),t._v(" "),a("tr",[a("td",[t._v("Down")]),t._v(" "),a("td",[t._v("菜单下移")])]),t._v(" "),a("tr",[a("td",[t._v("Down")]),t._v(" "),a("td",[t._v("下移")])]),t._v(" "),a("tr",[a("td",[t._v("Left")]),t._v(" "),a("td",[t._v("菜单左移")])]),t._v(" "),a("tr",[a("td",[t._v("Left")]),t._v(" "),a("td",[t._v("左移")])]),t._v(" "),a("tr",[a("td",[t._v("Right")]),t._v(" "),a("td",[t._v("菜单右移")])]),t._v(" "),a("tr",[a("td",[t._v("Right")]),t._v(" "),a("td",[t._v("右移")])])])]),t._v(" "),a("p",[t._v("除了之前的键盘绑定，在正常 Vi 模式下，你可以使用经典的 Vi 快捷键来进行移动或者执行相应的动作。可用的组合的选项是：")]),t._v(" "),a("p",[t._v("Vi 正常移动快捷键")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("快捷键")]),t._v(" "),a("th",[t._v("移动")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("w")]),t._v(" "),a("td",[t._v("前移一个单词")])]),t._v(" "),a("tr",[a("td",[t._v("d")]),t._v(" "),a("td",[t._v("移动到行尾")])]),t._v(" "),a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("移动到行首")])]),t._v(" "),a("tr",[a("td",[t._v("$")]),t._v(" "),a("td",[t._v("移动到行尾")])]),t._v(" "),a("tr",[a("td",[t._v("f")]),t._v(" "),a("td",[t._v("行内向右查找字符")])]),t._v(" "),a("tr",[a("td",[t._v("t")]),t._v(" "),a("td",[t._v("行内右移到指定字符前")])]),t._v(" "),a("tr",[a("td",[t._v("F")]),t._v(" "),a("td",[t._v("行内向左查找字符")])]),t._v(" "),a("tr",[a("td",[t._v("T")]),t._v(" "),a("td",[t._v("行内左移到指定字符前")])])])]),t._v(" "),a("p",[t._v("Vi 正常操作快捷键")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("快捷键")]),t._v(" "),a("th",[t._v("操作")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("d")]),t._v(" "),a("td",[t._v("删除")])]),t._v(" "),a("tr",[a("td",[t._v("p")]),t._v(" "),a("td",[t._v("在光标之后粘贴")])]),t._v(" "),a("tr",[a("td",[t._v("P")]),t._v(" "),a("td",[t._v("在光标之前粘贴")])]),t._v(" "),a("tr",[a("td",[t._v("h")]),t._v(" "),a("td",[t._v("左移")])]),t._v(" "),a("tr",[a("td",[t._v("l")]),t._v(" "),a("td",[t._v("右移")])]),t._v(" "),a("tr",[a("td",[t._v("j")]),t._v(" "),a("td",[t._v("下移")])]),t._v(" "),a("tr",[a("td",[t._v("k")]),t._v(" "),a("td",[t._v("上移")])]),t._v(" "),a("tr",[a("td",[t._v("w")]),t._v(" "),a("td",[t._v("右移一个单词")])]),t._v(" "),a("tr",[a("td",[t._v("b")]),t._v(" "),a("td",[t._v("左移一个单词")])]),t._v(" "),a("tr",[a("td",[t._v("i")]),t._v(" "),a("td",[t._v("在光标前插入")])]),t._v(" "),a("tr",[a("td",[t._v("a")]),t._v(" "),a("td",[t._v("在光标后插入")])]),t._v(" "),a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("移到行首")])]),t._v(" "),a("tr",[a("td",[t._v("^")]),t._v(" "),a("td",[t._v("移到行首")])]),t._v(" "),a("tr",[a("td",[t._v("$")]),t._v(" "),a("td",[t._v("移到行尾")])]),t._v(" "),a("tr",[a("td",[t._v("u")]),t._v(" "),a("td",[t._v("撤销")])]),t._v(" "),a("tr",[a("td",[t._v("c")]),t._v(" "),a("td",[t._v("修改")])]),t._v(" "),a("tr",[a("td",[t._v("x")]),t._v(" "),a("td",[t._v("删除字符")])]),t._v(" "),a("tr",[a("td",[t._v("s")]),t._v(" "),a("td",[t._v("搜索历史")])]),t._v(" "),a("tr",[a("td",[t._v("D")]),t._v(" "),a("td",[t._v("删除当前位置到行尾")])]),t._v(" "),a("tr",[a("td",[t._v("A")]),t._v(" "),a("td",[t._v("在当前行最后插入")])])])]),t._v(" "),a("h3",{attrs:{id:"命令历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令历史"}},[t._v("#")]),t._v(" 命令历史")]),t._v(" "),a("p",[t._v("如前所述，Reedline 管理并存储所有被编辑并发送给 Nushell 的命令。要配置 Reedline 可以存储的最大记录数，你需要在配置文件中调整这个值：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    max_history_size: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"定制你的提示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定制你的提示"}},[t._v("#")]),t._v(" 定制你的提示")]),t._v(" "),a("p",[t._v("Reedline 的提示语也是高度可定制的。为了构建你的完美提示符，你可以在配置文件中定义下面的环境变量：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Use nushell functions to define your right and left prompt")]),t._v("\ndef create_left_prompt "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" path_segment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$env")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PWD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$path_segment")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ndef create_right_prompt "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" time_segment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%m/%d/%Y %r'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" str collect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$time_segment")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nlet-env PROMPT_COMMAND "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" create_left_prompt "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nlet-env PROMPT_COMMAND_RIGHT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" create_right_prompt "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("你并非必须要用 Nushell 的函数来定义环境变量，也可以使用简单的字符串来定义它们。")])]),t._v(" "),a("p",[t._v("你也可以通过修改以下环境变量来定制行编辑器的提示符：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("let-env PROMPT_INDICATOR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"〉"')]),t._v("\nlet-env PROMPT_INDICATOR_VI_INSERT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),t._v("\nlet-env PROMPT_INDICATOR_VI_NORMAL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"〉"')]),t._v("\nlet-env PROMPT_MULTILINE_INDICATOR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"::: "')]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("提示符是环境变量，它代表了提示的状态")])]),t._v(" "),a("h2",{attrs:{id:"按键绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按键绑定"}},[t._v("#")]),t._v(" 按键绑定")]),t._v(" "),a("p",[t._v("Reedline 按键绑定是一个强大的结构，它允许你建立一连串的事件，而且这些事件可以通过特定的按键组合来触发。")]),t._v(" "),a("p",[t._v("例如，我们假设你想把补全菜单绑定到 "),a("code",[t._v("Ctrl + t")]),t._v(" 这组快捷键上（默认是"),a("code",[t._v("tab")]),t._v("）。你可以添加下面的条目到你的配置文件：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: emacs\n        event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menu name: completion_menu "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在加载这个新的 "),a("code",[t._v("config.nu")]),t._v(" 之后，你的新键盘绑定（"),a("code",[t._v("Ctrl + t")]),t._v("）将打开命令自动补全。")]),t._v(" "),a("p",[t._v("每个按键绑定都需要以下元素：")]),t._v(" "),a("ul",[a("li",[t._v("name: 为你的绑定键取一个独特的名字，以便于在"),a("code",[t._v("$config.keybindings")]),t._v("中引用")]),t._v(" "),a("li",[t._v("modifier: 绑定键的修饰符。选项有：\n"),a("ul",[a("li",[t._v("none")]),t._v(" "),a("li",[t._v("control")]),t._v(" "),a("li",[t._v("alt")]),t._v(" "),a("li",[t._v("shift")]),t._v(" "),a("li",[t._v("control | alt")]),t._v(" "),a("li",[t._v("control | alt | shift")])])]),t._v(" "),a("li",[t._v("keycode: 这代表要按下的键")]),t._v(" "),a("li",[t._v("mode: emacs, vi_insert, vi_normal (一个单独的字符串或一个列表，例如： ["),a("code",[t._v("vi_insert")]),t._v(" "),a("code",[t._v("vi_normal")]),t._v("])")]),t._v(" "),a("li",[t._v("event: 键盘绑定要发送的事件的类型。选项包括：\n"),a("ul",[a("li",[t._v("send")]),t._v(" "),a("li",[t._v("edit")]),t._v(" "),a("li",[t._v("until")])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("所有可用的修饰键、键码和事件都可以通过"),a("code",[t._v("keybindings list")]),t._v("命令找到。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("添加到 "),a("code",[t._v("vi_insert")]),t._v(" 模式中的按键绑定将在行编辑器处于插入模式（可以写入文本）时可用，而标有 "),a("code",[t._v("vi_normal")]),t._v(" 模式的按键绑定将在正常模式下（当光标使用 h、j、k 或 l 移动时）可用。")])]),t._v(" "),a("p",[t._v("键盘绑定条目的事件部分是定义要执行的动作的地方。在这个字段，你可以使用一个记录或一个记录列表。比如这样：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: Enter "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("或者")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" edit: Clear "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: Enter "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("上述第一个按键绑定例子遵循第一种情况，只有一个事件被发送到引擎。")]),t._v(" "),a("p",[t._v("后一个按键绑定的例子是向引擎发送一系列的事件。它首先清除提示，插入一个字符串，然后输入该值。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name: change_dir_with_fzf\n      modifier: CONTROL\n      keycode: Char_t\n      mode: emacs\n      event:"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" edit: Clear "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" edit: InsertString,\n            value: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cd (ls | where type == dir | each { |it| '),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$it")]),t._v('.name} | str collect (char nl) | fzf | decode utf-8 | str trim)"')]),t._v("\n\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: Enter "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面按键绑定的缺点是，插入的文本将被验证处理并保存在历史记录中，这使得按键绑定的执行速度有点慢，而且会用相同的命令来填充命令历史。出于这个原因，可以采用 "),a("code",[t._v("ExecuteHostCommand")]),t._v(" 类型的事件。下一个例子以更简单的方式做了与前一个相同的事情，发送了一个单一的事件给引擎：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name: change_dir_with_fzf\n      modifier: CONTROL\n      keycode: Char_y\n      mode: emacs\n      event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        send: ExecuteHostCommand,\n        cmd: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cd (ls | where type == dir | each { |it| '),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$it")]),t._v('.name} | str collect (char nl) | fzf | decode utf-8 | str trim)"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在我们继续之前，你一定已经注意到，编辑和发送的语法发生了变化，因此有必要对它们进行更多的解释。 "),a("code",[t._v("send")]),t._v(" 是所有可以被引擎处理的 "),a("code",[t._v("Reedline")]),t._v(" 事件，而 "),a("code",[t._v("edit")]),t._v(" 是所有可以被引擎处理的 "),a("code",[t._v("EditCommands")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"send类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#send类型"}},[t._v("#")]),t._v(" "),a("code",[t._v("send")]),t._v("类型")]),t._v(" "),a("p",[t._v("要找到 "),a("code",[t._v("send")]),t._v(" 的所有可用选项，你可以使用：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("keybindings list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" events\n")])])]),a("p",[t._v("而 "),a("code",[t._v("send")]),t._v(" 事件的语法如下：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NAME OF EVENT FROM LIST"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("你可以用大写字母来命名事件的名称，键盘绑定解析器是不区分大小写的。")])]),t._v(" "),a("p",[t._v("这条规则有两个例外："),a("code",[t._v("Menu")]),t._v("和"),a("code",[t._v("ExecuteHostCommand")]),t._v("。这两个事件需要一个额外的字段来完成，"),a("code",[t._v("Menu")]),t._v(" 需要有一个菜单的名称才能触发（自动补全菜单或历史命令菜单）：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        send: menu\n        name: completion_menu\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("而 "),a("code",[t._v("ExecuteHostCommand")]),t._v(" 需要一个有效的命令，它将被发送到引擎：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        send: ExecuteHostCommand\n        cmd: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cd ~"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("值得一提的是，在事件列表中，你还会看到"),a("code",[t._v("Edit([])")]),t._v("，"),a("code",[t._v("Multiple([])")]),t._v("和"),a("code",[t._v("UntilFound([])")]),t._v("。这些选项对解析器是不可见的，因为它们是基于键盘绑定的定义来构建的。例如，当你在键盘绑定事件里面定义了一个记录列表时，就会为你建立一个"),a("code",[t._v("Multiple([])")]),t._v("事件。"),a("code",[t._v("Edit([])")]),t._v("事件与前面提到的"),a("code",[t._v("edit")]),t._v("类型相同。"),a("code",[t._v("UntilFound([])")]),t._v("事件和前面提到的"),a("code",[t._v("until")]),t._v("类型一样。")]),t._v(" "),a("h3",{attrs:{id:"edit类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#edit类型"}},[t._v("#")]),t._v(" "),a("code",[t._v("edit")]),t._v("类型")]),t._v(" "),a("p",[a("code",[t._v("edit")]),t._v("类型是"),a("code",[t._v("Edit([])")]),t._v("事件的简化。"),a("code",[t._v("event")]),t._v("类型简化了定义复杂编辑事件的按键绑定。要列出可用的选项，你可以使用下面的命令：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("keybindings list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" edits\n")])])]),a("p",[t._v("以下是编辑的常用语法：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" edit: "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NAME OF EDIT FROM LIST"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("列表中带有 "),a("code",[t._v("()")]),t._v(" 的编辑的语法有一点变化，因为这些编辑需要一个额外的值来进行完全定义。例如，如果我们想在提示符所在的位置插入一个字符串，那么你将不得不使用如下方式：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        edit: InsertString\n        value: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MY NEW STRING"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("或者说你想向右移动，直到第一个"),a("code",[t._v("S")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        edit: MoveRightUntil\n        value: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"S"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("正如你所看到的，这两种类型将允许你构建你需要的任何类型的按键绑定。")]),t._v(" "),a("h3",{attrs:{id:"until类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#until类型"}},[t._v("#")]),t._v(" "),a("code",[t._v("until")]),t._v("类型")]),t._v(" "),a("p",[t._v("为了完成这个按键绑定之旅，我们需要讨论事件的"),a("code",[t._v("until")]),t._v("类型。正如你到目前为止所看到的，你可以发送一个单一的事件或一个事件列表。而当一个事件列表被发送时，每一个事件都会被处理。")]),t._v(" "),a("p",[t._v("然而，在有些情况下，你可能想把不同的事件分配给同一个键盘绑定。这在 Nushell 菜单中特别有用。例如，假设你仍然想用"),a("code",[t._v("Ctrl + t")]),t._v("激活你的补全菜单，但你也想在菜单被激活后用同一个快捷键移动到下一个元素。")]),t._v(" "),a("p",[t._v("对于这些情况，我们有"),a("code",[t._v("until")]),t._v("关键字。在"),a("code",[t._v("until")]),t._v("事件中列出的事件将被逐一处理，不同的是，一旦一个事件被成功处理，事件处理就会停止。")]),t._v(" "),a("p",[t._v("下一个键盘绑定就是这种情况：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: emacs\n        event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          until: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menu name: completion_menu "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: MenuNext "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面的按键绑定将首先尝试打开一个补全菜单。如果菜单没有激活，它将激活它并发送一个成功信号。如果再次按下按键绑定，因为已经有一个激活的菜单，那么它将发送的下一个事件是"),a("code",[t._v("MenuNext")]),t._v("，这意味着它将把选择器移动到菜单的下一个元素。")]),t._v(" "),a("p",[t._v("正如你所看到的，"),a("code",[t._v("until")]),t._v("关键字允许我们为同一个键盘绑定定义两个事件。在写这篇文章的时候，只有菜单事件允许这种类型的分层。其他非菜单事件类型将总是返回一个成功值，这意味着"),a("code",[t._v("until")]),t._v("事件在到达第一个命令时就会停止。")]),t._v(" "),a("p",[t._v("例如，下一个按键绑定将总是发送一个"),a("code",[t._v("down")]),t._v("，因为该事件总是成功的。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: emacs\n        event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          until: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: down "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menu name: completion_menu "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menunext "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"移除一个默认的按键绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移除一个默认的按键绑定"}},[t._v("#")]),t._v(" 移除一个默认的按键绑定")]),t._v(" "),a("p",[t._v("如果你想删除某个默认的按键绑定，而不打算使用不同的动作来替代它，你可以设置"),a("code",[t._v("event: null")]),t._v("。")]),t._v(" "),a("p",[t._v("例如，在所有的编辑模式下，禁用 "),a("code",[t._v("Ctrl + l")]),t._v(" 清除屏幕：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        modifier: control\n        keycode: char_l\n        mode: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("emacs, vi_normal, vi_insert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        event: null\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"排查键盘绑定问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排查键盘绑定问题"}},[t._v("#")]),t._v(" 排查键盘绑定问题")]),t._v(" "),a("p",[t._v("你的终端环境可能并不总是以你期望的方式将你的组合键冒泡到 Nushell 上。\n你可以使用"),a("code",[t._v("keybindings listen")]),t._v("命令来确定 Nushell 是否真的收到了某些按键，以及如何收到的。")]),t._v(" "),a("h2",{attrs:{id:"菜单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#菜单"}},[t._v("#")]),t._v(" 菜单")]),t._v(" "),a("p",[t._v("感谢 Reedline，Nushell 的菜单可以帮助你完成日常的 Shell 脚本操作。接下来我们介绍一下在使用 Nushell 时一直可用的默认菜单。")]),t._v(" "),a("h3",{attrs:{id:"帮助菜单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#帮助菜单"}},[t._v("#")]),t._v(" 帮助菜单")]),t._v(" "),a("p",[t._v("帮助菜单的存在是为了方便你过渡到 Nushell。假设你正在组建一个惊人的管道，然后你忘记了反转一个字符串的内部命令。你可以用"),a("code",[t._v("ctr+q")]),t._v("来激活帮助菜单，而不是删除你的管道。一旦激活，只需输入你要找的命令的关键词，菜单就会显示与你的输入相匹配的命令，而匹配的依据就是命令的名称或描述。")]),t._v(" "),a("p",[t._v("要浏览菜单，你可以用"),a("code",[t._v("tab")]),t._v("选择下一个元素，你可以按左键或右键滚动描述，你甚至可以在行中粘贴可用的命令例子。")]),t._v(" "),a("p",[t._v("帮助菜单可以通过修改以下参数进行配置：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    menus "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: help_menu\n        only_buffer_difference: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Search is done on the text written after activating the menu")]),t._v("\n        marker: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"? "')]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Indicator that appears with the menu is active")]),t._v("\n        type: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            layout: description      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Type of menu")]),t._v("\n            columns: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of columns where the options are displayed")]),t._v("\n            col_width: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional value. If missing all the screen width is used to calculate column width")]),t._v("\n            col_padding: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Padding between columns")]),t._v("\n            selection_rows: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of rows allowed to display found options")]),t._v("\n            description_rows: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of rows allowed to display command description")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        style: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            text: green                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style")]),t._v("\n            selected_text: green_reverse  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style for selected option")]),t._v("\n            description_text: yellow      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style for description")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("h3",{attrs:{id:"补全菜单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补全菜单"}},[t._v("#")]),t._v(" 补全菜单")]),t._v(" "),a("p",[t._v("补全菜单是一个上下文敏感的菜单，它将根据提示的状态给出建议。这些建议的范围包括从路径建议到替代命令。在编写命令时，你可以激活该菜单以查看内部命令的可用选项。另外，如果你已经为外部命令定义了你的自定义补全方式，这些补全提示也会出现在菜单中。")]),t._v(" "),a("p",[t._v("默认情况下，补全菜单是通过按"),a("code",[t._v("tab")]),t._v("访问的，它可以通过修改配置对象中的这些值来进行配置：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    menus "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: completion_menu\n        only_buffer_difference: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Search is done on the text written after activating the menu")]),t._v("\n        marker: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"| "')]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Indicator that appears with the menu is active")]),t._v("\n        type: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            layout: columnar          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Type of menu")]),t._v("\n            columns: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of columns where the options are displayed")]),t._v("\n            col_width: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional value. If missing all the screen width is used to calculate column width")]),t._v("\n            col_padding: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Padding between columns")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        style: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            text: green                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style")]),t._v("\n            selected_text: green_reverse  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style for selected option")]),t._v("\n            description_text: yellow      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style for description")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("通过修改这些参数，你可以根据自己的喜好定制你的菜单布局。")]),t._v(" "),a("h3",{attrs:{id:"历史菜单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#历史菜单"}},[t._v("#")]),t._v(" 历史菜单")]),t._v(" "),a("p",[t._v("历史菜单是访问编辑器命令历史的一个便捷方法。当激活菜单时(默认为"),a("code",[t._v("Ctrl+x")]),t._v(")，命令的历史会以时间倒序显示，这使得选择前一个命令变得非常容易。")]),t._v(" "),a("p",[t._v("历史菜单可以通过修改配置对象中的这些值进行配置：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    menus "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: help_menu\n        only_buffer_difference: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Search is done on the text written after activating the menu")]),t._v("\n        marker: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"? "')]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Indicator that appears with the menu is active")]),t._v("\n        type: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            layout: list             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Type of menu")]),t._v("\n            page_size: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Number of entries that will presented when activating the menu")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        style: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            text: green                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style")]),t._v("\n            selected_text: green_reverse  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style for selected option")]),t._v("\n            description_text: yellow      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Text style for description")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("当历史菜单被激活时，它从历史中拉出"),a("code",[t._v("page_size")]),t._v("个记录并在菜单中呈现。如果终端还有空间，当你再次按"),a("code",[t._v("Ctrl+x")]),t._v("时，菜单将拉出相同数量的记录，并将它们追加到当前页。如果不可能呈现所有拉出的记录，菜单将创建一个新的页面。可以通过按"),a("code",[t._v("Ctrl+z")]),t._v("转到上一页或"),a("code",[t._v("Ctrl+x")]),t._v("转到下一页来浏览这些页面。")]),t._v(" "),a("h4",{attrs:{id:"搜索历史记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搜索历史记录"}},[t._v("#")]),t._v(" 搜索历史记录")]),t._v(" "),a("p",[t._v("要在你的命令历史中搜索，你可以开始输入你要找的命令的关键词。一旦菜单被激活，你输入的任何内容都会被历史记录中选定的命令所取代。例如，假设你已经输入了以下内容：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("你可以把光标放在 "),a("code",[t._v("()")]),t._v(" 内并激活菜单，你可以通过输入关键词来过滤历史记录，一旦你选择了一个条目，输入的词就会被替换：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ls "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 10MiB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"菜单快速选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#菜单快速选择"}},[t._v("#")]),t._v(" 菜单快速选择")]),t._v(" "),a("p",[t._v("菜单的另一个很好的特性是能够快速选择其中的内容。假设你已经激活了你的菜单，它看起来像这样：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 10MiB\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 20MiB\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 30MiB\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 40MiB\n")])])]),a("p",[t._v("你可以输入"),a("code",[t._v("!3")]),t._v("，然后按回车，而不是按向下键去选择第四个条目。这将在提示位置插入选定的文本，节省你向下滚动菜单的时间。")]),t._v(" "),a("p",[t._v("历史搜索和快速选择可以一起使用。你可以激活菜单，进行快速搜索，然后使用前面的方法进行快速选择。")]),t._v(" "),a("h3",{attrs:{id:"用户定义菜单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户定义菜单"}},[t._v("#")]),t._v(" 用户定义菜单")]),t._v(" "),a("p",[t._v("如果你发现默认的菜单对你来说是不够的，你需要要创建自己的菜单，Nushell 也可以帮你做到这点。")]),t._v(" "),a("p",[t._v("为了添加一个满足你需求的新菜单，你可以使用其中一个默认的布局作为模板。Nushell 中可用的模板有列式、列表式或描述式。")]),t._v(" "),a("p",[t._v("列式菜单将以列的方式向你显示数据，并根据你的列中显示的文本大小调整列数。")]),t._v(" "),a("p",[t._v("列表类型的菜单将总是以列表的形式显示建议，你可以通过使用"),a("code",[t._v("!")]),t._v("加数字的组合来选择值。")]),t._v(" "),a("p",[t._v("描述类型将给你更多的空间来显示一些值的描述，以及可以插入到缓冲区的额外信息。")]),t._v(" "),a("p",[t._v("假设我们想创建一个菜单，用于显示在你的会话中创建的所有变量，我们将把它称为"),a("code",[t._v("vars_menu")]),t._v("。这个菜单将使用一个列表布局 (layout: list)。为了搜索值，我们希望只使用菜单激活后输入的东西(only_buffer_difference: true)。")]),t._v(" "),a("p",[t._v("满足这些所需的菜单将看起来像这样：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    menus "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: vars_menu\n        only_buffer_difference: "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n        marker: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"# "')]),t._v("\n        type: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            layout: list\n            page_size: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        style: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            text: green\n            selected_text: green_reverse\n            description_text: yellow\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        source: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("buffer, position"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$nu")]),t._v(".scope.vars\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" where name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=~")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$buffer")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" sort-by name\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" each "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("value: "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$it")]),t._v(".name description: "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$it")]),t._v(".type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("p",[t._v("正如你所看到的，新的菜单与之前描述的"),a("code",[t._v("history_menu")]),t._v("是相同的，唯一的区别是新的字段叫"),a("code",[t._v("source")]),t._v("。"),a("code",[t._v("source")]),t._v("字段是 Nushell 所定义的，它包含了你想在菜单中显示的值。对于这个菜单，我们从"),a("code",[t._v("$nu.scope.vars")]),t._v("中提取数据，然后用它来创建记录并填充菜单。")]),t._v(" "),a("p",[t._v("记录所需的结构如下：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  value:       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The value that will be inserted in the buffer")]),t._v("\n  description: "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional. Description that will be display with the selected value")]),t._v("\n  span: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional. Span indicating what section of the string will be replaced by the value")]),t._v("\n    start:\n    end:\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  extra: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional. A list of strings that will be displayed with the selected value. Only works with a description menu")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("为了让菜单显示一些东西，至少"),a("code",[t._v("value")]),t._v("字段必须存在于结果记录中。")]),t._v(" "),a("p",[t._v("为了使菜单具有交互性，这两个变量在块中可用："),a("code",[t._v("$buffer")]),t._v("和"),a("code",[t._v("$position")]),t._v("。"),a("code",[t._v("$buffer")]),t._v("包含菜单捕获的值，当选项"),a("code",[t._v("only_buffer_difference")]),t._v("为真时，"),a("code",[t._v("$buffer")]),t._v("是菜单被激活后输入的文本。如果"),a("code",[t._v("only_buffer_difference")]),t._v("是假的，"),a("code",[t._v("$buffer")]),t._v("是行中所有的字符串。"),a("code",[t._v("$position")]),t._v("变量可以用来根据你对菜单的设想创建替换范围。"),a("code",[t._v("$position")]),t._v("的值会随着"),a("code",[t._v("only_buffer_difference")]),t._v("是真还是假而改变。当为真时，"),a("code",[t._v("$position")]),t._v("是在菜单激活后插入文本的字符串的起始位置；当值为 false 时，"),a("code",[t._v("$position")]),t._v("表示实际的光标位置。")]),t._v(" "),a("p",[t._v("利用这些信息，你可以设计你的菜单来呈现你所需要的信息，并在需要的位置替换该值。之后，玩转你的菜单唯一额外需要做的事情是定义一个按键绑定，并用于激活你的全新菜单。")]),t._v(" "),a("h3",{attrs:{id:"菜单按键绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#菜单按键绑定"}},[t._v("#")]),t._v(" 菜单按键绑定")]),t._v(" "),a("p",[t._v("如果你想改变两个菜单的默认激活方式，可以通过定义新的按键绑定来实现。例如，接下来的两个按键绑定设置分别将"),a("code",[t._v("Ctrl+t")]),t._v("和"),a("code",[t._v("Ctrl+y")]),t._v("定义为触发自动补全和历史菜单：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n    keybindings: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: completion_menu\n        modifier: control\n        keycode: char_t\n        mode: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vi_insert vi_normal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          until: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menu name: completion_menu "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menupagenext "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name: history_menu\n        modifier: control\n        keycode: char_y\n        mode: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vi_insert vi_normal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        event: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          until: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menu name: history_menu "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" send: menupagenext "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);