import{_ as e,z as t,A as a,a6 as n}from"./framework.3d018c9f.js";const o={},s=n(`<h1 id="command-signature" tabindex="-1"><a class="header-anchor" href="#command-signature" aria-hidden="true">#</a> Command signature</h1><p>nu commands contains a signature section, take <code>str distance</code> as example, the signature is like this:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>Signatures(Cell paths are supported):
  &lt;string&gt; | str distance &lt;string&gt; -&gt; &lt;int&gt;
</code></pre></div><p>The first type name before <code>|</code> describes the type of input pipeline. The command name is followed by the required argument type(s) for the command. The output type is <code>int</code> and given after <code>-&gt;</code>.</p><p><code>(Cell paths are supported)</code> indicates that you can provide cell paths for <code>str distance</code> to apply an operation at the given cell path(s) in a nested structure or table, and replace the column or field with the result, like: <code>ls | str distance &#39;nushell&#39; &#39;name&#39;</code></p><p>Here is another one example, <code>str join</code>:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>Signatures:
  list&lt;string&gt; | str join &lt;string?&gt; -&gt; &lt;string&gt;
</code></pre></div><p>It says that <code>str join</code> command expect input pipeline is a list of string, and take optional <code>string</code> type argument, finally the output type is <code>string</code>.</p><p>Some commands don&#39;t accept or require data through the input pipeline, thus the input type will be <code>&lt;nothing&gt;</code>. The same is true for the output type if the command returns <code>null</code> (e.g. <code>rm</code>).</p>`,9),i=[s];function c(d,r){return t(),a("div",null,i)}const p=e(o,[["render",c],["__file","command_signature.html.vue"]]);export{p as default};
