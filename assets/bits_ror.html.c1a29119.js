import{_ as n,z as r,A as o,X as e,C as s,D as t,a6 as i}from"./framework.3d018c9f.js";const c={},d={id:"frontmatter-title-for-bits",tabindex:"-1"},l=e("a",{class:"header-anchor",href:"#frontmatter-title-for-bits","aria-hidden":"true"},"#",-1),p={class:"command-title"},b=i(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; bits ror (bits) --signed --number-bytes</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>bits</code>: number of bits to rotate right</li><li><code>--signed</code>: always treat input number as a signed number</li><li><code>--number-bytes {string}</code>: the word size in number of bytes, it can be 1, 2, 4, 8, auto, default value <code>8</code></li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Rotate right a number with 60 bits</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token number">17</span> <span class="token operator">|</span> bits ror <span class="token number">60</span>
</code></pre></div><p>Rotate right a list of numbers of one byte</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">15</span> <span class="token number">33</span> <span class="token number">92</span><span class="token punctuation">]</span> <span class="token operator">|</span> bits ror <span class="token number">2</span> <span class="token parameter variable">-n</span> <span class="token number">1</span>
</code></pre></div>`,9);function u(a,h){return r(),o("div",null,[e("h1",d,[l,s(),e("code",null,t(a.$frontmatter.title),1),s(" for bits")]),e("div",p,t(a.$frontmatter.bits),1),b])}const f=n(c,[["render",u],["__file","bits_ror.html.vue"]]);export{f as default};
