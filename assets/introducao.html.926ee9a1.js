import{_ as a,z as s,A as n,a6 as o}from"./framework.3d018c9f.js";const e={},p=o(`<h1 id="introducao" tabindex="-1"><a class="header-anchor" href="#introducao" aria-hidden="true">#</a> Introdução</h1><p>Olá! Seja bem vindo ao projeto Nushell. O objetivo desse projeto é trazer a filosofia de shells do Unix, onde pipes conectam comandos simples, para o estilo moderno de desenvolvimento.</p><p>Nu usa dicas de vários terrenos familiares: shells tradicionais como bash, shells avançados como PowerShell, programação funcional, programação de sistemas, e outros. Porém, mais do que tentar ser &quot;pau pra toda obra&quot;, Nu foca sua energia em fazer poucas coisas muito bem:</p><ul><li>Criar um shell multiplataforma flexível para o programador moderno da era GitHub</li><li>Permitir que você combine aplicações de linha de comando com um shell que entende a estrutura dos seus dados</li><li>Ter o mesmo nível de polimento de UX (experência do usuário) fornecido pelas aplicações CLI modernas</li></ul><p>O jeito mais fácil de ver o que o Nu pode fazer é começar com alguns exemplos, então vamos nessa.</p><p>A primeira coisa que você vai perceber quando rodar um comando como <code>ls</code> é que ao invés de um bloco de texto, você recebe de volta uma tabela estruturada.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span>
----+------------------+-----------+----------+----------+----------------+----------------
 <span class="token comment">#  | name             | type      | readonly | size     | accessed       | modified</span>
----+------------------+-----------+----------+----------+----------------+----------------
 <span class="token number">0</span>  <span class="token operator">|</span> .azure           <span class="token operator">|</span> Directory <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">4.1</span> KB   <span class="token operator">|</span> <span class="token number">2</span> months ago   <span class="token operator">|</span> a week ago
 <span class="token number">1</span>  <span class="token operator">|</span> IMG_1291.jpg     <span class="token operator">|</span> File      <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">115.5</span> KB <span class="token operator">|</span> a month ago    <span class="token operator">|</span> <span class="token number">4</span> months ago
 <span class="token number">2</span>  <span class="token operator">|</span> Cargo.toml       <span class="token operator">|</span> File      <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">3.1</span> KB   <span class="token operator">|</span> <span class="token number">17</span> minutes ago <span class="token operator">|</span> <span class="token number">17</span> minutes ago
 <span class="token number">3</span>  <span class="token operator">|</span> LICENSE          <span class="token operator">|</span> File      <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">1.1</span> KB   <span class="token operator">|</span> <span class="token number">2</span> months ago   <span class="token operator">|</span> <span class="token number">2</span> months ago
 <span class="token number">4</span>  <span class="token operator">|</span> readonly.txt     <span class="token operator">|</span> File      <span class="token operator">|</span> <span class="token builtin class-name">readonly</span> <span class="token operator">|</span> <span class="token operator">&lt;</span>empty<span class="token operator">&gt;</span>  <span class="token operator">|</span> a month ago    <span class="token operator">|</span> a month ago
 <span class="token number">5</span>  <span class="token operator">|</span> target           <span class="token operator">|</span> Directory <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">4.1</span> KB   <span class="token operator">|</span> <span class="token number">2</span> days ago     <span class="token operator">|</span> <span class="token number">15</span> minutes ago
<span class="token punctuation">..</span>.
</code></pre></div><p>Essa tabela faz mais do que somente mostrar o diretório de um jeito diferente. Assim como uma planilha, ela nos permite trabalhar com os dados interativamente.</p><p>A primeira coisa que vamos fazer é ordenar a tabela por nome. Para isso, vamos direcionar a saída do <code>ls</code> para um comando capaz de ordenar tabelas com base no conteúdo de uma coluna.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> <span class="token operator">|</span> sort-by name
----+------------------+-----------+----------+----------+----------------+----------------
 <span class="token comment">#  | name             | type      | readonly | size     | accessed       | modified</span>
----+------------------+-----------+----------+----------+----------------+----------------
 <span class="token number">0</span>  <span class="token operator">|</span> .azure           <span class="token operator">|</span> Directory <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">4.1</span> KB   <span class="token operator">|</span> <span class="token number">2</span> months ago   <span class="token operator">|</span> a week ago
 <span class="token number">1</span>  <span class="token operator">|</span> .cargo           <span class="token operator">|</span> Directory <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">4.1</span> KB   <span class="token operator">|</span> <span class="token number">2</span> months ago   <span class="token operator">|</span> <span class="token number">2</span> months ago
 <span class="token number">2</span>  <span class="token operator">|</span> .editorconfig    <span class="token operator">|</span> File      <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">148</span> B    <span class="token operator">|</span> <span class="token number">2</span> months ago   <span class="token operator">|</span> <span class="token number">2</span> months ago
 <span class="token number">3</span>  <span class="token operator">|</span> .git             <span class="token operator">|</span> Directory <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">4.1</span> KB   <span class="token operator">|</span> <span class="token number">2</span> months ago   <span class="token operator">|</span> <span class="token number">20</span> minutes ago
 <span class="token number">4</span>  <span class="token operator">|</span> .gitignore       <span class="token operator">|</span> File      <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">58</span> B     <span class="token operator">|</span> a week ago     <span class="token operator">|</span> a week ago
 <span class="token number">5</span>  <span class="token operator">|</span> .vscode          <span class="token operator">|</span> Directory <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">4.1</span> KB   <span class="token operator">|</span> a month ago    <span class="token operator">|</span> a month ago
<span class="token punctuation">..</span>.
</code></pre></div><p>Você pode ver que, para fazer isso funcionar, não passamos parâmetros de linha de comando para o <code>ls</code>. Ao invés disso, usamos o comando <code>sort-by</code>, fornecido pelo Nu, para ordenar a saída do comando <code>ls</code>.</p><p>O Nu fornece muitos comandos que trabalham com tabelas. Por exemplo, podemos filtrar o conteúdo da tabela do <code>ls</code> para que ela mostre apenas os arquivos com mais de 4 kilobytes:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> <span class="token operator">|</span> where size <span class="token operator">&gt;</span> 4kb
----+----------------+------+----------+----------+----------------+----------------
 <span class="token comment">#  | name           | type | readonly | size     | accessed       | modified</span>
----+----------------+------+----------+----------+----------------+----------------
 <span class="token number">0</span>  <span class="token operator">|</span> IMG_1291.jpg   <span class="token operator">|</span> File <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">115.5</span> KB <span class="token operator">|</span> a month ago    <span class="token operator">|</span> <span class="token number">4</span> months ago
 <span class="token number">1</span>  <span class="token operator">|</span> README.md      <span class="token operator">|</span> File <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">11.1</span> KB  <span class="token operator">|</span> <span class="token number">2</span> days ago     <span class="token operator">|</span> <span class="token number">2</span> days ago
 <span class="token number">2</span>  <span class="token operator">|</span> IMG_1291.png   <span class="token operator">|</span> File <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">589.0</span> KB <span class="token operator">|</span> a month ago    <span class="token operator">|</span> a month ago
 <span class="token number">3</span>  <span class="token operator">|</span> IMG_1381.jpg   <span class="token operator">|</span> File <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">81.0</span> KB  <span class="token operator">|</span> a month ago    <span class="token operator">|</span> <span class="token number">4</span> months ago
 <span class="token number">4</span>  <span class="token operator">|</span> butterfly.jpeg <span class="token operator">|</span> File <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">4.2</span> KB   <span class="token operator">|</span> a month ago    <span class="token operator">|</span> a month ago
 <span class="token number">5</span>  <span class="token operator">|</span> Cargo.lock     <span class="token operator">|</span> File <span class="token operator">|</span>          <span class="token operator">|</span> <span class="token number">199.6</span> KB <span class="token operator">|</span> <span class="token number">22</span> minutes ago <span class="token operator">|</span> <span class="token number">22</span> minutes ago
</code></pre></div><p>Assim como na filosofia Unix, fazer os comandos conversarem uns com os outros nos permite combiná-los de muitas maneiras diferentes. Vamos ver outro comando:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ps</span>
-----+-------+----------+------+--------------------------------------------------------------------------------
 <span class="token comment">#   | pid   | status   | cpu  | name</span>
-----+-------+----------+------+--------------------------------------------------------------------------------
 <span class="token number">0</span>   <span class="token operator">|</span> <span class="token number">1003</span>  <span class="token operator">|</span> Unknown  <span class="token operator">|</span> <span class="token number">0.00</span> <span class="token operator">|</span>
 <span class="token number">1</span>   <span class="token operator">|</span> <span class="token number">1515</span>  <span class="token operator">|</span> Sleeping <span class="token operator">|</span> <span class="token number">0.00</span> <span class="token operator">|</span> /usr/lib/gnome-settings-daemon/gsd-screensaver-proxy
 <span class="token number">2</span>   <span class="token operator">|</span> <span class="token number">2128</span>  <span class="token operator">|</span> Sleeping <span class="token operator">|</span> <span class="token number">0.00</span> <span class="token operator">|</span> /usr/lib/gnome-settings-daemon/gsd-screensaver-proxy
 <span class="token number">3</span>   <span class="token operator">|</span> <span class="token number">2285</span>  <span class="token operator">|</span> Unknown  <span class="token operator">|</span> <span class="token number">0.00</span> <span class="token operator">|</span>
 <span class="token number">4</span>   <span class="token operator">|</span> <span class="token number">8872</span>  <span class="token operator">|</span> Sleeping <span class="token operator">|</span> <span class="token number">0.00</span> <span class="token operator">|</span> /usr/lib/gvfs/gvfsd-dnssd--spawner:1.23/org/gtk/gvfs/exec_spaw/4
 <span class="token number">5</span>   <span class="token operator">|</span> <span class="token number">1594</span>  <span class="token operator">|</span> Sleeping <span class="token operator">|</span> <span class="token number">0.00</span> <span class="token operator">|</span> /usr/lib/ibus/ibus-engine-simple
</code></pre></div><p>Você deve conhecer o comando <code>ps</code> se já usou Linux. Com ele, vemos uma lista com todos os processos que o sistema está rodando atualmente, seus estados e seus nomes. Também podemos ver a carga de CPU para cada processo.</p><p>E se quiséssemos mostrar somente os processos que estão usando a CPU de fato? Exatamente como fizemos com o comando <code>ls</code> anteriormente, podemos também manipular a tabela que o comando <code>ps</code> nos retorna:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ps</span> <span class="token operator">|</span> where cpu <span class="token operator">&gt;</span> <span class="token number">10</span>
---+-------+----------+-------+-----------------------------
 <span class="token comment"># | pid   | status   | cpu   | name</span>
---+-------+----------+-------+-----------------------------
 <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1992</span>  <span class="token operator">|</span> Sleeping <span class="token operator">|</span> <span class="token number">44.52</span> <span class="token operator">|</span> /usr/bin/gnome-shell
 <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1069</span>  <span class="token operator">|</span> Sleeping <span class="token operator">|</span> <span class="token number">16.15</span> <span class="token operator">|</span>
 <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">24116</span> <span class="token operator">|</span> Sleeping <span class="token operator">|</span> <span class="token number">13.70</span> <span class="token operator">|</span> /opt/google/chrome/chrome
 <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">21976</span> <span class="token operator">|</span> Sleeping <span class="token operator">|</span> <span class="token number">12.67</span> <span class="token operator">|</span> /usr/share/discord/Discord
</code></pre></div><p>Até agora vimos como usar <code>ls</code> e <code>ps</code> para listar arquivos e processos. O Nu também oferece outros comandos que podem criar tabelas com informações úteis. A seguir vamos explorar <code>date</code> e <code>sys</code>.</p><p>Ao executar <code>date</code> obtemos informações sobre a data e hora correntes:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">date</span>
------+-------+-----+------+--------+--------+----------
 year <span class="token operator">|</span> month <span class="token operator">|</span> day <span class="token operator">|</span> hour <span class="token operator">|</span> minute <span class="token operator">|</span> second <span class="token operator">|</span> timezone
------+-------+-----+------+--------+--------+----------
 <span class="token number">2019</span> <span class="token operator">|</span> <span class="token number">8</span>     <span class="token operator">|</span> <span class="token number">17</span>  <span class="token operator">|</span> <span class="token number">19</span>   <span class="token operator">|</span> <span class="token number">20</span>     <span class="token operator">|</span> <span class="token number">50</span>     <span class="token operator">|</span> +12:00
------+-------+-----+------+--------+--------+----------
</code></pre></div><p>E ao executar <code>sys</code> obtemos informações sobre o sistema em que o Nu está rodando:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> sys
----------+----------+-----------+----------+-----------+-----------
 <span class="token function">host</span>     <span class="token operator">|</span> cpu      <span class="token operator">|</span> disks     <span class="token operator">|</span> mem      <span class="token operator">|</span> temp      <span class="token operator">|</span> net
----------+----------+-----------+----------+-----------+-----------
 <span class="token punctuation">[</span>object<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>object<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">3</span> items<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>object<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">3</span> items<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">3</span> items<span class="token punctuation">]</span>
----------+----------+-----------+----------+-----------+-----------
</code></pre></div><p>Essa tabela é um pouco diferente das que vimos antes. O comando <code>sys</code> retorna uma tabela que contém tabelas estruturadas em suas células, ao invés de valores simples. Para dar uma olhada nesses dados, precisamos selecionar a coluna que queremos ver:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> sys <span class="token operator">|</span> get <span class="token function">host</span>
-------+------------------+----------+--------+----------+----------
 name  <span class="token operator">|</span> release          <span class="token operator">|</span> <span class="token function">hostname</span> <span class="token operator">|</span> arch   <span class="token operator">|</span> <span class="token function">uptime</span>   <span class="token operator">|</span> <span class="token function">users</span>
-------+------------------+----------+--------+----------+----------
 Linux <span class="token operator">|</span> <span class="token number">5.0</span>.0-21-generic <span class="token operator">|</span> pop-os   <span class="token operator">|</span> x86_64 <span class="token operator">|</span> <span class="token punctuation">[</span>object<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">1</span> item<span class="token punctuation">]</span>
-------+------------------+----------+--------+----------+----------
</code></pre></div><p>O comando <code>get</code> permite que tenhamos acesso ao conteúdo de uma coluna da tabela. Aqui, estamos olhando para dentro da coluna <code>host</code>, que contém informações a respeito da máquina host em que o Nu está rodando, como nome do SO (sistema operacional), o nome de host, a CPU e outros dados mais. Vamos ver os nomes dos usuários do sistema:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> sys <span class="token operator">|</span> get host.users
jonathan
</code></pre></div><p>Nesse momento só tem um único usuário no sistema, chamado &quot;jonathan&quot;. Note que nós podemos passar um caminho e não apenas o nome de uma coluna. O Nu vai seguir esse caminho até o dado correspondente na tabela.</p><p>Talvez você tenha notado mais alguma coisa de diferente. Ao invés de uma tabela, recebemos apenas um elemento simples: a string &quot;jonathan&quot;. O Nu trabalha tanto com tabelas de dados como com strings, que são uma parte importante da interação com comandos externos ao Nu.</p><p>Vejamos como as strings funcionam fora do Nu. Vamos usar nosso exemplo anterior e executar o comando externo <code>echo</code>, presente na maioria dos SOs:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> sys <span class="token operator">|</span> get host.users <span class="token operator">|</span> <span class="token builtin class-name">echo</span> <span class="token variable">$it</span>
jonathan
</code></pre></div><p>Se isso lhe parece bastante similar ao que tínhamos anteriormente, você tem um olho afiado! É similar, mas com uma diferença importante: chamamos <code>echo</code> com o valor retornado antes. Isso permite que passemos dados para o <code>echo</code> fora do Nu (ou para qualquer outro comando de fora do Nu, como <code>git</code>, por exemplo).</p><p><em>Nota: você pode obter um texto de ajuda para quaisquer comandos embutidos do Nu usando o comando <code>help</code></em>:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">help</span> config
Configuration management.
Usage:
  <span class="token operator">&gt;</span> config <span class="token operator">&lt;</span>subcommand<span class="token operator">&gt;</span> <span class="token punctuation">{</span>flags<span class="token punctuation">}</span>

Subcommands:
  config get -
  config <span class="token builtin class-name">set</span> -
  config set_into -
  config <span class="token function">clear</span> -
  config load -
  config remove -
  config path -

Flags:
  -h, --help: Display this <span class="token builtin class-name">help</span> message
</code></pre></div>`,34),t=[p];function r(c,l){return s(),n("div",null,t)}const u=a(e,[["render",r],["__file","introducao.html.vue"]]);export{u as default};
