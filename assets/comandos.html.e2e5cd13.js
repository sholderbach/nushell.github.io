import{_ as s,z as r,A as d,X as e,C as o,T as n,a6 as t,Q as i}from"./framework.3d018c9f.js";const c={},m=e("h1",{id:"comandos",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#comandos","aria-hidden":"true"},"#"),o(" Comandos")],-1),u=e("p",null,[o("Comandos são os blocos de construção para pipelines em Nu. Eles fazem a ação do pipeline, seja criando dados, mudando dados que fluem de entradas para saídas, ou visualizar dados assim que estes saem do pipeline. Existem dois tipos de comandos: comandos internos, que são comandos feitos para executar dentro do Nu, e comandos externos, que são externos ao Nu e se comunicam com o padrão Unix "),e("code",null,"stdin"),o("/"),e("code",null,"stdout"),o(".")],-1),p=e("h2",{id:"comandos-internos",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#comandos-internos","aria-hidden":"true"},"#"),o(" Comandos internos")],-1),l={href:"https://github.com/nushell/nushell/blob/d30c40b40ebfbb411a503ad7c7bceae8029c6689/crates/nu-source/src/meta.rs#L91",target:"_blank",rel:"noopener noreferrer"},h=e("code",null,"Tagged<Value>",-1),x={href:"https://github.com/nushell/nushell/blob/main/crates/nu-errors/src/lib.rs#L179",target:"_blank",rel:"noopener noreferrer"},b=t('<h3 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h3><p>Comandos usam uma checagem de tipo simples para garantir que os argumentos passados possam ser lidados corretamente. Para permitir isso, cada comando oferece uma Signature que informa o Nu:</p><ul><li>O nome do comando</li><li>Os argumentos posicionauis (eg, em <code>start x y</code> o <code>x</code> e o <code>y</code>são argumentos posicionais)</li><li>Se o comando recebe um número irrestrito de argumentos posicionais adicionais (eg, <code>start a1 a2 a3 ... a99 a100</code>)</li><li>Os argumentos nomeados (eg, <code>start --now</code>)</li><li>Se o comando é um filtro ou a saída</li></ul><p>Com essa informação, um pipeline pode verificar problemas potenciais antes de ser executado.</p><h2 id="comandos-externos" tabindex="-1"><a class="header-anchor" href="#comandos-externos" aria-hidden="true">#</a> Comandos externos</h2><p>Um comando externo é qualquer comando que não é parte dos comandos imbutidos no Nu ou em seus plugins. Se um comando desconhecido pelo Nu é chamado, o sistema subjacente vai ser chamado com os argumentos fornecidos em uma tentativa de invocar esse comando como um programa externo.</p><h2 id="comunicacao-entre-comandos-externos-e-internos" tabindex="-1"><a class="header-anchor" href="#comunicacao-entre-comandos-externos-e-internos" aria-hidden="true">#</a> Comunicação entre comandos externos e internos</h2><h3 id="interno-para-interno" tabindex="-1"><a class="header-anchor" href="#interno-para-interno" aria-hidden="true">#</a> Interno para interno</h3><p>Comandos internos se comunicam usando o valor completo da stream que o Nu fornece, que incluí todos os tipos de arquivos embutidos. Isso incluí a comunicação entre comandos internos e plugins (em ambas as direções).</p><h3 id="interno-para-externo" tabindex="-1"><a class="header-anchor" href="#interno-para-externo" aria-hidden="true">#</a> Interno para externo</h3><p>Comandos internos que enviam texto para comandos externos precisam ter texto (strings) preparados antes do tempo. Se um objeto é enviado diretamente para um comando externo, isso é considerado um erro já que não é possível inferir de que maneira os dados estruturados devem ser representados para o comando externo. É esperado que o usuário. O usuário deve limitar-se a uma célula de dados simples ou usar um dos conversores de tipo de arquivo (como <code>to-json</code>) para converter a tabela em uma representação de string. O comando externo é aberto para que seu <code>stdin</code> seja redirecionado, para que os dados possam ser enviados a ele.</p><h3 id="externo-para-interno" tabindex="-1"><a class="header-anchor" href="#externo-para-interno" aria-hidden="true">#</a> Externo para interno</h3><p>Comandos internos enviam uma série de strings pelo seu <code>stdout</code>. Essas strings são lidas no pipeline e são disponibilizadas para o comando interno seguinte no pipeline, ou expostas para o usuário se o comando externo for o último passo do pipeline.</p><h3 id="externo-para-externo" tabindex="-1"><a class="header-anchor" href="#externo-para-externo" aria-hidden="true">#</a> Externo para externo</h3><p>Comandos externos se comunicam através do <code>stdin</code>/<code>stdout</code>. Quando o Nu detectar essa situação, vai redirecionar o <code>stdout</code> do primeiro comando para o <code>stdin</code> do comando externo seguinte. Dessa forma, o comportamento esperado do pipeline do shell entre comandos externos é mantido.</p>',15);function f(g,_){const a=i("ExternalLinkIcon");return r(),d("div",null,[m,u,p,e("p",null,[o("Todos os comandos dentro do Nu, incluindo plugins, são comandos internos. Comandos internos se comunicam usando streams dos tipos "),e("a",l,[h,n(a)]),o(" e "),e("a",x,[o("ShellError"),n(a)])]),b])}const q=s(c,[["render",f],["__file","comandos.html.vue"]]);export{q as default};
