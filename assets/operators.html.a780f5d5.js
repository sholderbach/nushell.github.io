import{_ as c,z as l,A as p,X as t,C as e,T as d,$ as n,a6 as o,Q as r}from"./framework.3d018c9f.js";const i={},h=o(`<h1 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h1><p>Nushell 支持以下常见的数学、逻辑和字符串操作的运算符：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td>加</td></tr><tr><td><code>-</code></td><td>减</td></tr><tr><td><code>*</code></td><td>乘</td></tr><tr><td><code>/</code></td><td>除</td></tr><tr><td><code>**</code></td><td>指数 (幂)</td></tr><tr><td><code>mod</code></td><td>取模</td></tr><tr><td><code>==</code></td><td>等于</td></tr><tr><td><code>!=</code></td><td>不等于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr><tr><td><code>=~</code></td><td>正则匹配 / 字符串包含另一个字符串</td></tr><tr><td><code>!~</code></td><td>正则不匹配 / 字符串<em>不</em>包含另一个</td></tr><tr><td><code>in</code></td><td>列表包含值</td></tr><tr><td><code>not-in</code></td><td>列表不包含值</td></tr><tr><td><code>not</code></td><td>逻辑取反</td></tr><tr><td><code>&amp;&amp;</code>, <code>and</code></td><td>两个布尔值与运算</td></tr><tr><td><code>||</code>, <code>or</code></td><td>两个布尔值或运算</td></tr><tr><td><code>//</code></td><td>整除并向下取整</td></tr><tr><td><code>**</code></td><td>幂运算</td></tr><tr><td><code>bit-or</code></td><td>按位或</td></tr><tr><td><code>bit-xor</code></td><td>按位异或</td></tr><tr><td><code>bit-and</code></td><td>按位与</td></tr><tr><td><code>bit-shl</code></td><td>按位左移</td></tr><tr><td><code>bit-shr</code></td><td>按位右移</td></tr><tr><td><code>starts-with</code></td><td>字符串开始检测</td></tr><tr><td><code>ends-with</code></td><td>字符串结尾检测</td></tr></tbody></table><p>圆括号可用于分组以指定求值顺序，或用于调用命令并在表达式中使用结果。</p><h2 id="运算符结合顺序" tabindex="-1"><a class="header-anchor" href="#运算符结合顺序" aria-hidden="true">#</a> 运算符结合顺序</h2><p>数学运算的结合顺序如下（从最高优先级到最低）：</p><ul><li>圆括号 (<code>()</code>)</li><li>乘 (<code>*</code>) 、 除 (<code>/</code>) 和幂 (<code>**</code>)</li><li>加 (<code>+</code>) 和减 (<code>-</code>)</li></ul><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; 3 * (1 + 2)
9
</code></pre></div><h2 id="正则表达式-字符串包含运算符" tabindex="-1"><a class="header-anchor" href="#正则表达式-字符串包含运算符" aria-hidden="true">#</a> 正则表达式 / 字符串包含运算符</h2>`,9),u=t("code",null,"=~",-1),_=t("code",null,"!~",-1),g={href:"https://cheatography.com/davechild/cheat-sheets/regular-expressions/",target:"_blank",rel:"noopener noreferrer"},k=o(`<ul><li><code>string =~ pattern</code> 如果 <code>string</code> 包含 <code>pattern</code> 的匹配返回 <strong>true</strong>, 反之返回 <strong>false</strong>；</li><li><code>string !~ pattern</code> 如果 <code>string</code> 包含 <code>pattern</code> 的匹配返回 <strong>false</strong>, 反之返回 <strong>true</strong>；</li></ul><p>例如:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>foobarbaz <span class="token operator">=~</span> bar <span class="token comment"># returns true</span>
foobarbaz <span class="token operator">!</span>~ bar <span class="token comment"># returns false</span>
<span class="token function">ls</span> <span class="token operator">|</span> where name <span class="token operator">=~</span> ^nu <span class="token comment"># returns all files whose names start with &quot;nu&quot;</span>
</code></pre></div>`,3),m={href:"https://docs.rs/regex/latest/regex/struct.Regex.html#method.is_match",target:"_blank",rel:"noopener noreferrer"},b=t("code",null,"is_match()",-1),f=o(`<h2 id="大小写敏感性" tabindex="-1"><a class="header-anchor" href="#大小写敏感性" aria-hidden="true">#</a> 大小写敏感性</h2><p>对字符串进行操作时，运算符通常是区分大小写的。有几种方法可以处理大小写不敏感的场景：</p><ol><li>在正则表达式运算符中，指定<code>(?i)</code>不区分大小写的模式修饰器：</li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;FOO&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;foo&quot;</span> <span class="token comment"># returns false</span>
<span class="token string">&quot;FOO&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;(?i)foo&quot;</span> <span class="token comment"># returns true</span>
</code></pre></div>`,4),x={start:"2"},q=t("code",null,"str contains",-1),v=t("code",null,"--insensitive",-1),w=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;FOO&quot;</span> <span class="token operator">|</span> str contains <span class="token parameter variable">--insensitive</span> <span class="token string">&quot;foo&quot;</span>
</code></pre></div>`,1),O={start:"3"},F=t("code",null,"str downcase",-1),N=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span><span class="token string">&quot;FOO&quot;</span> <span class="token operator">|</span> str downcase<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token string">&quot;Foo&quot;</span> <span class="token operator">|</span> str downcase<span class="token punctuation">)</span>
</code></pre></div>`,1);function L(R,V){const s=r("ExternalLinkIcon"),a=r("RouterLink");return l(),p("div",null,[h,t("p",null,[u,e("和"),_,e("运算符提供了一种更方便的方法来评估 "),t("a",g,[e("正则表达式"),d(s)]),e("。你不需要知道正则表达式就可以使用它们 —— 它们也是检查一个字符串是否包含另一个的简单方法：")]),k,t("p",null,[e("两个运算符都使用了 "),t("a",m,[e("Rust regex 包的 "),b,e(" 函数"),d(s)]),e("。")]),f,t("ol",x,[t("li",null,[e("使用"),d(a,{to:"/book/commands/str_contains.html"},{default:n(()=>[q]),_:1}),e(" 命令的"),v,e("标志：")])]),w,t("ol",O,[t("li",null,[e("在比较前用"),d(a,{to:"/book/commands/str_downcase.html"},{default:n(()=>[F]),_:1}),e("将字符串转换为小写：")])]),N])}const z=c(i,[["render",L],["__file","operators.html.vue"]]);export{z as default};
