import{_ as t,p as o,q as p,Q as a,t as s,v as n,a1 as r}from"./framework-344bb0e4.js";const c={},l={id:"frontmatter-title-for-filters",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title-for-filters","aria-hidden":"true"},"#",-1),d={class:"command-title"},h=r(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; get (cell_path) ...rest --ignore-errors --sensitive</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>cell_path</code>: the cell path to the data</li><li><code>...rest</code>: additional cell paths</li><li><code>--ignore-errors</code> <code>(-i)</code>: when there are empty cells, instead of erroring out, replace them with nothing</li><li><code>--sensitive</code> <code>(-s)</code>: get path in a case sensitive manner</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Get an item from a list</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|</span> get <span class="token number">1</span>
</code></pre></div><p>Get a column from a table</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>A: A0<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">|</span> get A
</code></pre></div><p>Get a cell from a table</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>A: A0<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">|</span> get <span class="token number">0</span>.A
</code></pre></div><p>Extract the name of the 3rd record in a list (same as <code>ls | $in.name</code>)</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> <span class="token operator">|</span> get name.2
</code></pre></div><p>Extract the name of the 3rd record in a list</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">ls</span> <span class="token operator">|</span> get <span class="token number">2</span>.name
</code></pre></div><p>Extract the cpu list from the sys information record</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> sys <span class="token operator">|</span> get cpu
</code></pre></div><p>Getting Path/PATH in a case insensitive way</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$env</span> <span class="token operator">|</span> get paTH
</code></pre></div><p>Getting Path in a case sensitive way, won&#39;t work for &#39;PATH&#39;</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token variable">$env</span> <span class="token operator">|</span> get <span class="token parameter variable">-s</span> Path
</code></pre></div>`,21);function g(e,u){return o(),p("div",null,[a("h1",l,[i,s(),a("code",null,n(e.$frontmatter.title),1),s(" for filters")]),a("div",d,n(e.$frontmatter.filters),1),h])}const k=t(c,[["render",g],["__file","get.html.vue"]]);export{k as default};
