import{_ as s,p as o,q as r,Q as e,t as a,v as n,a1 as i}from"./framework-344bb0e4.js";const d={},c={id:"frontmatter-title-for-strings",tabindex:"-1"},l=e("a",{class:"header-anchor",href:"#frontmatter-title-for-strings","aria-hidden":"true"},"#",-1),h={class:"command-title"},p=i(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; print ...rest --no-newline --stderr</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>...rest</code>: the values to print</li><li><code>--no-newline</code> <code>(-n)</code>: print without inserting a newline for the line ending</li><li><code>--stderr</code> <code>(-e)</code>: print to stderr instead of stdout</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>Unlike <code>echo</code>, this command does not return any value (<code>print | describe</code> will return &quot;nothing&quot;). Since this command has no output, there is no point in piping it with other commands.</p><p><code>print</code> may be used inside blocks of code (e.g.: hooks) to display text during execution without interfering with the pipeline.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Print &#39;hello world&#39;</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> print <span class="token string">&quot;hello world&quot;</span>
</code></pre></div><p>Print the sum of 2 and 3</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> print <span class="token punctuation">(</span><span class="token number">2</span> + <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre></div>`,12);function u(t,m){return o(),r("div",null,[e("h1",c,[l,a(),e("code",null,n(t.$frontmatter.title),1),a(" for strings")]),e("div",h,n(t.$frontmatter.strings),1),p])}const f=s(d,[["render",u],["__file","print.html.vue"]]);export{f as default};
