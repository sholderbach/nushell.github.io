import{_ as t,p,q as o,Q as a,t as n,v as e,a1 as c}from"./framework-344bb0e4.js";const l={},r={id:"frontmatter-title-for-filters",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title-for-filters","aria-hidden":"true"},"#",-1),u={class:"command-title"},k=c(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; all (predicate)</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>predicate</code>: a closure that must evaluate to a boolean</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Check if each row&#39;s status is the string &#39;UP&#39;</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>status<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>UP<span class="token punctuation">]</span> <span class="token punctuation">[</span>UP<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> all <span class="token punctuation">{</span><span class="token operator">|</span>el<span class="token operator">|</span> <span class="token variable">$el</span>.status <span class="token operator">==</span> UP <span class="token punctuation">}</span>
</code></pre></div><p>Check that each item is a string</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span>foo bar <span class="token number">2</span> baz<span class="token punctuation">]</span> <span class="token operator">|</span> all <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token variable">$in</span> <span class="token operator">|</span> describe<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;string&#39;</span> <span class="token punctuation">}</span>
</code></pre></div><p>Check that all values are equal to twice their index</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|</span> enumerate <span class="token operator">|</span> all <span class="token punctuation">{</span><span class="token operator">|</span>i<span class="token operator">|</span> <span class="token variable">$i</span>.item <span class="token operator">==</span> <span class="token variable">$i</span>.index * <span class="token number">2</span> <span class="token punctuation">}</span>
</code></pre></div><p>Check that all of the values are even, using a stored closure</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> cond <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">|</span>el<span class="token operator">|</span> <span class="token punctuation">(</span><span class="token variable">$el</span> mod <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">|</span> all <span class="token variable">$cond</span>
</code></pre></div>`,13);function d(s,h){return p(),o("div",null,[a("h1",r,[i,n(),a("code",null,e(s.$frontmatter.title),1),n(" for filters")]),a("div",u,e(s.$frontmatter.filters),1),k])}const b=t(l,[["render",d],["__file","all.html.vue"]]);export{b as default};
