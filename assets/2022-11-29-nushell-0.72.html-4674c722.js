import{_ as l,M as a,p as r,q as i,R as h,Q as n,t as e,N as o,a1 as s}from"./framework-344bb0e4.js";const c="/assets/0_72_auto_expand-60081fb2.png",u={},d=n("h1",{id:"nushell-0-72",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nushell-0-72","aria-hidden":"true"},"#"),e(" Nushell 0.72")],-1),p=n("p",null,"Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your command line. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful command line pipelines.",-1),_=n("p",null,"Today, we're releasing version 0.72 of Nu. This release includes many new features: mutability, looping, early returns, changes to the core commands, and much more.",-1),m=n("h1",{id:"where-to-get-it",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#where-to-get-it","aria-hidden":"true"},"#"),e(" Where to get it")],-1),g={href:"https://github.com/nushell/nushell/releases/tag/0.72.0",target:"_blank",rel:"noopener noreferrer"},b={href:"https://crates.io/crates/nu",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"cargo install nu",-1),k=s(`<p>NOTE: as part of this release, we are no longer including additional features in <code>--features=extra</code>. With 0.72, SQLite features have moved into the main Nushell installation and dataframe functionality is now part of <code>--features=dataframe</code>.</p><p>As part of this release, we also publish a set of optional plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p><h1 id="themes-of-this-release-new-features" tabindex="-1"><a class="header-anchor" href="#themes-of-this-release-new-features" aria-hidden="true">#</a> Themes of this release / New features</h1><h2 id="try-catch" tabindex="-1"><a class="header-anchor" href="#try-catch" aria-hidden="true">#</a> Try/catch</h2><p>Starting with 0.72, it&#39;s now much easier to run a command that might fail and then handle the failure if it happens.</p><div class="language-text" data-ext="text"><pre class="language-text"><code>try {
    1 / 0
} catch {
    print &quot;look, no crash&quot;
}
</code></pre></div><p>The <code>catch</code> part of the <code>try/catch</code> is optional. Without it, the <code>try</code> block will run, and any error that occurs will be ignored.</p><p>You can also access the error, if one happens, using a closure syntax:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>try {
    1 / 0
} catch {|e|
    print &quot;look, no crash.&quot;
    print $e
}
</code></pre></div><h2 id="auto-expanding-data-views" tabindex="-1"><a class="header-anchor" href="#auto-expanding-data-views" aria-hidden="true">#</a> Auto-expanding data views</h2><p><img src="`+c+`" alt="Expanded data view"></p><p>With the new default config, we now also detect the terminal width and will automatically expand the data view to include more information if it&#39;s available.</p><p>This uses an improved expanding data view capability from 0.70.</p><h2 id="redirection" tabindex="-1"><a class="header-anchor" href="#redirection" aria-hidden="true">#</a> Redirection</h2><p>This release also includes a new way of redirecting the stdout and/or stderr of external commands. This gives easier access to the output streams than was previously possible.</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; cat foo.txt out&gt; bar.txt
</code></pre></div><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; cat missingfilename.txt err&gt; my_error.txt
</code></pre></div><p>You can also create a stream built from the above, allowing one stream to empty and then be followed by the other stream:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; git status out+err&gt; git_status.txt
</code></pre></div><h2 id="closures-blocks" tabindex="-1"><a class="header-anchor" href="#closures-blocks" aria-hidden="true">#</a> Closures/blocks</h2><p>We have now split closures and blocks into two separate value types. A closure can have parameters, can close over variables outside of its scope, and can be passed as a value.</p><p>An example closure:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>ls | each {|it| print $it.name }
</code></pre></div><p>You can also think of creating a custom command like <code>def foo [] { ... }</code> as creating a closure.</p><p>A block is much simpler and is used as the bottom of commands like <code>if</code> and loops.</p><p>An example block:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>if true {
    print &quot;hello!&quot;
}
</code></pre></div><p>Blocks don&#39;t close over (or capture) variables, don&#39;t have parameters, and can&#39;t be passed as a value. Blocks, however, do have one special trick...</p><h2 id="mutation" tabindex="-1"><a class="header-anchor" href="#mutation" aria-hidden="true">#</a> Mutation</h2><p>Starting in this release, you can create local mutable variables. You can create mutable variables using the <code>mut</code> keyword:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>mut x = 1
$x = $x + 100
print $x
</code></pre></div><p>A mutable variable can only live and change in the closure in which it&#39;s created. Blocks, however, have access to the mutable variables in the parent closure. For example, mutating a variable inside of the block used in an <code>if</code> call is valid:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>mut x = 1
if true {
    $x += 1000
}
print $x
</code></pre></div><h2 id="loop-while" tabindex="-1"><a class="header-anchor" href="#loop-while" aria-hidden="true">#</a> Loop/while</h2><p>The 0.72 release also includes a few new looping commands: <code>loop</code> and <code>while</code>.</p><p>The <code>loop</code> command runs a block forever:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>loop {
    print &quot;hit ctrl-c to break out of this example&quot;
}
</code></pre></div><p>The <code>while</code> command will run its block as long as a condition is met:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>mut x = 0
while $x &lt; 10 {
    print $x
    $x += 1
}
</code></pre></div><h2 id="break-continue" tabindex="-1"><a class="header-anchor" href="#break-continue" aria-hidden="true">#</a> Break/continue</h2><p>Loops can now also use the <code>break</code> and <code>continue</code> feature common in many programming languages. <code>break</code> will break out of the current loop. And <code>continue</code> will continue the loop at the next iteration.</p><h2 id="return" tabindex="-1"><a class="header-anchor" href="#return" aria-hidden="true">#</a> Return</h2><p>The 0.72 release also includes the ability to return early from a closure or command.</p><div class="language-text" data-ext="text"><pre class="language-text"><code>def foo [x] {
    if $x &gt; 10 {
        return 1000
    }
    0
}
</code></pre></div><h2 id="command-refinement-simplification-and-elimination" tabindex="-1"><a class="header-anchor" href="#command-refinement-simplification-and-elimination" aria-hidden="true">#</a> Command refinement, simplification, and elimination</h2><p>This release contains many breaking changes to Nu&#39;s built-in commands (sorry!). As we move toward version 1.0 we want to ensure that Nu ships with a small curated set of consistent, well-designed &quot;standard library&quot; commands. This requires taking a hard look at existing commands, and in some cases breaking changes are unavoidable. We expect that this effort will span a few release cycles.</p><h2 id="dataframes-no-longer-included-by-default-smaller-binaries" tabindex="-1"><a class="header-anchor" href="#dataframes-no-longer-included-by-default-smaller-binaries" aria-hidden="true">#</a> Dataframes no longer included by default - smaller binaries</h2><p>Nu&#39;s dataframe support is extensive, impressive, and very useful to users who rely on it. However, it comes at a high cost in terms of compile time, binary size, and complexity. Starting with version 0.72, dataframe commands are no longer included in the release binaries published on GitHub or the default binaries published via package managers (like Homebrew, winget, Scoop). As a result of this change, the main Nu executable is now about 50% smaller.</p>`,48),v=n("code",null,"dataframe",-1),x={href:"https://doc.rust-lang.org/cargo/reference/features.html",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"cargo install nu --features=dataframe",-1),y={id:"allow-reloading-overlay-definitions-kubouch",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#allow-reloading-overlay-definitions-kubouch","aria-hidden":"true"},"#",-1),T={href:"https://github.com/nushell/nushell/pull/7231",target:"_blank",rel:"noopener noreferrer"},A=s(`<p>A common pattern in using overlays is shadowing an existing environment variable, such as PROMPT_COMMAND. However, <code>overlay use</code> would keep loading the value from the first activation. It is best explained with an example. Assume the following module:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>module prompt {
    export-env {
        let-env PROMPT_COMMAND = (date now | into string)
    }
}
</code></pre></div><p>Calling <code>overlay use prompt</code> for the first time changes the prompt to the current time, however, subsequent calls to <code>overlay use</code> won&#39;t change the time. That&#39;s because overlays, once activated, store their state so they can be hidden and restored at later time. To force-reload the environment, we added a new <code>--reload</code> flag: Calling <code>overlay use --reload prompt</code> repeatedly now updates the prompt with the current time each time.</p>`,3),N={id:"virtualenv-activation-changes-kubouch",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#virtualenv-activation-changes-kubouch","aria-hidden":"true"},"#",-1),C={href:"https://github.com/pypa/virtualenv/pull/2422",target:"_blank",rel:"noopener noreferrer"},$={href:"https://github.com/pypa/virtualenv",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"overlay use activate.nu",-1),F=n("code",null,"source activate.nu",-1),z=n("code",null,"source",-1),E={href:"https://github.com/pypa/virtualenv/blob/main/src/virtualenv/activation/nushell/activate.nu",target:"_blank",rel:"noopener noreferrer"},W=n("h1",{id:"breaking-changes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#breaking-changes","aria-hidden":"true"},"#"),e(" Breaking changes")],-1),B=n("li",null,"As mentioned above, dataframe support has been removed from the default Nu binaries.",-1),I={href:"https://github.com/nushell/nushell/pull/7040",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"open foo.db",-1),M=n("code",null,'open foo.db | query db "SELECT * ..."',-1),P=n("code",null,"open foo.db | into db | select * | from table some_table | order-by some_column",-1),D={href:"https://github.com/nushell/nushell/pull/7052",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"is_plugin",-1),j=n("code",null,"is_custom",-1),H=n("code",null,"is_keyword",-1),U=n("code",null,"help commands",-1),V=n("code",null,"command_type",-1),Y={href:"https://github.com/nushell/nushell/pull/7043",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"date format",-1),Q={href:"https://github.com/nushell/nushell/pull/7186",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"first",-1),J={href:"https://github.com/nushell/nushell/pull/7184",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"last",-1),Z={href:"https://github.com/nushell/nushell/pull/7042",target:"_blank",rel:"noopener noreferrer"},ee=n("code",null,"--predicate",-1),ne=n("code",null,"find",-1),te=n("code",null,"where",-1),oe=n("code",null,"find --predicate",-1),se={href:"https://github.com/nushell/nushell/pull/7042",target:"_blank",rel:"noopener noreferrer"},le=n("code",null,"sort-by",-1),ae=n("code",null,"sort",-1),re=n("code",null,"seq",-1),ie=n("code",null,"seq char",-1),he=n("code",null,"seq date",-1),ce=n("code",null,"--separator",-1),ue=n("code",null,"--terminator",-1),de={href:"https://github.com/nushell/nushell/pull/7045",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://github.com/nushell/nushell/pull/7054",target:"_blank",rel:"noopener noreferrer"},_e={href:"https://github.com/nushell/nushell/pull/7096",target:"_blank",rel:"noopener noreferrer"},me=n("code",null,"str join",-1),ge={href:"https://github.com/nushell/nushell/pull/7144",target:"_blank",rel:"noopener noreferrer"},be=n("code",null,"build-string",-1),fe=n("code",null,"+",-1),ke={href:"https://www.nushell.sh/book/working_with_strings.html#string-interpolation",target:"_blank",rel:"noopener noreferrer"},ve=n("code",null,"str join",-1),xe={href:"https://github.com/nushell/nushell/pull/7159",target:"_blank",rel:"noopener noreferrer"},we=n("code",null,"wrap",-1),ye=n("code",null,"seq",-1),qe={href:"https://github.com/nushell/nushell/pull/7124",target:"_blank",rel:"noopener noreferrer"},Te=n("code",null,"url parse",-1),Ae=n("code",null,"url scheme",-1),Ne=n("code",null,"url host",-1),Re=n("code",null,"url path",-1),Ce=n("code",null,"url query",-1),$e=n("code",null,"url parse",-1),Se={href:"https://github.com/nushell/nushell/pull/7198",target:"_blank",rel:"noopener noreferrer"},Fe=n("code",null,"sort",-1),ze=n("code",null,"sort-by",-1),Ee=n("code",null,"str contains",-1),We=n("code",null,"find",-1),Be=n("code",null,"--insensitive",-1),Ie=n("code",null,"--ignore-case",-1),Le=n("code",null,"--ignore-case",-1),Me=n("code",null,"uniq",-1),Pe=n("code",null,"less",-1),De=n("code",null,"grep",-1),Oe=n("code",null,"wget",-1),je=n("h2",{id:"new-boolean-operator-xor-planned-operator-simplification",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#new-boolean-operator-xor-planned-operator-simplification","aria-hidden":"true"},"#"),e(" New boolean operator "),n("code",null,"xor"),e(" - Planned operator simplification")],-1),He=n("code",null,"and",-1),Ue=n("code",null,"&&",-1),Ve=n("code",null,"or",-1),Ye=n("code",null,"||",-1),Ge={href:"https://github.com/nushell/nushell/pull/7242",target:"_blank",rel:"noopener noreferrer"},Qe=n("code",null,"xor",-1),Ke=n("code",null,"bit-and",-1),Je=n("code",null,"bit-xor",-1),Xe=n("code",null,"bit-or",-1),Ze=s(`<p>We are currently considering to deprecate the C-style symbols <code>&amp;&amp;</code>/<code>||</code> in favor of the spelled out <code>and</code>/<code>or</code> to increase consistency and provide more actionable error messages when trying to use <code>&amp;&amp;</code>/<code>||</code> in a similar fashion to bash.</p><h2 id="config-options-have-been-grouped-together" tabindex="-1"><a class="header-anchor" href="#config-options-have-been-grouped-together" aria-hidden="true">#</a> Config options have been grouped together</h2><p>The structure of $env.config (and thus the record used with <code>let-env config = </code> statements in <code>config.nu</code> and other places) has been reorganised. Various options are now grouped into subrecords (similar to <code>table_trim</code>) and had their names shortened. This allows <code>config.nu</code> files to be better structured, and thus easier to edit and read, while also allowing future options to be added without making the</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Your existing <code>config.nu</code> options WILL still work in this version!! However, you will get a warning message if you use the old versions of the options (as you might already be aware). Support for these old options will be dropped in a future Nushell update, so take care to convert your <code>config.nu</code> files when you can.</p></div><p>The changes are:</p><ul><li><code>use_ls_colors</code> and <code>clickable_links</code> have been moved to into an <code>ls</code> subrecord.</li><li><code>rm_always_trash</code> has been moved into the <code>rm</code> record. Further <code>rm</code> config options to accompany it may appear in the future.</li><li><code>cd_with_abbreviations</code> has been moved into a <code>cd</code> record. Further <code>cd</code> config options to accompany it may appear in the future.</li><li><code>history_file_format</code>, <code>sync_history_on_enter</code> and <code>max_history_size</code> have been moved to a <code>history</code> subrecord.</li><li><code>filesize_metric</code> and <code>filesize_format</code> have been moved to a <code>filesize</code> subrecord.</li><li><code>case_sensitive_completions</code>, <code>quick_completions</code>, <code>partial_completions</code> and <code>completion_algorithm</code> have been moved into a <code>completions</code> subrecord.</li><li>The <code>completions</code> subrecord also contains an <code>external</code> subrecord. <ul><li><code>enable_external_completion</code>, <code>max_external_completion_results</code>, and <code>external_completer</code> have been moved into the aforementioned subrecord.</li></ul></li><li><code>table_mode</code>, <code>table_index_mode</code> and the <code>table_trim</code> subrecord have been moved into a <code>table</code> subrecord.</li></ul><p>The new grouped options look like this:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>  ls: <span class="token punctuation">{</span>
    use_ls_colors: <span class="token boolean">true</span> <span class="token comment"># use the LS_COLORS environment variable to colorize output</span>
    clickable_links: <span class="token boolean">true</span> <span class="token comment"># enable or disable clickable links. Your terminal has to support links.</span>
  <span class="token punctuation">}</span>
  rm: <span class="token punctuation">{</span>
    always_trash: <span class="token boolean">true</span> <span class="token comment"># always act as if -t was given. Can be overridden with -p</span>
  <span class="token punctuation">}</span>
  cd: <span class="token punctuation">{</span>
    abbreviations: <span class="token boolean">true</span> <span class="token comment"># allows \`cd s/o/f\` to expand to \`cd some/other/folder\`</span>
  <span class="token punctuation">}</span>
  table: <span class="token punctuation">{</span>
    mode: rounded <span class="token comment"># basic, compact, compact_double, light, thin, with_love, rounded, reinforced, heavy, none, other</span>
    index_mode: always <span class="token comment"># &quot;always&quot; show indexes, &quot;never&quot; show indexes, &quot;auto&quot; = show indexes when a table has &quot;index&quot; column</span>
    trim: <span class="token punctuation">{</span>
      methodology: wrapping <span class="token comment"># wrapping or truncating</span>
      wrapping_try_keep_words: <span class="token boolean">true</span> <span class="token comment"># A strategy used by the &#39;wrapping&#39; methodology</span>
      truncating_suffix: <span class="token string">&quot;...&quot;</span> <span class="token comment"># A suffix used by the &#39;truncating&#39; methodology</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  history: <span class="token punctuation">{</span>
    max_size: <span class="token number">10000</span> <span class="token comment"># Session has to be reloaded for this to take effect</span>
    sync_on_enter: <span class="token boolean">true</span> <span class="token comment"># Enable to share history between multiple sessions, else you have to close the session to write history to file</span>
    file_format: <span class="token string">&quot;plaintext&quot;</span> <span class="token comment"># &quot;sqlite&quot; or &quot;plaintext&quot;</span>
  <span class="token punctuation">}</span>
  completions: <span class="token punctuation">{</span>
    case_sensitive: <span class="token boolean">false</span> <span class="token comment"># set to true to enable case-sensitive completions</span>
    quick: <span class="token boolean">true</span>  <span class="token comment"># set this to false to prevent auto-selecting completions when only one remains</span>
    partial: <span class="token boolean">true</span>  <span class="token comment"># set this to false to prevent partial filling of the prompt</span>
    algorithm: <span class="token string">&quot;prefix&quot;</span>  <span class="token comment"># prefix or fuzzy</span>
    external: <span class="token punctuation">{</span>
      enable: <span class="token boolean">true</span> <span class="token comment"># set to false to prevent nushell looking into $env.PATH to find more suggestions, \`false\` recommended for WSL users as this look up my be very slow</span>
      max_results: <span class="token number">100</span> <span class="token comment"># setting it lower can improve completion performance at the cost of omitting some options</span>
      completer: null <span class="token comment"># check &#39;carapace_completer&#39; above as an example</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  filesize: <span class="token punctuation">{</span>
    metric: <span class="token boolean">true</span> <span class="token comment"># true =&gt; KB, MB, GB (ISO standard), false =&gt; KiB, MiB, GiB (Windows standard)</span>
    format: <span class="token string">&quot;auto&quot;</span> <span class="token comment"># b, kb, kib, mb, mib, gb, gib, tb, tib, pb, pib, eb, eib, zb, zib, auto</span>
  <span class="token punctuation">}</span>
</code></pre></div><p>To output your existing options in the above format (that could be pasted into your config.nu file before you delete the old options), run this code in your copy of Nushell:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$env</span>.config <span class="token operator">|</span> <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> ls: <span class="token punctuation">{</span> use_ls_colors: <span class="token variable">$in</span>.use_ls_colors clickable_links: <span class="token variable">$in</span>.show_clickable_links_in_ls <span class="token punctuation">}</span> rm: <span class="token punctuation">{</span> always_trash: <span class="token variable">$in</span>.rm_always_trash <span class="token punctuation">}</span> cd: <span class="token punctuation">{</span> abbreviations: <span class="token variable">$in</span>.cd_with_abbreviations <span class="token punctuation">}</span> table: <span class="token punctuation">{</span> mode: <span class="token variable">$in</span>.table_mode index_mode: <span class="token variable">$in</span>.table_index_mode trim: <span class="token variable">$in</span>.table_trim <span class="token punctuation">}</span> history: <span class="token punctuation">{</span> max_size: <span class="token variable">$in</span>.max_history_size sync_on_enter: <span class="token variable">$in</span>.sync_history_on_enter file_format: <span class="token variable">$in</span>.history_file_format <span class="token punctuation">}</span> completions: <span class="token punctuation">{</span> case_sensitive: <span class="token variable">$in</span>.case_sensitive_completions quick: <span class="token variable">$in</span>.quick_completions partial: <span class="token variable">$in</span>.partial_completions algorithm:<span class="token variable">$in</span>.completion_algorithm external: <span class="token punctuation">{</span> enable: <span class="token variable">$in</span>.enable_external_completion max_results: <span class="token variable">$in</span>.max_external_completion_results completer:<span class="token variable">$in</span>.external_completer <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">|</span> to nuon <span class="token operator">|</span> str substring <span class="token number">1</span><span class="token punctuation">..</span>-1
</code></pre></div><h2 id="minimum-rust-version-has-bumped-to-1-65" tabindex="-1"><a class="header-anchor" href="#minimum-rust-version-has-bumped-to-1-65" aria-hidden="true">#</a> Minimum Rust version has bumped to 1.65</h2><p>Due to some breakage in dependencies, we&#39;ve gone ahead and bumped the required version of Rust to 1.65, which addresses the issue. Apologies to anyone who is inconvenienced by the bump. We anticipate returning to the Rust-1 versions in the future.</p><h1 id="full-changelog" tabindex="-1"><a class="header-anchor" href="#full-changelog" aria-hidden="true">#</a> Full changelog</h1><h2 id="nushell" tabindex="-1"><a class="header-anchor" href="#nushell" aria-hidden="true">#</a> Nushell</h2>`,14),en={href:"https://github.com/nushell/nushell/pull/7265",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://github.com/nushell/nushell/pull/7263",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://github.com/nushell/nushell/pull/7254",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"help operators",-1),sn={href:"https://github.com/nushell/nushell/pull/7249",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://github.com/nushell/nushell/pull/7227",target:"_blank",rel:"noopener noreferrer"},an={href:"https://github.com/nushell/nushell/pull/7225",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"into record",-1),hn={href:"https://github.com/nushell/nushell/pull/7146",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://github.com/nushell/nushell/pull/7113",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"ansi --osc",-1),dn={href:"https://github.com/nushell/nushell/pull/7103",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://github.com/nushell/nushell/pull/7088",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://github.com/nushell/nushell/pull/7081",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://github.com/nushell/nushell/pull/7069",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://github.com/nushell/nushell/pull/7064",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://github.com/nushell/nushell/pull/7049",target:"_blank",rel:"noopener noreferrer"},fn=n("code",null,"history session",-1),kn={href:"https://github.com/nushell/nushell/pull/7261",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://github.com/nushell/nushell/pull/7228",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://github.com/nushell/nushell/pull/7182",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://github.com/nushell/nushell/pull/7144",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"build-string",-1),qn={href:"https://github.com/nushell/nushell/pull/7123",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"take",-1),An=n("code",null,"first",-1),Nn={href:"https://github.com/nushell/nushell/pull/7098",target:"_blank",rel:"noopener noreferrer"},Rn=n("code",null,"rm",-1),Cn={href:"https://github.com/nushell/nushell/pull/7096",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"seq date",-1),Sn={href:"https://github.com/nushell/nushell/pull/7072",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://github.com/nushell/nushell/pull/7054",target:"_blank",rel:"noopener noreferrer"},zn=n("code",null,"seq char",-1),En={href:"https://github.com/nushell/nushell/pull/7045",target:"_blank",rel:"noopener noreferrer"},Wn={href:"https://github.com/nushell/nushell/pull/7251",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://github.com/nushell/nushell/pull/7242",target:"_blank",rel:"noopener noreferrer"},In=n("code",null,"xor",-1),Ln={href:"https://github.com/nushell/nushell/pull/7214",target:"_blank",rel:"noopener noreferrer"},Mn=n("code",null,"samples/wasm",-1),Pn={href:"https://github.com/nushell/nushell/pull/7186",target:"_blank",rel:"noopener noreferrer"},Dn=n("code",null,"first",-1),On={href:"https://github.com/nushell/nushell/pull/7184",target:"_blank",rel:"noopener noreferrer"},jn=n("code",null,"last",-1),Hn={href:"https://github.com/nushell/nushell/pull/7117",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://github.com/nushell/nushell/pull/7115",target:"_blank",rel:"noopener noreferrer"},Vn=n("code",null,"strip-ansi-escapes",-1),Yn={href:"https://github.com/nushell/nushell/pull/7243",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://github.com/nushell/nushell/pull/7230",target:"_blank",rel:"noopener noreferrer"},Qn=n("code",null,"break",-1),Kn=n("code",null,"continue",-1),Jn=n("code",null,"return",-1),Xn=n("code",null,"loop",-1),Zn={href:"https://github.com/nushell/nushell/pull/7229",target:"_blank",rel:"noopener noreferrer"},et={href:"https://github.com/nushell/nushell/pull/7221",target:"_blank",rel:"noopener noreferrer"},nt={href:"https://github.com/nushell/nushell/pull/7219",target:"_blank",rel:"noopener noreferrer"},tt={href:"https://github.com/nushell/nushell/pull/7206",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://github.com/nushell/nushell/pull/7185",target:"_blank",rel:"noopener noreferrer"},st={href:"https://github.com/nushell/nushell/pull/7180",target:"_blank",rel:"noopener noreferrer"},lt={href:"https://github.com/nushell/nushell/pull/7172",target:"_blank",rel:"noopener noreferrer"},at={href:"https://github.com/nushell/nushell/pull/7162",target:"_blank",rel:"noopener noreferrer"},rt={href:"https://github.com/nushell/nushell/pull/7102",target:"_blank",rel:"noopener noreferrer"},it={href:"https://github.com/nushell/nushell/pull/7101",target:"_blank",rel:"noopener noreferrer"},ht={href:"https://github.com/nushell/nushell/pull/7099",target:"_blank",rel:"noopener noreferrer"},ct={href:"https://github.com/nushell/nushell/pull/7094",target:"_blank",rel:"noopener noreferrer"},ut={href:"https://github.com/nushell/nushell/pull/7092",target:"_blank",rel:"noopener noreferrer"},dt={href:"https://github.com/nushell/nushell/pull/7089",target:"_blank",rel:"noopener noreferrer"},pt={href:"https://github.com/nushell/nushell/pull/7086",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://github.com/nushell/nushell/pull/7075",target:"_blank",rel:"noopener noreferrer"},mt={href:"https://github.com/nushell/nushell/pull/7068",target:"_blank",rel:"noopener noreferrer"},gt={href:"https://github.com/nushell/nushell/pull/7235",target:"_blank",rel:"noopener noreferrer"},bt={href:"https://github.com/nushell/nushell/pull/7232",target:"_blank",rel:"noopener noreferrer"},ft={href:"https://github.com/nushell/nushell/pull/7231",target:"_blank",rel:"noopener noreferrer"},kt={href:"https://github.com/nushell/nushell/pull/7135",target:"_blank",rel:"noopener noreferrer"},vt={href:"https://github.com/nushell/nushell/pull/7134",target:"_blank",rel:"noopener noreferrer"},xt={href:"https://github.com/nushell/nushell/pull/7215",target:"_blank",rel:"noopener noreferrer"},wt={href:"https://github.com/nushell/nushell/pull/7070",target:"_blank",rel:"noopener noreferrer"},yt={href:"https://github.com/nushell/nushell/pull/7213",target:"_blank",rel:"noopener noreferrer"},qt=n("code",null,"fetch",-1),Tt=n("code",null,"post",-1),At={href:"https://github.com/nushell/nushell/pull/7199",target:"_blank",rel:"noopener noreferrer"},Nt=n("code",null,"sort-by",-1),Rt=n("code",null,"path join",-1),Ct=n("code",null,"size",-1),$t={href:"https://github.com/nushell/nushell/pull/7198",target:"_blank",rel:"noopener noreferrer"},St=n("code",null,"--insensitive",-1),Ft=n("code",null,"--ignore-case",-1),zt={href:"https://github.com/nushell/nushell/pull/7197",target:"_blank",rel:"noopener noreferrer"},Et=n("code",null,"mv",-1),Wt={href:"https://github.com/nushell/nushell/pull/7194",target:"_blank",rel:"noopener noreferrer"},Bt=n("code",null,"glob",-1),It={href:"https://github.com/nushell/nushell/pull/7179",target:"_blank",rel:"noopener noreferrer"},Lt={href:"https://github.com/nushell/nushell/pull/7176",target:"_blank",rel:"noopener noreferrer"},Mt=n("code",null,"describe",-1),Pt=n("code",null,"summary",-1),Dt=n("code",null,"describe",-1),Ot={href:"https://github.com/nushell/nushell/pull/7170",target:"_blank",rel:"noopener noreferrer"},jt={href:"https://github.com/nushell/nushell/pull/7165",target:"_blank",rel:"noopener noreferrer"},Ht=n("code",null,"rm",-1),Ut={href:"https://github.com/nushell/nushell/pull/7164",target:"_blank",rel:"noopener noreferrer"},Vt={href:"https://github.com/nushell/nushell/pull/7161",target:"_blank",rel:"noopener noreferrer"},Yt=n("code",null,"run-external",-1),Gt={href:"https://github.com/nushell/nushell/pull/7080",target:"_blank",rel:"noopener noreferrer"},Qt=n("code",null,"to html --list",-1),Kt={href:"https://github.com/nushell/nushell/pull/7063",target:"_blank",rel:"noopener noreferrer"},Jt=n("code",null,"help",-1),Xt={href:"https://github.com/nushell/nushell/pull/7062",target:"_blank",rel:"noopener noreferrer"},Zt=n("code",null,"help",-1),eo=n("code",null,"path exists",-1),no=n("code",null,"path type",-1),to={href:"https://github.com/nushell/nushell/pull/7056",target:"_blank",rel:"noopener noreferrer"},oo=n("code",null,"to nuon",-1),so={href:"https://github.com/nushell/nushell/pull/7212",target:"_blank",rel:"noopener noreferrer"},lo={href:"https://github.com/nushell/nushell/pull/7209",target:"_blank",rel:"noopener noreferrer"},ao=n("code",null,"uniq -i",-1),ro={href:"https://github.com/nushell/nushell/pull/7188",target:"_blank",rel:"noopener noreferrer"},io=n("code",null,"uniq",-1),ho={href:"https://github.com/nushell/nushell/pull/7142",target:"_blank",rel:"noopener noreferrer"},co={href:"https://github.com/nushell/nushell/pull/7124",target:"_blank",rel:"noopener noreferrer"},uo=n("code",null,"url parse",-1),po=n("code",null,"url",-1),_o={href:"https://github.com/nushell/nushell/pull/7058",target:"_blank",rel:"noopener noreferrer"},mo=n("code",null,"open",-1),go={href:"https://github.com/nushell/nushell/pull/7047",target:"_blank",rel:"noopener noreferrer"},bo=n("code",null,"headers",-1),fo={href:"https://github.com/nushell/nushell/pull/7195",target:"_blank",rel:"noopener noreferrer"},ko={href:"https://github.com/nushell/nushell/pull/7178",target:"_blank",rel:"noopener noreferrer"},vo=n("code",null,"last",-1),xo={href:"https://github.com/nushell/nushell/pull/7193",target:"_blank",rel:"noopener noreferrer"},wo={href:"https://github.com/nushell/nushell/pull/7181",target:"_blank",rel:"noopener noreferrer"},yo={href:"https://github.com/nushell/nushell/pull/7177",target:"_blank",rel:"noopener noreferrer"},qo={href:"https://github.com/nushell/nushell/pull/7163",target:"_blank",rel:"noopener noreferrer"},To={href:"https://github.com/nushell/nushell/pull/7156",target:"_blank",rel:"noopener noreferrer"},Ao={href:"https://github.com/nushell/nushell/pull/7079",target:"_blank",rel:"noopener noreferrer"},No={href:"https://github.com/nushell/nushell/pull/7175",target:"_blank",rel:"noopener noreferrer"},Ro={href:"https://github.com/nushell/nushell/pull/7159",target:"_blank",rel:"noopener noreferrer"},Co=n("code",null,"wrap",-1),$o={href:"https://github.com/nushell/nushell/pull/7148",target:"_blank",rel:"noopener noreferrer"},So={href:"https://github.com/nushell/nushell/pull/7143",target:"_blank",rel:"noopener noreferrer"},Fo={href:"https://github.com/nushell/nushell/pull/7132",target:"_blank",rel:"noopener noreferrer"},zo={href:"https://github.com/nushell/nushell/pull/7082",target:"_blank",rel:"noopener noreferrer"},Eo={href:"https://github.com/nushell/nushell/pull/7122",target:"_blank",rel:"noopener noreferrer"},Wo={href:"https://github.com/nushell/nushell/pull/7114",target:"_blank",rel:"noopener noreferrer"},Bo={href:"https://github.com/nushell/nushell/pull/7105",target:"_blank",rel:"noopener noreferrer"},Io={href:"https://github.com/nushell/nushell/pull/7104",target:"_blank",rel:"noopener noreferrer"},Lo={href:"https://github.com/nushell/nushell/pull/7074",target:"_blank",rel:"noopener noreferrer"},Mo={href:"https://github.com/nushell/nushell/pull/7052",target:"_blank",rel:"noopener noreferrer"},Po=n("code",null,"help commands",-1),Do={href:"https://github.com/nushell/nushell/pull/7100",target:"_blank",rel:"noopener noreferrer"},Oo=n("h2",{id:"extension",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#extension","aria-hidden":"true"},"#"),e(" Extension")],-1),jo={href:"https://github.com/nushell/vscode-nushell-lang/pull/70",target:"_blank",rel:"noopener noreferrer"},Ho=n("h2",{id:"documentation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#documentation","aria-hidden":"true"},"#"),e(" Documentation")],-1),Uo={href:"https://github.com/nushell/nushell.github.io/pull/686",target:"_blank",rel:"noopener noreferrer"},Vo=n("code",null,"book/custom_commands.md",-1),Yo={href:"https://github.com/nushell/nushell.github.io/pull/684",target:"_blank",rel:"noopener noreferrer"},Go={href:"https://github.com/nushell/nushell.github.io/pull/683",target:"_blank",rel:"noopener noreferrer"},Qo={href:"https://github.com/nushell/nushell.github.io/pull/681",target:"_blank",rel:"noopener noreferrer"},Ko=n("code",null,"Subexpressions with external commands",-1),Jo={href:"https://github.com/nushell/nushell.github.io/pull/680",target:"_blank",rel:"noopener noreferrer"},Xo={href:"https://github.com/nushell/nushell.github.io/pull/678",target:"_blank",rel:"noopener noreferrer"},Zo=n("code",null,"--ignore-case",-1),es={href:"https://github.com/nushell/nushell.github.io/pull/675",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://github.com/nushell/nushell.github.io/pull/677",target:"_blank",rel:"noopener noreferrer"},ts=n("code",null,"url parse",-1),os={href:"https://github.com/nushell/nushell.github.io/pull/676",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://github.com/nushell/nushell.github.io/pull/674",target:"_blank",rel:"noopener noreferrer"},ls={href:"https://github.com/nushell/nushell.github.io/pull/673",target:"_blank",rel:"noopener noreferrer"},as={href:"https://github.com/nushell/nushell.github.io/pull/669",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://github.com/nushell/nushell.github.io/pull/668",target:"_blank",rel:"noopener noreferrer"},is={href:"https://github.com/nushell/nushell.github.io/pull/656",target:"_blank",rel:"noopener noreferrer"},hs=n("h2",{id:"nu-scripts",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nu-scripts","aria-hidden":"true"},"#"),e(" Nu_Scripts")],-1),cs={href:"https://github.com/nushell/nu_scripts/pull/318",target:"_blank",rel:"noopener noreferrer"},us={href:"https://github.com/nushell/nu_scripts/pull/317",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://github.com/nushell/nu_scripts/pull/316",target:"_blank",rel:"noopener noreferrer"},ps={href:"https://github.com/nushell/nu_scripts/pull/314",target:"_blank",rel:"noopener noreferrer"},_s={href:"https://github.com/nushell/nu_scripts/pull/313",target:"_blank",rel:"noopener noreferrer"},ms={href:"https://github.com/nushell/nu_scripts/pull/312",target:"_blank",rel:"noopener noreferrer"},gs=n("h2",{id:"reedline",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reedline","aria-hidden":"true"},"#"),e(" reedline")],-1),bs={href:"https://github.com/nushell/reedline/pull/517",target:"_blank",rel:"noopener noreferrer"};function fs(ks,vs){const t=a("ExternalLinkIcon");return r(),i("div",null,[d,p,_,h(" more "),m,n("p",null,[e("Nu 0.72 is available as "),n("a",g,[e("pre-built binaries"),o(t)]),e(" or from "),n("a",b,[e("crates.io"),o(t)]),e(". If you have Rust installed you can install it using "),f,e(".")]),k,n("p",null,[e("To continue using dataframe commands, you can build Nu from source using the "),v,e(),n("a",x,[e("Cargo feature"),o(t)]),e(". For example, to install using Cargo: "),w]),n("h2",y,[q,e(" Allow reloading overlay definitions ("),n("a",T,[e("kubouch"),o(t)]),e(")")]),A,n("h2",N,[R,e(" virtualenv activation changes ("),n("a",C,[e("kubouch"),o(t)]),e(")")]),n("p",null,[e("Since the version 20.17.0 of "),n("a",$,[e("virtualenv"),o(t)]),e(", the new way to activate an environment is to call "),S,e(" instead of the "),F,e(". This change is in line with gradual deprecation of "),z,e(" and moving us towards using modules as overlays in more cases. Please, check the "),n("a",E,[e("activation script itself"),o(t)]),e(" for more details.")]),W,n("ul",null,[B,n("li",null,[n("a",I,[e("Nu's SQLite DSL commands have been removed"),o(t)]),e(". "),L,e(" and "),M,e(" still work, but the commands which mapped 1-to-1 with SQL clauses (ex: "),P,e(") have been removed. These commands were an interesting experiment but they didn't work out, and we're removing them to simplify database access in Nu.")]),n("li",null,[n("a",D,[e("The "),O,e(", "),j,e(", and "),H,e(" columns in "),U,e(" have been replaced with a single "),V,e(" column."),o(t)])]),n("li",null,[n("a",Y,[G,e(" now returns an error if not given an input."),o(t)]),e(" Previously it would default to the current time.")]),n("li",null,[n("a",Q,[K,o(t)]),e(" and "),n("a",J,[X,o(t)]),e(" will now return an error if given a negative index. Previously the behavior was undefined and may have returned entries due to an underflow.")]),n("li",null,[n("a",Z,[e("The "),ee,e(" flag has been removed from "),ne,o(t)]),e(". "),te,e(" can be used in all situations where "),oe,e(" was previously used.")]),n("li",null,[n("a",se,[le,e(" now requires a column name to sort by"),o(t)]),e(". To sort lists without specifying a column name, "),ae,e(" can be used.")]),n("li",null,[re,e(", "),ie,e(", and "),he,e(" no longer have "),ce,e(" and "),ue,e(" flags ("),n("a",de,[e("#7045"),o(t)]),e(", "),n("a",pe,[e("#7054"),o(t)]),e(", "),n("a",_e,[e("#7096"),o(t)]),e("). This helps ensure that the return type for those commands is consistent, and "),me,e(" can be used to accomplish the same effect.")]),n("li",null,[n("a",ge,[e("The "),be,e(" command has been removed"),o(t)]),e(". To concatenate strings, use the "),fe,e(" operator, "),n("a",ke,[e("string interpolation"),o(t)]),e(", or "),ve,e(".")]),n("li",null,[n("a",xe,[we,e(" now expands ranges"),o(t)]),e(". It works the same as with lists or "),ye,e(".")]),n("li",null,[n("a",qe,[Te,e(),Ae,e(", "),Ne,e(", "),Re,e(", and "),Ce,e(" commands have been removed. We added the command "),$e,e("."),o(t)]),e(" This new command returns a Record with scheme, username, password, host, path, query, params (as a Record) and fragment.")]),n("li",null,[n("a",Se,[Fe,e(", "),ze,e(", "),Ee,e(" and "),We,e(" have had their "),Be,e(" flags renamed to "),Ie,e("."),o(t)]),e(". "),Le,e(" is used by "),Me,e(", as well as popular external commands like "),Pe,e(", "),De,e(" and "),Oe,e(", so it could be considered a standard flag name.")])]),je,n("p",null,[e("To complement our logical boolean operators "),He,e("/"),Ue,e(" and "),Ve,e("/"),Ye,e(" we "),n("a",Ge,[e("added boolean "),Qe,o(t)]),e(". This is consistent with "),Ke,e(", "),Je,e(", and "),Xe,e(".")]),Ze,n("ul",null,[n("li",null,[e("fdncred created "),n("a",en,[e("update release-pkg.nu to include more recent less version"),o(t)]),e(", and "),n("a",nn,[e("add a more verbose description of operators"),o(t)]),e(", and "),n("a",tn,[e("add "),on,e(" command"),o(t)]),e(", and "),n("a",sn,[e("pin to rust v1.65"),o(t)]),e(", and "),n("a",ln,[e("pin to a version of zstd that doesn't break dataframe compilation"),o(t)]),e(", and "),n("a",an,[e("add "),rn,e(" command"),o(t)]),e(", and "),n("a",hn,[e("update default_config.nu with display_output"),o(t)]),e(", and "),n("a",cn,[e("fix "),un,e(" parameter adding extra semi-colon"),o(t)]),e(", and "),n("a",dn,[e("reset stack size to 10mb vs 2gb"),o(t)]),e(", and "),n("a",pn,[e("fix plugin detection in help commands"),o(t)]),e(", and "),n("a",_n,[e("add commented out mold linker usage"),o(t)]),e(", and "),n("a",mn,[e("use path.try_exist() to fix silent errors"),o(t)]),e(", and "),n("a",gn,[e("bump to dev release 0.71.1"),o(t)]),e(", and "),n("a",bn,[e("return value::int instead of value::record in "),fn,o(t)])]),n("li",null,[e("rgwood created "),n("a",kn,[e("Clean up .sh scripts with shellcheck"),o(t)]),e(", and "),n("a",vn,[e("Make catch block a closure w/ access to error"),o(t)]),e(", and "),n("a",xn,[e("Feature cleanup"),o(t)]),e(", and "),n("a",wn,[e("Remove "),yn,e(" command"),o(t)]),e(", and "),n("a",qn,[e("Return errors on unexpected inputs to "),Tn,e(" and "),An,o(t)]),e(", and "),n("a",Nn,[e("Improve "),Rn,e(" error message when file not found"),o(t)]),e(", and "),n("a",Cn,[e("Remove --separator from "),$n,o(t)]),e(", and "),n("a",Sn,[e("Fix CI failures after PR merge conflicts"),o(t)]),e(", and "),n("a",Fn,[e("Simplify "),zn,o(t)]),e(", and "),n("a",En,[e("Make seq output type consistent (by removing flags)"),o(t)])]),n("li",null,[e("sholderbach created "),n("a",Wn,[e("Add did-you-mean suggestions for operators"),o(t)]),e(", and "),n("a",Bn,[e("Add logical "),In,e(" operator"),o(t)]),e(", and "),n("a",Ln,[e("Remove "),Mn,e(" folder"),o(t)]),e(", and "),n("a",Pn,[e("Error on negative argument of "),Dn,o(t)]),e(", and "),n("a",On,[e("Error on negative argument to "),jn,o(t)]),e(", and "),n("a",Hn,[e("Try --locked install in virtualenv CI tests"),o(t)]),e(", and "),n("a",Un,[e("Remove accidental "),Vn,e(" after #6938"),o(t)])]),n("li",null,[e("jt created "),n("a",Yn,[e("Clean up keyword lines in help"),o(t)]),e(", and "),n("a",Gn,[e("New commands: "),Qn,e(", "),Kn,e(", "),Jn,e(", and "),Xn,o(t)]),e(", and "),n("a",Zn,[e("Remove And and Or pipeline elements"),o(t)]),e(", and "),n("a",et,[e("Add try/catch functionality"),o(t)]),e(", and "),n("a",nt,[e("A set of fixes for stderr redirect"),o(t)]),e(", and "),n("a",tt,[e("Don't redirect stdout when only redirecting stderr"),o(t)]),e(", and "),n("a",ot,[e("Stdout/Stderr redirection"),o(t)]),e(", and "),n("a",st,[e("Move dataframe out of extra"),o(t)]),e(", and "),n("a",lt,[e("Add auto-expanding table view to default config"),o(t)]),e(", and "),n("a",at,[e("Parser refactoring for improving pipelines"),o(t)]),e(", and "),n("a",rt,[e("Add additional assignment operators"),o(t)]),e(", and "),n("a",it,[e("Add support for while loops"),o(t)]),e(", and "),n("a",ht,[e("Allow field assignment into the env variable"),o(t)]),e(", and "),n("a",ct,[e("Update README re: typechecking"),o(t)]),e(", and "),n("a",ut,[e("Fix environment conversions"),o(t)]),e(", and "),n("a",dt,[e("Limited mutable variables"),o(t)]),e(", and "),n("a",pt,[e("Convert 'for' to a statement"),o(t)]),e(", and "),n("a",_t,[e("Split blocks and closures"),o(t)]),e(", and "),n("a",mt,[e("Turn off foreground processes on macOS"),o(t)])]),n("li",null,[e("stormasm created "),n("a",gt,[e('Revert "remove zstd warning message"'),o(t)]),e(", and "),n("a",bt,[e("remove zstd warning message"),o(t)])]),n("li",null,[e("kubouch created "),n("a",ft,[e("Reorder export-env eval and allow reloading an overlay"),o(t)]),e(", and "),n("a",kt,[e("Update PR template and contributing guide"),o(t)]),e(", and "),n("a",vt,[e("Change parser cwd when running a file"),o(t)])]),n("li",null,[e("dmatos2012 created "),n("a",xt,[e("fix color_config crashing on nonstring data"),o(t)]),e(", and "),n("a",wt,[e("fix overflow on negative bytes"),o(t)])]),n("li",null,[e("webbedspace created "),n("a",yt,[e("Fix "),qt,e("/"),Tt,e(" not erroring on 4xx and 5xx statuses"),o(t)]),e(", and "),n("a",At,[e("Fix "),Nt,e(", "),Rt,e(" and "),Ct,e(" error arrows"),o(t)]),e(", and "),n("a",$t,[e("Change all "),St,e(" flags to "),Ft,o(t)]),e(", and "),n("a",zt,[e("Fix "),Et,e(" error message issues (arrows, Windows paths)"),o(t)]),e(", and "),n("a",Wt,[e("Fix "),Bt,e(" error arrows"),o(t)]),e(", and "),n("a",It,[e("Remove erroneous test introduced in #6994"),o(t)]),e(", and "),n("a",Lt,[e("Rename dataframe "),Mt,e(" to "),Pt,e(" so that the normal "),Dt,e(" isn't overloaded"),o(t)]),e(", and "),n("a",Ot,[e("Bugfix: add table_index_mode check that was missing from #6983"),o(t)]),e(", and "),n("a",jt,[e("Edit "),Ht,e(" help messages"),o(t)]),e(", and "),n("a",Ut,[e("Improve CantFindColumn and ColumnAlreadyExists errors"),o(t)]),e(", and "),n("a",Vt,[e("Improve "),Yt,e(`'s "Cannot convert argument to string" message`),o(t)]),e(", and "),n("a",Gt,[Qt,e(" now returns a table"),o(t)]),e(", and "),n("a",Kt,[e("Replace all instances of 'column path' in "),Jt,e(" messages with 'cell path'"),o(t)]),e(", and "),n("a",Xt,[e("Add "),Zt,e(" warnings for "),eo,e(" and "),no,e(" regarding usage"),o(t)]),e(", and "),n("a",to,[e("Fix needs_quotes() in "),oo,e(" (closes #6989)"),o(t)])]),n("li",null,[e("michel-slm created "),n("a",so,[e("Add binstall metadata"),o(t)])]),n("li",null,[e("raccmonteiro created "),n("a",lo,[ao,e(" does not convert to lowercase (#7192)"),o(t)]),e(", and "),n("a",ro,[io,e(" code refactoring"),o(t)]),e(", and "),n("a",ho,[e("avoid test failure caused by locale thousand separator"),o(t)]),e(", and "),n("a",co,[e("new command "),uo,e(" (#6854) and "),po,e(" subcommands tests"),o(t)]),e(", and "),n("a",_o,[e("command "),mo,e(" returns error when does not have parameters (#7048)"),o(t)]),e(", and "),n("a",go,[e("Type validation for "),bo,e(" command (#6918)"),o(t)])]),n("li",null,[e("kamirr created "),n("a",fo,[e("Fix while ctrlc behavior"),o(t)]),e(", and "),n("a",ko,[e("Fix "),vo,e(" memory use"),o(t)])]),n("li",null,[e("nibon7 created "),n("a",xo,[e("Apply clippy fix"),o(t)])]),n("li",null,[e("dependabot[bot] created "),n("a",wo,[e("Bump minimatch from 3.0.4 to 3.1.2 in /samples/wasm"),o(t)])]),n("li",null,[e("WindSoilder created "),n("a",yo,[e("remove block input support in merge"),o(t)]),e(", and "),n("a",qo,[e("Plugin: make friendly error message when python is not found"),o(t)]),e(", and "),n("a",To,[e("Make external command substitution works friendly(like fish shell, trailing ending newlines)"),o(t)]),e(", and "),n("a",Ao,[e("add signature information when get help on one command"),o(t)])]),n("li",null,[e("nanoqsh created "),n("a",No,[e("Fixed json parsing"),o(t)]),e(", and "),n("a",Ro,[e("Consistent "),Co,o(t)])]),n("li",null,[e("zhiburt created "),n("a",$o,[e("fix #7145"),o(t)])]),n("li",null,[e("Decodetalkers created "),n("a",So,[e("fix: ls not show pattern error"),o(t)]),e(", and "),n("a",Fo,[e("chore: chrono_update"),o(t)]),e(", and "),n("a",zo,[e("feat: Use Raw text to save if pipeline data is ExternalStream or String"),o(t)])]),n("li",null,[e("SUPERCILEX created "),n("a",Eo,[e("Restore original do -i behavior and add flags to break down shell vs program errors"),o(t)])]),n("li",null,[e("dandavison created "),n("a",Wo,[e("Add missing strip-ansi-escapes dependency to Cargo.lock"),o(t)]),e(", and "),n("a",Bo,[e("Add input-output types to $nu.scope.commands"),o(t)]),e(", and "),n("a",Io,[e("Refactor create_scope"),o(t)]),e(", and "),n("a",Lo,[e("Fix command_type classification"),o(t)]),e(", and "),n("a",Mo,[e("Collapse some "),Po,e(" columns into a single column"),o(t)])]),n("li",null,[e("denstiny created "),n("a",Do,[e("fix(#7097): let-env should not be able to set PWD"),o(t)])])]),Oo,n("ul",null,[n("li",null,[e("fdncred created "),n("a",jo,[e("updates for nushell 0.72"),o(t)])])]),Ho,n("ul",null,[n("li",null,[e("sholderbach created "),n("a",Uo,[e("Fix tip boxes in "),Vo,o(t)]),e(", and "),n("a",Yo,[e("Fix octal literal mentions"),o(t)]),e(", and "),n("a",Go,[e("Update operator docs"),o(t)])]),n("li",null,[e("WindSoilder created "),n("a",Qo,[e("remove "),Ko,e(" session"),o(t)])]),n("li",null,[e("dmatos2012 created "),n("a",Jo,[e("expand docs on using use with export-env"),o(t)])]),n("li",null,[e("webbedspace created "),n("a",Xo,[e("Release Notes: add note about "),Zo,o(t)]),e(", and "),n("a",es,[e("Add config.nu structure changes"),o(t)])]),n("li",null,[e("raccmonteiro created "),n("a",ns,[e("document "),ts,e(" command"),o(t)])]),n("li",null,[e("casidiablo created "),n("a",os,[e("Fix typo in advanced.md page"),o(t)])]),n("li",null,[e("remlse created "),n("a",ss,[e("Fix variable path expression example"),o(t)])]),n("li",null,[e("nanoqsh created "),n("a",ls,[e("Document wrap update"),o(t)])]),n("li",null,[e("hustcer created "),n("a",as,[e("Refresh commands docs for nu v0.71"),o(t)])]),n("li",null,[e("hbt created "),n("a",rs,[e("fix 404 link"),o(t)])]),n("li",null,[e("jt created "),n("a",is,[e("Create a section for the 0.80 philosophy"),o(t)])])]),hs,n("ul",null,[n("li",null,[e("WindSoilder created "),n("a",cs,[e("fix merge doesnt support block input"),o(t)])]),n("li",null,[e("Joxtacy created "),n("a",us,[e("Add zellij completions"),o(t)])]),n("li",null,[e("Emilgardis created "),n("a",ds,[e("improve cargo completions"),o(t)])]),n("li",null,[e("tshaynik created "),n("a",ps,[e("Add custom completions for nix"),o(t)])]),n("li",null,[e("fdncred created "),n("a",_s,[e("updates get-weather to remove the for loop"),o(t)])]),n("li",null,[e("taooceros created "),n("a",ms,[e("Fix undetected windows environment"),o(t)])])]),gs,n("ul",null,[n("li",null,[e("rgwood created "),n("a",bs,[e("Fix example in CONTRIBUTING.md"),o(t)])])])])}const ws=l(u,[["render",fs],["__file","2022-11-29-nushell-0.72.html.vue"]]);export{ws as default};
