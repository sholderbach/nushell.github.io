import{_ as i,z as r,A as u,X as e,C as a,T as n,$ as c,a6 as t,Q as o}from"./framework.3d018c9f.js";const d={},h=e("h1",{id:"installing-nu",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#installing-nu","aria-hidden":"true"},"#"),a(" Installing Nu")],-1),p={href:"https://github.com/nushell/nushell/releases",target:"_blank",rel:"noopener noreferrer"},g={href:"https://repology.org/project/nushell/versions",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"pre-built-binaries",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pre-built-binaries","aria-hidden":"true"},"#"),a(" Pre-built binaries")],-1),f={href:"https://github.com/nushell/nushell/releases",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"package-managers",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#package-managers","aria-hidden":"true"},"#"),a(" Package managers")],-1),_=e("p",null,"Nu is available via several package managers:",-1),k={href:"https://repology.org/project/nushell/versions",target:"_blank",rel:"noopener noreferrer"},w=e("img",{src:"https://repology.org/badge/vertical-allrepos/nushell.svg",alt:"Packaging status"},null,-1),v={href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"brew install nushell",-1),x=e("p",null,"For Windows:",-1),q={href:"https://docs.microsoft.com/en-us/windows/package-manager/winget/",target:"_blank",rel:"noopener noreferrer"},N=e("code",null,"winget install nushell",-1),T={href:"https://chocolatey.org/",target:"_blank",rel:"noopener noreferrer"},S=e("code",null,"choco install nushell",-1),R={href:"https://scoop.sh/",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,"scoop install nu",-1),L=t('<p>The main Nushell binary is named <code>nu</code> (or <code>nu.exe</code> on Windows). After installation, you can launch it by typing <code>nu</code>.</p><h2 id="build-from-source" tabindex="-1"><a class="header-anchor" href="#build-from-source" aria-hidden="true">#</a> Build from source</h2><p>You can also build Nu from source. First, you will need to set up the Rust toolchain and its dependencies.</p><h3 id="installing-a-compiler-suite" tabindex="-1"><a class="header-anchor" href="#installing-a-compiler-suite" aria-hidden="true">#</a> Installing a compiler suite</h3><p>For Rust to work properly, you&#39;ll need to have a compatible compiler suite installed on your system. These are the recommended compiler suites:</p>',5),W=e("li",null,"Linux: GCC or Clang",-1),H=e("li",null,"macOS: Clang (install Xcode)",-1),I={href:"https://visualstudio.microsoft.com/vs/community/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022",target:"_blank",rel:"noopener noreferrer"},O=e("ul",null,[e("li",null,'Make sure to install the "Desktop development with C++" workload'),e("li",null,"Any Visual Studio edition will work (Community is free)")],-1),V=e("h3",{id:"installing-rust",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#installing-rust","aria-hidden":"true"},"#"),a(" Installing Rust")],-1),B={href:"https://rustup.rs/",target:"_blank",rel:"noopener noreferrer"},Y=t(`<p>Nu currently requires the <strong>latest stable (1.60 or later)</strong> version of Rust. The best way is to let <code>rustup</code> find the correct version for you. When you first open <code>rustup</code> it will ask what version of Rust you wish to install:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>Current installation options:

default <span class="token function">host</span> triple: x86_64-unknown-linux-gnu
default toolchain: stable
profile: default
modify <span class="token environment constant">PATH</span> variable: <span class="token function">yes</span>

<span class="token number">1</span><span class="token punctuation">)</span> Proceed with installation <span class="token punctuation">(</span>default<span class="token punctuation">)</span>
<span class="token number">2</span><span class="token punctuation">)</span> Customize installation
<span class="token number">3</span><span class="token punctuation">)</span> Cancel installation
</code></pre></div><p>Once we are ready, we press 1 and then enter.</p><p>If you&#39;d rather not install Rust via <code>rustup</code>, you can also install it via other methods (e.g. from a package in a Linux distro). Just be sure to install a version of Rust that is 1.60 or later.</p><h3 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies" aria-hidden="true">#</a> Dependencies</h3><h4 id="debian-ubuntu" tabindex="-1"><a class="header-anchor" href="#debian-ubuntu" aria-hidden="true">#</a> Debian/Ubuntu</h4><p>You will need to install the &quot;pkg-config&quot; and &quot;libssl-dev&quot; package:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt</span> <span class="token function">install</span> pkg-config libssl-dev
</code></pre></div><h4 id="rhel-based-distros" tabindex="-1"><a class="header-anchor" href="#rhel-based-distros" aria-hidden="true">#</a> RHEL based distros</h4><p>You will need to install &quot;libxcb&quot;, &quot;openssl-devel&quot; and &quot;libX11-devel&quot;:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> libxcb openssl-devel libX11-devel
</code></pre></div><h4 id="macos" tabindex="-1"><a class="header-anchor" href="#macos" aria-hidden="true">#</a> macOS</h4>`,12),F={href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer"},A=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("brew "),e("span",{class:"token function"},"install"),a(` openssl cmake
`)])])],-1),E={id:"build-using-crates-io",tabindex:"-1"},G=e("a",{class:"header-anchor",href:"#build-using-crates-io","aria-hidden":"true"},"#",-1),X={href:"https://crates.io",target:"_blank",rel:"noopener noreferrer"},j={href:"https://crates.io/",target:"_blank",rel:"noopener noreferrer"},D=e("code",null,"cargo",-1),J=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">cargo</span> <span class="token function">install</span> nu
</code></pre></div><p>That&#39;s it! The <code>cargo</code> tool will do the work of downloading Nu and its source dependencies, building it, and installing it into the cargo bin path so we can run it.</p>`,2),M=e("code",null,"--features=dataframe",-1),$=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">cargo</span> <span class="token function">install</span> nu <span class="token parameter variable">--features</span><span class="token operator">=</span>dataframe
</code></pre></div><p>Once installed, we can run Nu using the <code>nu</code> command:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ nu
/home/jt/Source<span class="token operator">&gt;</span>
</code></pre></div><h3 id="building-from-the-github-repository" tabindex="-1"><a class="header-anchor" href="#building-from-the-github-repository" aria-hidden="true">#</a> Building from the GitHub repository</h3><p>We can also build our own Nu from the latest source on GitHub. This gives us immediate access to the latest features and bug fixes. First, clone the repo:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">git</span> clone https://github.com/nushell/nushell.git
</code></pre></div><p>From there, we can build and run Nu with:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">cd</span> nushell
nushell<span class="token operator">&gt;</span> <span class="token function">cargo</span> build <span class="token parameter variable">--workspace</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cargo</span> run
</code></pre></div><p>You can also build and run Nu in release mode:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>nushell<span class="token operator">&gt;</span> <span class="token function">cargo</span> build <span class="token parameter variable">--release</span> <span class="token parameter variable">--workspace</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cargo</span> run <span class="token parameter variable">--release</span>
</code></pre></div><p>People familiar with Rust may wonder why we do both a &quot;build&quot; and a &quot;run&quot; step if &quot;run&quot; does a build by default. This is to get around a shortcoming of the new <code>default-run</code> option in Cargo, and ensure that all plugins are built, though this may not be required in the future.</p><h2 id="setting-the-login-shell-nix" tabindex="-1"><a class="header-anchor" href="#setting-the-login-shell-nix" aria-hidden="true">#</a> Setting the login shell (*nix)</h2><p><strong>!!! Nu is still in development, and may not be stable for everyday use. !!!</strong></p>`,13),z={href:"https://linux.die.net/man/1/chsh",target:"_blank",rel:"noopener noreferrer"},U=e("code",null,"chsh",-1),Q=e("code",null,"/etc/shells",-1),K=e("code",null,"shells",-1),Z=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`chsh: /home/username/.cargo/bin/nu is an invalid shell
`)])],-1),ee=e("p",null,[a("You can add Nu to the list of allowed shells by appending your Nu binary to the "),e("code",null,"shells"),a(" file. The path to add can be found with the command "),e("code",null,"which nu"),a(", usually it is "),e("code",null,"$HOME/.cargo/bin/nu"),a(".")],-1),ae=e("h2",{id:"setting-the-default-shell-windows-terminal",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#setting-the-default-shell-windows-terminal","aria-hidden":"true"},"#"),a(" Setting the default shell (Windows Terminal)")],-1),ne={href:"https://github.com/microsoft/terminal",target:"_blank",rel:"noopener noreferrer"},se=e("code",null,"nu",-1),te=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;guid&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;{2b372ca1-1ee2-403d-a839-6d63077ad871}&quot;</span>,
  <span class="token string">&quot;hidden&quot;</span><span class="token builtin class-name">:</span> false,
  <span class="token string">&quot;icon&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;https://www.nushell.sh/icon.png&quot;</span>,
  <span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Nu Shell&quot;</span>,
  <span class="token string">&quot;commandline&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;nu.exe&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>to <code>&quot;profiles&quot;</code> in your Terminal Settings (JSON-file). The last thing to do is to change the <code>&quot;defaultProfile&quot;</code> to:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;defaultProfile&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;{2b372ca1-1ee2-403d-a839-6d63077ad871}&quot;</span>,
</code></pre></div><p>Now, <code>nu</code> should load on startup of the Windows Terminal.</p>`,4);function oe(le,ie){const s=o("ExternalLinkIcon"),l=o("RouterLink");return r(),u("div",null,[h,e("p",null,[a("There are lots of ways to get Nu up and running. You can download pre-built binaries from our "),e("a",p,[a("release page"),n(s)]),a(", "),e("a",g,[a("use your favourite package manager"),n(s)]),a(", or build from source.")]),b,e("p",null,[a("Nu binaries are published for Linux, macOS, and Windows "),e("a",f,[a("with each GitHub release"),n(s)]),a(". Just download, extract the binaries, then copy them to a location on your PATH.")]),m,_,e("p",null,[e("a",k,[w,n(s)])]),e("p",null,[a("For macOS and Linux, "),e("a",v,[a("Homebrew"),n(s)]),a(" is a popular choice ("),y,a(").")]),x,e("ul",null,[e("li",null,[e("a",q,[a("Winget"),n(s)]),a(" ("),N,a(")")]),e("li",null,[e("a",T,[a("Chocolatey"),n(s)]),a(" ("),S,a(")")]),e("li",null,[e("a",R,[a("Scoop"),n(s)]),a(" ("),C,a(")")])]),L,e("ul",null,[W,H,e("li",null,[a("Windows: MSVC (install "),e("a",I,[a("Visual Studio"),n(s)]),a(" or the "),e("a",P,[a("Visual Studio Build Tools"),n(s)]),a(") "),O])]),V,e("p",null,[a("If we don't already have Rust on our system, the best way to install it is via "),e("a",B,[a("rustup"),n(s)]),a(". Rustup is a way of managing Rust installations, including managing using different Rust versions.")]),Y,e("p",null,[a("Using "),e("a",F,[a("Homebrew"),n(s)]),a(', you will need to install "openssl" and "cmake" using:')]),A,e("h3",E,[G,a(" Build using "),e("a",X,[a("crates.io"),n(s)])]),e("p",null,[a("Nu releases are published as source to the popular Rust package registry "),e("a",j,[a("crates.io"),n(s)]),a(". This makes it easy to build+install the latest Nu release with "),D,a(":")]),J,e("p",null,[a("If you want to install with support for "),n(l,{to:"/book/dataframes.html"},{default:c(()=>[a("dataframes")]),_:1}),a(", you can install using the "),M,a(" flag.")]),$,e("p",null,[a("To set the login shell you can use the "),e("a",z,[U,n(s)]),a(" command. Some Linux distributions have a list of valid shells located in "),Q,a(" and will disallow changing the shell until Nu is in the whitelist. You may see an error similar to the one below if you haven't updated the "),K,a(" file:")]),Z,ee,ae,e("p",null,[a("If you are using "),e("a",ne,[a("Windows Terminal"),n(s)]),a(" you can set "),se,a(" as your default shell by adding:")]),te])}const ue=i(d,[["render",oe],["__file","installation.html.vue"]]);export{ue as default};
