import{_ as n,p as o,q as r,Q as e,t as s,v as t,a1 as l}from"./framework-344bb0e4.js";const d={},i={id:"frontmatter-title-for-core",tabindex:"-1"},h=e("a",{class:"header-anchor",href:"#frontmatter-title-for-core","aria-hidden":"true"},"#",-1),c={class:"command-title"},p=l(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; help modules ...rest --find</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>...rest</code>: the name of module to get help on</li><li><code>--find {string}</code>: string to find in module names and usage</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>When requesting help for a single module, its commands and aliases will be highlighted if they are also available in the current scope. Commands/aliases that were imported under a different name (such as with a prefix after <code>use some-module</code>) will be highlighted in parentheses.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>show all modules</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">help</span> modules
</code></pre></div><p>show help for single module</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">help</span> modules my-module
</code></pre></div><p>search for string in module names and usages</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">help</span> modules <span class="token parameter variable">--find</span> my-module
</code></pre></div>`,13);function m(a,u){return o(),r("div",null,[e("h1",i,[h,s(),e("code",null,t(a.$frontmatter.title),1),s(" for core")]),e("div",c,t(a.$frontmatter.core),1),p])}const f=n(d,[["render",m],["__file","help_modules.html.vue"]]);export{f as default};
