import{_ as r,z as s,A as i,X as e,C as a,T as n,a6 as t,Q as d}from"./framework.3d018c9f.js";const l="/assets/0_17_0_playground.3b94060d.png",c={},h=e("h1",{id:"nushell-0-17-0",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#nushell-0-17-0","aria-hidden":"true"},"#"),a(" Nushell 0.17.0")],-1),u=e("p",null,"Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.",-1),m=e("p",null,"Today, we're releasing 0.17 of Nu, the first Nu to include WebAssembly, custom keybindings, and much more.",-1),p=e("h1",{id:"where-to-get-it",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#where-to-get-it","aria-hidden":"true"},"#"),a(" Where to get it")],-1),g={href:"https://github.com/nushell/nushell/releases/tag/0.17.0",target:"_blank",rel:"noopener noreferrer"},f={href:"https://crates.io/crates/nu",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"cargo install nu",-1),w=t('<p>If you want more goodies, you can install <code>cargo install nu --features=stable</code>.</p><p>As part of this release, we also publish a set of plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p><h1 id="what-s-new" tabindex="-1"><a class="header-anchor" href="#what-s-new" aria-hidden="true">#</a> What&#39;s New</h1><h2 id="webassembly-support-jonathandturner-and-upcoming-wasm-based-playground-jzaefferer-jonathandturner" tabindex="-1"><a class="header-anchor" href="#webassembly-support-jonathandturner-and-upcoming-wasm-based-playground-jzaefferer-jonathandturner" aria-hidden="true">#</a> WebAssembly support (jonathandturner) and upcoming wasm-based playground (jzaefferer, jonathandturner)</h2><p><img src="'+l+'" alt="image of a wasm-based Nushell playground"></p><p><em>Nu, now in your browser</em></p><p>As part of on-going cleanup and portability work, with 0.17 it&#39;s now possible to build Nu and target WebAssembly, allowing you to run Nu in the browser and call into it from JavaScript. This is the first (experimental!) step in building towards an interactive playground and possibly more. We&#39;re hoping to talk more about this porting process in the coming days.</p>',7),y={href:"https://www.nushell.sh/demo/",target:"_blank",rel:"noopener noreferrer"},k=e("h2",{id:"custom-keybindings-jonathandturner",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#custom-keybindings-jonathandturner","aria-hidden":"true"},"#"),a(" Custom keybindings (jonathandturner)")],-1),x=e("p",null,"Nushell now also supports custom keybindings. To configure your keybindings, you can add a keybindings.yml file beside your config file. You can find out the location for your system using:",-1),v=e("div",{class:"language-text","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`> echo $nu.keybinding-path
/home/jonathan/.config/nu/keybindings.yml
`)])],-1),_={href:"https://github.com/nushell/nushell/blob/main/docs/sample_config/keybindings.yml",target:"_blank",rel:"noopener noreferrer"},j=t(`<h2 id="new-commands" tabindex="-1"><a class="header-anchor" href="#new-commands" aria-hidden="true">#</a> New commands</h2><h3 id="benchmark-pag4k" tabindex="-1"><a class="header-anchor" href="#benchmark-pag4k" aria-hidden="true">#</a> <code>benchmark</code> (pag4k)</h3><p>The new <code>benchmark</code> command will time a block and output the length of time it took to run:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; benchmark { echo &quot;hello&quot; }
363us 528ns
</code></pre></div><h3 id="str-reverse-josephtlyons" tabindex="-1"><a class="header-anchor" href="#str-reverse-josephtlyons" aria-hidden="true">#</a> <code>str reverse</code> (JosephTLyons)</h3><p>The <code>str reverse</code> command will reverse the characters of a string:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; echo &quot;hello world&quot; | str reverse
dlrow olleh
</code></pre></div><h3 id="str-length-jonathandturner" tabindex="-1"><a class="header-anchor" href="#str-length-jonathandturner" aria-hidden="true">#</a> <code>str length</code> (jonathandturner)</h3><p>On a related note, you can now also get the length of a string.</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; echo &quot;hello world&quot; | str length
11
</code></pre></div><h3 id="str-from-bailey-layzer" tabindex="-1"><a class="header-anchor" href="#str-from-bailey-layzer" aria-hidden="true">#</a> <code>str from</code> (bailey-layzer)</h3><p>In previous versions of Nu, it was difficult to format numbers for precision and digit grouping. Starting with 0.17, there&#39;s now a new <code>str from</code> subcommand to help with this.</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; echo 1.456123 | str from --decimals 2
1.46

&gt; echo 1234567 | str from --group-digits
1,234,567
</code></pre></div><h3 id="math-stddev-and-math-variance-amousa11" tabindex="-1"><a class="header-anchor" href="#math-stddev-and-math-variance-amousa11" aria-hidden="true">#</a> <code>math stddev</code> and <code>math variance</code> (amousa11)</h3><p>You can now calculate standard deviation and variance in your numeric datasets:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; echo [ 1 2 3 4 5 ] | math stddev
1.414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641573

&gt; echo [ 1 2 3 4 5 ] | math variance
2
</code></pre></div><h3 id="if-jonathandturner" tabindex="-1"><a class="header-anchor" href="#if-jonathandturner" aria-hidden="true">#</a> <code>if</code> (jonathandturner)</h3><p>Ever want to run one block if a condition was true and another if the condition was false? Now you can!</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; echo 0..5 | if $it &gt; 3 { echo big } { echo small }
───┬───────
 0 │ small
 1 │ small
 2 │ small
 3 │ small
 4 │ big
 5 │ big
───┴───────
</code></pre></div><p>The keen observer might notice we&#39;re stealthly sneaking in more commands you might use in future scripting.</p><h3 id="split-chars-jonathandturner" tabindex="-1"><a class="header-anchor" href="#split-chars-jonathandturner" aria-hidden="true">#</a> <code>split chars</code> (jonathandturner)</h3><p>To more easily work with the characters in a string, you can now split the characters into separate items:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; echo &quot;hello&quot; | split chars
───┬───
 0 │ h
 1 │ e
 2 │ l
 3 │ l
 4 │ o
───┴───
</code></pre></div><h3 id="move-column-andrasio" tabindex="-1"><a class="header-anchor" href="#move-column-andrasio" aria-hidden="true">#</a> <code>move column</code> (andrasio)</h3><p>Finally, you can now move columns in your table:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; ls
───┬──────────────────────────────────┬──────┬─────────┬────────────
 # │ name                             │ type │ size    │ modified
───┼──────────────────────────────────┼──────┼─────────┼────────────
 0 │ 0.bootstrap.js                   │ File │ 30.9 KB │ 1 hour ago
 1 │ 46a44c28f12d33243854.module.wasm │ File │  5.4 MB │ 1 hour ago
 2 │ bootstrap.js                     │ File │ 16.3 KB │ 1 hour ago
 3 │ index.html                       │ File │  1.4 KB │ 1 hour ago
───┴──────────────────────────────────┴──────┴─────────┴────────────

&gt; ls | move column size --before type
───┬──────────────────────────────────┬─────────┬──────┬────────────
 # │ name                             │ size    │ type │ modified
───┼──────────────────────────────────┼─────────┼──────┼────────────
 0 │ 0.bootstrap.js                   │ 30.9 KB │ File │ 1 hour ago
 1 │ 46a44c28f12d33243854.module.wasm │  5.4 MB │ File │ 1 hour ago
 2 │ bootstrap.js                     │ 16.3 KB │ File │ 1 hour ago
 3 │ index.html                       │  1.4 KB │ File │ 1 hour ago
───┴──────────────────────────────────┴─────────┴──────┴────────────
</code></pre></div><h2 id="early-draft-of-a-new-website-pontaoski" tabindex="-1"><a class="header-anchor" href="#early-draft-of-a-new-website-pontaoski" aria-hidden="true">#</a> Early draft of a new website (pontaoski)</h2>`,27),N={href:"https://github.com/nushell/website_exploration",target:"_blank",rel:"noopener noreferrer"},T=t('<h2 id="command-improvements" tabindex="-1"><a class="header-anchor" href="#command-improvements" aria-hidden="true">#</a> Command improvements</h2><ul><li><code>sort-by</code> can now sort with case-insensitivity (JosephTLyons)</li><li><code>alias</code> of externals should now be improved (bailey-layzer)</li><li><code>history</code> should be able to correctly store more than 100 rows now (fdncred)</li><li><code>to html</code> will now output pretty hex when given a binary it doesn&#39;t recognize (jonathandturner), and now has color themes (fdncred)</li><li><code>uniq</code> can now also work with simple values (k-brk)</li><li>Completions now have their own abstraction, so we can more easily improve them in the future (thegedge)</li><li><code>table</code> now prints column numbers a bit more orderly way (Porges)</li><li><code>str</code> made parsing more strict, to let the user know if there were parsing errors (andrasio)</li><li><code>group-by</code> can now take a block that allows for deep keying for grouping (andrasio)</li><li>autoenv (directory-specific environments) can now run commands on entry/exit (samhedin)</li><li><code>str trim</code> can now take an optional character to trim (bailey-layzer)</li><li>duration pretty-print is now easier to read (jonathandturner), durations are also now stored as nanoseconds internally (pag4k)</li><li><code>str substring</code> supports more argument types now (andrasio)</li><li>completions for filepaths should now work in more cases (almindor)</li><li><code>rm</code> now gives nicer output (arashout)</li><li><code>ls -f</code> will now do a better job of keeping the tables aligned (arashout)</li><li>general parser improvements (philip-peterson, jonathandturner)</li><li><code>each</code> can now number the outputs it creates, allowing for enumeration (jonathandturner)</li></ul><h2 id="bug-fixes-tests-and-more-philip-peterson-josephtlyons-u5surf-thegedge-arashout-jonathandturner" tabindex="-1"><a class="header-anchor" href="#bug-fixes-tests-and-more-philip-peterson-josephtlyons-u5surf-thegedge-arashout-jonathandturner" aria-hidden="true">#</a> Bug fixes, tests and more (philip-peterson, JosephTLyons, u5surf, thegedge, arashout, jonathandturner)</h2><p>Parsing now has more test coverage. Internal code cleanups. Command description copy paste issues fixed. Ensure that the MaybeTextCodec gets properly cleared. Fix documentation to renamed subcommands and <code>str to-int</code>. Internally more commands were moved to process their streams lazily. We can now generate documentation from reading the built-in docs on each command.</p><h2 id="breaking-changes" tabindex="-1"><a class="header-anchor" href="#breaking-changes" aria-hidden="true">#</a> Breaking changes</h2><h3 id="bson-and-sqlite-move-to-plugins-jonathandturner" tabindex="-1"><a class="header-anchor" href="#bson-and-sqlite-move-to-plugins-jonathandturner" aria-hidden="true">#</a> BSON and Sqlite move to plugins (jonathandturner)</h3><p>As part of the portability work, we&#39;ve moved the <code>from bson</code>, <code>to bson</code>, <code>from sqlite</code> and <code>to sqlite</code> out of internal commands and into plugins. The functionality should remain largely unchanged, with the only difference being that you&#39;ll need to install these plugins for this functionality.</p><h3 id="command-renames" tabindex="-1"><a class="header-anchor" href="#command-renames" aria-hidden="true">#</a> Command renames</h3><ul><li><code>calc</code> is now <code>math eval</code> to join the <code>math</code> subcommand family (coolshaurya)</li><li><code>keep-until</code> and <code>keep-while</code> are now subcommands: <code>keep until</code> and <code>keep while</code> (k-brk)</li><li><code>skip-while</code> and <code>skip-until</code> are also now subcommands: <code>skip while</code> and skip until (andrasio)</li><li><code>config</code> is now split into subcommands based on the command flag, eg) <code>config set</code>, <code>config get</code>, etc. (ritobanrc, jonathandturner)</li></ul><h2 id="looking-forward" tabindex="-1"><a class="header-anchor" href="#looking-forward" aria-hidden="true">#</a> Looking forward</h2><p>Just when we think we&#39;ll slow down a little, we&#39;re surprised by the amount of community feedback and help. This release covered nearly 4(!) pages of pull requests. Not bad for three weeks for work!</p><p>There&#39;s some parser work coming up to help continue removing roadblocks to using Nu as a scripting language, improving completions, and generally continuing to polish Nu.</p>',12);function q(z,B){const o=d("ExternalLinkIcon");return s(),i("div",null,[h,u,m,p,e("p",null,[a("Nu 0.17.0 is available as "),e("a",g,[a("pre-built binaries"),n(o)]),a(" or from "),e("a",f,[a("crates.io"),n(o)]),a(". If you have Rust installed you can install it using "),b,a(".")]),w,e("p",null,[a("If you'd like to see what we're building, "),e("a",y,[a("check it out"),n(o)]),a(".")]),k,x,v,e("p",null,[a("You can base your custom file off this "),e("a",_,[a("example keybindings file"),n(o)]),a(".")]),j,e("p",null,[a("We're working on a refresh of our website. If you're interested in giving it a look, we've got an "),e("a",N,[a("early draft started"),n(o)]),a(". If you'd like to help us with the design, reach out over github or discord.")]),T])}const F=r(c,[["render",q],["__file","2020-07-21-nushell_0_17_0.html.vue"]]);export{F as default};
