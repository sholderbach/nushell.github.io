import{_ as n,p as o,q as r,Q as a,t as s,v as e,a1 as c}from"./framework-344bb0e4.js";const p={},i={id:"frontmatter-title-for-bytes",tabindex:"-1"},l=a("a",{class:"header-anchor",href:"#frontmatter-title-for-bytes","aria-hidden":"true"},"#",-1),d={class:"command-title"},h=c(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; bytes starts-with (pattern) ...rest</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>pattern</code>: the pattern to match</li><li><code>...rest</code>: for a data structure input, check if bytes at the given cell paths start with the pattern</li></ul><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Checks if binary starts with <code>0x[1F FF AA]</code></p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> 0x<span class="token punctuation">[</span>1F FF AA AA<span class="token punctuation">]</span> <span class="token operator">|</span> bytes starts-with 0x<span class="token punctuation">[</span>1F FF AA<span class="token punctuation">]</span>
</code></pre></div><p>Checks if binary starts with <code>0x[1F]</code></p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> 0x<span class="token punctuation">[</span>1F FF AA AA<span class="token punctuation">]</span> <span class="token operator">|</span> bytes starts-with 0x<span class="token punctuation">[</span>1F<span class="token punctuation">]</span>
</code></pre></div><p>Checks if binary starts with <code>0x[1F]</code></p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> 0x<span class="token punctuation">[</span>1F FF AA AA<span class="token punctuation">]</span> <span class="token operator">|</span> bytes starts-with 0x<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span>
</code></pre></div>`,11);function u(t,b){return o(),r("div",null,[a("h1",i,[l,s(),a("code",null,e(t.$frontmatter.title),1),s(" for bytes")]),a("div",d,e(t.$frontmatter.bytes),1),h])}const f=n(p,[["render",u],["__file","bytes_starts-with.html.vue"]]);export{f as default};
