import{_ as l,z as s,A as a,W as i,X as t,C as e,T as o,a6 as r,Q as d}from"./framework.3d018c9f.js";const h={},c=t("h1",{id:"nushell-0-68",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#nushell-0-68","aria-hidden":"true"},"#"),e(" Nushell 0.68")],-1),u=t("p",null,"Nushell, or Nu for short, is a new shell that takes a modern, structured approach to your commandline. It works seamlessly with the data from your filesystem, operating system, and a growing number of file formats to make it easy to build powerful commandline pipelines.",-1),p=t("p",null,"Today, we're releasing version 0.68 of Nu. This is release a rework of modules, a new source-env command, overlay changes, and more.",-1),m=t("h1",{id:"where-to-get-it",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#where-to-get-it","aria-hidden":"true"},"#"),e(" Where to get it")],-1),_={href:"https://github.com/nushell/nushell/releases/tag/0.68.0",target:"_blank",rel:"noopener noreferrer"},g={href:"https://crates.io/crates/nu",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"cargo install nu",-1),b=r('<p>If you want all the built-in goodies, you can install <code>cargo install nu --features=extra</code>.</p><p>As part of this release, we also publish a set of optional plugins you can install and use with Nu. To install, use <code>cargo install nu_plugin_&lt;plugin name&gt;</code>.</p><h1 id="themes-of-this-release" tabindex="-1"><a class="header-anchor" href="#themes-of-this-release" aria-hidden="true">#</a> Themes of this release</h1><h2 id="major-changes-rework-of-modules-and-environment" tabindex="-1"><a class="header-anchor" href="#major-changes-rework-of-modules-and-environment" aria-hidden="true">#</a> (Major changes!) Rework of modules and environment</h2><p><em>Some of the changes here have far-reaching consequences and it might take a while to get the book up to speed.</em></p>',5),k={href:"https://hackmd.io/@nucore/r1zilyw6q",target:"_blank",rel:"noopener noreferrer"},v={id:"source-becomes-source-env-jt-kubouch",tabindex:"-1"},y=t("a",{class:"header-anchor",href:"#source-becomes-source-env-jt-kubouch","aria-hidden":"true"},"#",-1),w=t("code",null,"source",-1),x=t("code",null,"source-env",-1),A={href:"https://github.com/nushell/nushell/pull/6277",target:"_blank",rel:"noopener noreferrer"},T=t("p",null,[t("em",null,[t("strong",null,[e("Note: Since the release we found out that "),t("code",null,"source-env"),e(" with a dynamic path is not viable and had to make it require a constant string or path, just like "),t("code",null,"source"),e(". The command still works as described below but as of 0.68.1, "),t("code",null,"source-env"),e(" requires a static path as an argument. This is not where our design was supposed to land and we'll be searching for alternatives. We might also postpone the deprecation of the existing module commands beyond 0.69. Thanks for understanding.")])])],-1),N=t("code",null,"source",-1),j=t("code",null,"source ($env.PWD | path join foo.nu)",-1),S=t("code",null,"#include",-1),I=t("code",null,"use",-1),R={href:"https://www.nushell.sh/book/thinking_in_nu.html#think-of-nushell-as-a-compiled-language",target:"_blank",rel:"noopener noreferrer"},F=t("p",null,[e("To address this pitfall, we decided to change "),t("code",null,"source"),e(" to "),t("code",null,"source-env"),e(" which can be used to bring in the environment, but not custom commands, aliases and variables anymore. "),t("s",null,[e("A benefit of doing so is that it is now "),t("strong",null,"possible to pass dynamic paths"),e(": "),t("code",null,"source-env ($env.PWD | path join foo.nu)"),e(" would bring in the environment from the "),t("code",null,"foo.nu"),e(" file.")])],-1),C=t("em",null,[e("How do you bring in commands and aliases without "),t("code",null,"source"),e("?")],-1),W=t("code",null,"use",-1),q={href:"https://www.nushell.sh/book/modules.html",target:"_blank",rel:"noopener noreferrer"},$={href:"https://www.nushell.sh/book/overlays.html",target:"_blank",rel:"noopener noreferrer"},M=t("p",null,[t("em",null,[e("How do you bring in variables without "),t("code",null,"source"),e("?")]),e(" This is not possible anymore. A workaround is to define a command in your module that will return the value you want.")],-1),O=t("p",null,[t("code",null,"source"),e(" still continues to work in this release but will be removed in 0.69. In 0.69, we will also change all config files to be modules, not plain scripts.")],-1),z={id:"module-envrionment-changes-kubouch-kubouch",tabindex:"-1"},B=t("a",{class:"header-anchor",href:"#module-envrionment-changes-kubouch-kubouch","aria-hidden":"true"},"#",-1),P={href:"https://github.com/nushell/nushell/pull/6355",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/nushell/nushell/pull/6382",target:"_blank",rel:"noopener noreferrer"},E=t("p",null,"The way to define environment variables from modules used to be",-1),D=t("div",{class:"language-text","data-ext":"text"},[t("pre",{class:"language-text"},[t("code",null,`> module spam {
    export env FOO { 'bar' }
}

> use spam
`)])],-1),Y=t("code",null,"$env.'spam FOO'",-1),H=t("code",null,"use",-1),L=t("code",null,"source",-1),V={href:"https://github.com/nushell/nushell/pull/6162",target:"_blank",rel:"noopener noreferrer"},G=t("code",null,"use",-1),J=r(`<p>Long story short, <code>use</code> (and <code>hide</code>) now handle <strong>only custom commands and aliases</strong>, not environment variables anymore. If you want to bring both environment and commands/aliases, you need to use the <code>source-env</code> and <code>use</code> commands separately (or use overlays).</p><p>Also, we simplified defining the environment in modules. Instead of defining environment variables with <code>export env</code> individually, there is a single <code>export-env { }</code> block for the whole module (see the example in the next section).</p><p>If you call <code>source-env</code> on that module, the <code>export-env</code> command will get evaluated and its environment kept in the current scope.</p><div class="language-text" data-ext="text"><pre class="language-text"><code># spam.nu

export-env {
    let-env FOO = &#39;foo&#39;
    let-env BAR = &#39;bar&#39;
}
</code></pre></div><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; source-env spam.nu

&gt; $env.FOO
foo

&gt; $env.BAR
bar
</code></pre></div><p>This release makes <code>export env</code> deprecated and it will be removed in 0.69.</p>`,6),X={id:"syntax-unification-kubouch",tabindex:"-1"},Q=t("a",{class:"header-anchor",href:"#syntax-unification-kubouch","aria-hidden":"true"},"#",-1),K={href:"https://github.com/nushell/nushell/pull/6357",target:"_blank",rel:"noopener noreferrer"},Z=r("<p>Previously, modules had some reserved syntax that was not valid in scripts: the <code>export</code> keywords. In this release, we allowed <code>export</code> keywords to be used in scripts (they do nothing: <code>export def</code> acts as <code>def</code> etc.) and thus <strong>script syntax is a superset of module syntax</strong>.</p><p>Modules can now be evaluated. This is the reason the above example with <code>source-env</code> works: Thanks to the unified syntax, <code>source-env</code> will evaluate the module which evaluates the <code>export-env</code> command inside the module.</p><p>Another nice thing about the unified syntax is that commands like <code>nu-highlight</code> now do not break or do not need to rely on heuristics if they are asked to parse a module code. Any module code is a valid script code.</p>",3),ee={id:"overlay-changes-kubouch-windsoilder",tabindex:"-1"},te=t("a",{class:"header-anchor",href:"#overlay-changes-kubouch-windsoilder","aria-hidden":"true"},"#",-1),ne={href:"https://github.com/nushell/nushell/pull/6425",target:"_blank",rel:"noopener noreferrer"},oe={href:"https://github.com/nushell/nushell/pull/6375",target:"_blank",rel:"noopener noreferrer"},re=r(`<p><code>overlay add</code> and <code>overlay remove</code> are now renamed to <code>overlay use</code> and <code>overlay hide</code> (see the breaking changes later).</p><p>The functionality of these commands remains largely the same with one change being that <code>overlay use</code> will now evaluate the <code>export-env { }</code> block. Consider this module:</p><div class="language-text" data-ext="text"><pre class="language-text"><code># spam.nu

export-env {
    load-env {
        FOO: &#39;foo&#39;
        BAR: &#39;bar&#39;
    }
}

export def foo [] { &#39;foo&#39; }
export alias bar = &#39;bar&#39;
</code></pre></div><p>instead of:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; source-env spam.nu

&gt; use spam.nu *
</code></pre></div><p>you can do just:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; overlay use spam.nu
</code></pre></div><p>You can think of <code>overlay use</code> as calling <code>source-env</code> and <code>use</code> in one command and putting the result into a new overlay.</p><h3 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h3><p>Here is a table that summarizes the changes:</p><table><thead><tr><th>command</th><th>previous release (0.67)</th><th>this release (0.68)</th><th>next release (0.69)</th></tr></thead><tbody><tr><td><code>source</code></td><td>imports everything into the current scope</td><td>same (deprecated)</td><td>removed</td></tr><tr><td><code>source-env</code></td><td>N/A</td><td>imports environment variables</td><td>same</td></tr><tr><td><code>use</code></td><td>imports environment variables, commands and aliases</td><td>same</td><td>imports only commands and aliases</td></tr><tr><td><code>hide</code></td><td>hides enviornment variables, commands and aliases</td><td>same</td><td>hides only commands and aliases</td></tr><tr><td><code>hide-env</code></td><td>hides environment variables</td><td>same</td><td>same</td></tr><tr><td><code>export env</code></td><td>defines a single environment variable in a module</td><td>same</td><td>removed</td></tr><tr><td><code>export-env</code></td><td>N/A</td><td>(in a module) defines the envrionment for the whole module</td><td>same</td></tr><tr><td><code>export-env</code></td><td>N/A</td><td>(in a script) when evaluated, preserves the environment from the block</td><td>same</td></tr><tr><td><code>export ...</code></td><td>only allowed in a module</td><td>allowed in a script as well</td><td>same</td></tr><tr><td><code>config.nu</code></td><td>plain script</td><td>plain script</td><td>module</td></tr><tr><td><code>env.nu</code></td><td>plain script</td><td>plain script</td><td>module</td></tr><tr><td><code>login.nu</code></td><td>plain script</td><td>plain script</td><td>module</td></tr></tbody></table>`,11),le={id:"allow-parentheses-around-command-signatures-jt",tabindex:"-1"},se=t("a",{class:"header-anchor",href:"#allow-parentheses-around-command-signatures-jt","aria-hidden":"true"},"#",-1),ae={href:"https://github.com/nushell/nushell/pull/6444",target:"_blank",rel:"noopener noreferrer"},ie=t("p",null,[e("To bring more familiarity with other languages, we added the option to define command signatures with parentheses "),t("code",null,"()"),e(" instad of only braces "),t("code",null,"[]"),e(":")],-1),de=t("div",{class:"language-text","data-ext":"text"},[t("pre",{class:"language-text"},[t("code",null,`def foo (x: int) { $x + 100 }
`)])],-1),he=t("p",null,[e("The square braces "),t("code",null,"[]"),e(" continue to work as well. This change is intended to test it with a larger audience to decide which one we prefer the most.")],-1),ce={id:"we-added-a-new-command-str-distance-which-implements-the-levenshtein-alorithm-fdncred",tabindex:"-1"},ue=t("a",{class:"header-anchor",href:"#we-added-a-new-command-str-distance-which-implements-the-levenshtein-alorithm-fdncred","aria-hidden":"true"},"#",-1),pe=t("code",null,"str distance",-1),me={href:"https://github.com/nushell/nushell/pull/6383",target:"_blank",rel:"noopener noreferrer"},_e=r(`<p>This example shows that the <code>edit distance</code> is one edit step difference using the Levenshtein algorithm.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;nushell&#39;</span> <span class="token operator">|</span> str distance <span class="token string">&#39;nutshell&#39;</span>
╭──────────┬───╮
│ distance │ <span class="token number">1</span> │
╰──────────┴───╯
</code></pre></div><p>We&#39;d eventually like to add more similarity comparision functionality to nushell.</p>`,3),ge={id:"we-added-string-duration-conversion-to-named-durations-fdncred",tabindex:"-1"},fe=t("a",{class:"header-anchor",href:"#we-added-string-duration-conversion-to-named-durations-fdncred","aria-hidden":"true"},"#",-1),be={href:"https://github.com/nushell/nushell/pull/6406",target:"_blank",rel:"noopener noreferrer"},ke=r(`<p>The new parameter on <code>into duration</code> <code>--convert</code> allows you to convert from string durations into named durations.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&#39;7min&#39;</span> <span class="token operator">|</span> into duration <span class="token parameter variable">--convert</span> sec
<span class="token number">420</span> sec
</code></pre></div>`,2),ve={id:"external-completions-experimental-herlon214-rsteube",tabindex:"-1"},ye=t("a",{class:"header-anchor",href:"#external-completions-experimental-herlon214-rsteube","aria-hidden":"true"},"#",-1),we={href:"https://github.com/nushell/nushell/pull/6295",target:"_blank",rel:"noopener noreferrer"},xe=t("code",null,"external_completer",-1),Ae={href:"https://github.com/rsteube/carapace",target:"_blank",rel:"noopener noreferrer"},Te=t("p",null,"This example should enable carapace external completions:",-1),Ne=t("div",{class:"language-text","data-ext":"text"},[t("pre",{class:"language-text"},[t("code",null,`# config.nu
let carapace_completer = {|spans|
    carapace $spans.0 nushell $spans | from json
}

# The default config record. This is where much of your global configuration is setup.
let-env config = {
    # ... your config
    external_completer: $carapace_completer
}
`)])],-1),je={href:"https://github.com/nushell/nushell/issues/6378",target:"_blank",rel:"noopener noreferrer"},Se=t("p",null,"It is also possible to extend the parameters passed to the completer block that are required for other tools than carapace, such as cursor position etc. In theory, this feature could allow you to utilize any existing completions library from any shell, such as bash, as long as you can somehow get a list of completions from them.",-1),Ie=t("h1",{id:"breaking-changes",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#breaking-changes","aria-hidden":"true"},"#"),e(" Breaking changes")],-1),Re={id:"renaming-of-all-to-all-any-to-any-and-empty-to-is-empty-adamijak",tabindex:"-1"},Fe=t("a",{class:"header-anchor",href:"#renaming-of-all-to-all-any-to-any-and-empty-to-is-empty-adamijak","aria-hidden":"true"},"#",-1),Ce=t("code",null,"all?",-1),We=t("code",null,"all",-1),qe=t("code",null,"any?",-1),$e=t("code",null,"any",-1),Me=t("code",null,"empty?",-1),Oe=t("code",null,"is-empty",-1),ze={href:"https://github.com/nushell/nushell/pull/6464",target:"_blank",rel:"noopener noreferrer"},Be=r("<p>The <code>?</code> suffix on the three commands <code>all?</code>, <code>any?</code>, <code>empty?</code> did not indicate a specific meaning across other commands. Other commands returning a boolean value, like <code>str contains</code> for example, don&#39;t carry the suffix. To remove a potential source of confusion and to free up the <code>?</code> for potential use in a more meaningful semantic context, we decided to remove the suffix and rename <code>empty?</code> to <code>is-empty</code> to clarify its role.</p><p>Please update your scripts accordingly:</p><table><thead><tr><th>old name</th><th>new name</th></tr></thead><tbody><tr><td><code>all?</code></td><td><code>all</code></td></tr><tr><td><code>any?</code></td><td><code>any</code></td></tr><tr><td><code>empty?</code></td><td><code>is-empty</code></td></tr></tbody></table>",3),Pe={id:"renaming-overlay-commands-windsoilder",tabindex:"-1"},Ue=t("a",{class:"header-anchor",href:"#renaming-overlay-commands-windsoilder","aria-hidden":"true"},"#",-1),Ee=t("code",null,"overlay",-1),De={href:"https://github.com/nushell/nushell/pull/6375",target:"_blank",rel:"noopener noreferrer"},Ye=r("<table><thead><tr><th>old name</th><th>new name</th></tr></thead><tbody><tr><td><code>overlay add</code></td><td><code>overlay use</code></td></tr><tr><td><code>overlay remove</code></td><td><code>overlay hide</code></td></tr></tbody></table><p>The main reason is that the <code>overlay remove</code> does not <em>really</em> remove the overlay. It deactivates it and it can be resumed again from where you left off. Therefore, we felt like <code>hide</code> is a better word to match this functionality and aligns with our existing <code>use</code> and <code>hide</code> keywords.</p>",2),He={id:"path-split-behaviour-for-windows-paths-merelymyself",tabindex:"-1"},Le=t("a",{class:"header-anchor",href:"#path-split-behaviour-for-windows-paths-merelymyself","aria-hidden":"true"},"#",-1),Ve=t("code",null,"path split",-1),Ge={href:"https://github.com/nushell/nushell/pull/6485",target:"_blank",rel:"noopener noreferrer"},Je=r('<p><code>path split</code> no longer returns drive letters and the root directory as seperate elements for absolute Windows paths.</p><p>Previously, <code> `C:\\temp` | path split</code> returned <code>C:</code>, <code>\\</code>, and <code>temp</code>. Now it returns <code>C:\\</code> and <code>temp</code>.</p><h1 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps" aria-hidden="true">#</a> Next Steps</h1>',3),Xe={href:"https://kubouch.notion.site/4db276462ba24704919edb4cc4b86be7?v=10506505557f4f7b9a65155128c04250",target:"_blank",rel:"noopener noreferrer"},Qe=t("p",null,"Some time was spent trying out possible new syntax directions but we were not confident to release them yet. In the next release we'll see a removal of features deprecated in this release and we'll continue to push ahead for the 0.80.",-1),Ke=t("h1",{id:"full-changelog",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#full-changelog","aria-hidden":"true"},"#"),e(" Full changelog")],-1),Ze=t("h2",{id:"nushell",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#nushell","aria-hidden":"true"},"#"),e(" Nushell")],-1),et={href:"https://github.com/nushell/nushell/pull/6501",target:"_blank",rel:"noopener noreferrer"},tt={href:"https://github.com/nushell/nushell/pull/6446",target:"_blank",rel:"noopener noreferrer"},nt=t("code",null,"$",-1),ot={href:"https://github.com/nushell/nushell/pull/6444",target:"_blank",rel:"noopener noreferrer"},rt={href:"https://github.com/nushell/nushell/pull/6434",target:"_blank",rel:"noopener noreferrer"},lt=t("code",null,"$",-1),st={href:"https://github.com/nushell/nushell/pull/6277",target:"_blank",rel:"noopener noreferrer"},at=t("code",null,"source",-1),it=t("code",null,"source-env",-1),dt={href:"https://github.com/nushell/nushell/pull/6497",target:"_blank",rel:"noopener noreferrer"},ht={href:"https://github.com/nushell/nushell/pull/6480",target:"_blank",rel:"noopener noreferrer"},ct={href:"https://github.com/nushell/nushell/pull/6398",target:"_blank",rel:"noopener noreferrer"},ut=t("code",null,"str distance",-1),pt={href:"https://github.com/nushell/nushell/pull/6390",target:"_blank",rel:"noopener noreferrer"},mt={href:"https://github.com/nushell/nushell/pull/6380",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://github.com/nushell/nushell/pull/6485",target:"_blank",rel:"noopener noreferrer"},gt={href:"https://github.com/nushell/nushell/pull/6463",target:"_blank",rel:"noopener noreferrer"},ft={href:"https://github.com/nushell/nushell/pull/6391",target:"_blank",rel:"noopener noreferrer"},bt=t("code",null,"to nuon",-1),kt={href:"https://github.com/nushell/nushell/pull/6379",target:"_blank",rel:"noopener noreferrer"},vt=t("code",null,"to nuon",-1),yt={href:"https://github.com/nushell/nushell/pull/6376",target:"_blank",rel:"noopener noreferrer"},wt=t("code",null,"to nuon",-1),xt={href:"https://github.com/nushell/nushell/pull/6257",target:"_blank",rel:"noopener noreferrer"},At=t("code",null,"command",-1),Tt={href:"https://github.com/nushell/nushell/pull/6483",target:"_blank",rel:"noopener noreferrer"},Nt={href:"https://github.com/nushell/nushell/pull/6456",target:"_blank",rel:"noopener noreferrer"},jt={href:"https://github.com/nushell/nushell/pull/6479",target:"_blank",rel:"noopener noreferrer"},St=t("code",null,"nu_plugin_",-1),It={href:"https://github.com/nushell/nushell/pull/6472",target:"_blank",rel:"noopener noreferrer"},Rt={href:"https://github.com/nushell/nushell/pull/6442",target:"_blank",rel:"noopener noreferrer"},Ft={href:"https://github.com/nushell/nushell/pull/6437",target:"_blank",rel:"noopener noreferrer"},Ct={href:"https://github.com/nushell/nushell/pull/6426",target:"_blank",rel:"noopener noreferrer"},Wt={href:"https://github.com/nushell/nushell/pull/6421",target:"_blank",rel:"noopener noreferrer"},qt={href:"https://github.com/nushell/nushell/pull/6420",target:"_blank",rel:"noopener noreferrer"},$t={href:"https://github.com/nushell/nushell/pull/6384",target:"_blank",rel:"noopener noreferrer"},Mt={href:"https://github.com/nushell/nushell/pull/6375",target:"_blank",rel:"noopener noreferrer"},Ot={href:"https://github.com/nushell/nushell/pull/6273",target:"_blank",rel:"noopener noreferrer"},zt={href:"https://github.com/nushell/nushell/pull/6477",target:"_blank",rel:"noopener noreferrer"},Bt={href:"https://github.com/nushell/nushell/pull/6475",target:"_blank",rel:"noopener noreferrer"},Pt={href:"https://github.com/nushell/nushell/pull/6474",target:"_blank",rel:"noopener noreferrer"},Ut=t("code",null,"overlay use",-1),Et={href:"https://github.com/nushell/nushell/pull/6425",target:"_blank",rel:"noopener noreferrer"},Dt={href:"https://github.com/nushell/nushell/pull/6382",target:"_blank",rel:"noopener noreferrer"},Yt={href:"https://github.com/nushell/nushell/pull/6357",target:"_blank",rel:"noopener noreferrer"},Ht={href:"https://github.com/nushell/nushell/pull/6355",target:"_blank",rel:"noopener noreferrer"},Lt=t("code",null,"export-env",-1),Vt={href:"https://github.com/nushell/nushell/pull/6464",target:"_blank",rel:"noopener noreferrer"},Gt=t("code",null,"all?",-1),Jt=t("code",null,"any?",-1),Xt=t("code",null,"empty?",-1),Qt={href:"https://github.com/nushell/nushell/pull/6462",target:"_blank",rel:"noopener noreferrer"},Kt={href:"https://github.com/nushell/nushell/pull/6448",target:"_blank",rel:"noopener noreferrer"},Zt={href:"https://github.com/nushell/nushell/pull/6457",target:"_blank",rel:"noopener noreferrer"},en={href:"https://github.com/nushell/nushell/pull/6454",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://github.com/nushell/nushell/pull/6449",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://github.com/nushell/nushell/pull/6423",target:"_blank",rel:"noopener noreferrer"},on={href:"https://github.com/nushell/nushell/pull/6406",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://github.com/nushell/nushell/pull/6395",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://github.com/nushell/nushell/pull/6394",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://github.com/nushell/nushell/pull/6383",target:"_blank",rel:"noopener noreferrer"},an={href:"https://github.com/nushell/nushell/pull/6370",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://github.com/nushell/nushell/pull/6369",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://github.com/nushell/nushell/pull/6363",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://github.com/nushell/nushell/pull/6333",target:"_blank",rel:"noopener noreferrer"},un={href:"https://github.com/nushell/nushell/pull/6453",target:"_blank",rel:"noopener noreferrer"},pn=t("code",null,"which",-1),mn={href:"https://github.com/nushell/nushell/pull/6439",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://github.com/nushell/nushell/pull/6404",target:"_blank",rel:"noopener noreferrer"},gn=t("code",null,"cp",-1),fn={href:"https://github.com/nushell/nushell/pull/6396",target:"_blank",rel:"noopener noreferrer"},bn=t("code",null,"cp",-1),kn={href:"https://github.com/nushell/nushell/pull/6371",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://github.com/nushell/nushell/pull/6430",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://github.com/nushell/nushell/pull/6418",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://github.com/nushell/nushell/pull/6411",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://github.com/nushell/nushell/pull/6409",target:"_blank",rel:"noopener noreferrer"},An={href:"https://github.com/nushell/nushell/pull/6400",target:"_blank",rel:"noopener noreferrer"},Tn=t("code",null,".exe",-1),Nn={href:"https://github.com/nushell/nushell/pull/6385",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://github.com/nushell/nushell/pull/6366",target:"_blank",rel:"noopener noreferrer"},Sn=t("code",null,"$nu.config-path",-1),In=t("code",null,"$nu.env-path",-1),Rn=t("code",null,"EngineState",-1),Fn={href:"https://github.com/nushell/nushell/pull/6365",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://github.com/nushell/nushell/pull/6354",target:"_blank",rel:"noopener noreferrer"},Wn=t("code",null,"kill",-1),qn={href:"https://github.com/nushell/nushell/pull/6412",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://github.com/nushell/nushell/pull/6389",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://github.com/nushell/nushell/pull/6295",target:"_blank",rel:"noopener noreferrer"},On={href:"https://github.com/nushell/nushell/pull/6361",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://github.com/nushell/nushell/pull/6350",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://github.com/nushell/nushell/pull/6332",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://github.com/nushell/nushell/pull/6325",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://github.com/nushell/nushell/pull/6322",target:"_blank",rel:"noopener noreferrer"},En={href:"https://github.com/nushell/nushell/pull/6302",target:"_blank",rel:"noopener noreferrer"},Dn=t("h2",{id:"documentation",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#documentation","aria-hidden":"true"},"#"),e(" Documentation")],-1),Yn={href:"https://github.com/nushell/nushell.github.io/pull/592",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://github.com/nushell/nushell.github.io/pull/590",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://github.com/nushell/nushell.github.io/pull/589",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://github.com/nushell/nushell.github.io/pull/588",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://github.com/nushell/nushell.github.io/pull/587",target:"_blank",rel:"noopener noreferrer"},Jn=t("code",null,"enter",-1),Xn={href:"https://github.com/nushell/nushell.github.io/pull/586",target:"_blank",rel:"noopener noreferrer"},Qn=t("code",null,"enter",-1),Kn={href:"https://github.com/nushell/nushell.github.io/pull/585",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://github.com/nushell/nushell.github.io/pull/582",target:"_blank",rel:"noopener noreferrer"},eo={href:"https://github.com/nushell/nushell.github.io/pull/584",target:"_blank",rel:"noopener noreferrer"},to={href:"https://github.com/nushell/nushell.github.io/pull/583",target:"_blank",rel:"noopener noreferrer"},no={href:"https://github.com/nushell/nushell.github.io/pull/580",target:"_blank",rel:"noopener noreferrer"},oo={href:"https://github.com/nushell/nushell.github.io/pull/579",target:"_blank",rel:"noopener noreferrer"},ro={href:"https://github.com/nushell/nushell.github.io/pull/577",target:"_blank",rel:"noopener noreferrer"},lo={href:"https://github.com/nushell/nushell.github.io/pull/573",target:"_blank",rel:"noopener noreferrer"},so={href:"https://github.com/nushell/nushell.github.io/pull/572",target:"_blank",rel:"noopener noreferrer"},ao={href:"https://github.com/nushell/nushell.github.io/pull/571",target:"_blank",rel:"noopener noreferrer"},io={href:"https://github.com/nushell/nushell.github.io/pull/570",target:"_blank",rel:"noopener noreferrer"},ho={href:"https://github.com/nushell/nushell.github.io/pull/567",target:"_blank",rel:"noopener noreferrer"},co={href:"https://github.com/nushell/nushell.github.io/pull/569",target:"_blank",rel:"noopener noreferrer"},uo={href:"https://github.com/nushell/nushell.github.io/pull/568",target:"_blank",rel:"noopener noreferrer"},po={href:"https://github.com/nushell/nushell.github.io/pull/565",target:"_blank",rel:"noopener noreferrer"},mo=t("code",null,"overlay remove",-1),_o=t("h2",{id:"nu-scripts",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#nu-scripts","aria-hidden":"true"},"#"),e(" Nu Scripts")],-1),go={href:"https://github.com/nushell/nu_scripts/pull/288",target:"_blank",rel:"noopener noreferrer"},fo={href:"https://github.com/nushell/nu_scripts/pull/287",target:"_blank",rel:"noopener noreferrer"},bo=t("code",null,"any?",-1),ko=t("code",null,"all?",-1),vo=t("code",null,"empty?",-1),yo=t("code",null,"any",-1),wo=t("code",null,"all",-1),xo=t("code",null,"is-empty",-1),Ao={href:"https://github.com/nushell/nu_scripts/pull/284",target:"_blank",rel:"noopener noreferrer"},To={href:"https://github.com/nushell/nu_scripts/pull/283",target:"_blank",rel:"noopener noreferrer"},No={href:"https://github.com/nushell/nu_scripts/pull/282",target:"_blank",rel:"noopener noreferrer"},jo={href:"https://github.com/nushell/nu_scripts/pull/281",target:"_blank",rel:"noopener noreferrer"},So={href:"https://github.com/nushell/nu_scripts/pull/280",target:"_blank",rel:"noopener noreferrer"},Io={href:"https://github.com/nushell/nu_scripts/pull/279",target:"_blank",rel:"noopener noreferrer"},Ro={href:"https://github.com/nushell/nu_scripts/pull/278",target:"_blank",rel:"noopener noreferrer"},Fo=t("h2",{id:"reedline",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#reedline","aria-hidden":"true"},"#"),e(" reedline")],-1),Co={href:"https://github.com/nushell/reedline/pull/471",target:"_blank",rel:"noopener noreferrer"},Wo={href:"https://github.com/nushell/reedline/pull/470",target:"_blank",rel:"noopener noreferrer"},qo={href:"https://github.com/nushell/reedline/pull/469",target:"_blank",rel:"noopener noreferrer"},$o={href:"https://github.com/nushell/reedline/pull/466",target:"_blank",rel:"noopener noreferrer"};function Mo(Oo,zo){const n=d("ExternalLinkIcon");return s(),a("div",null,[c,u,p,i(" more "),m,t("p",null,[e("Nu 0.68 is available as "),t("a",_,[e("pre-built binaries"),o(n)]),e(" or from "),t("a",g,[e("crates.io"),o(n)]),e(". If you have Rust installed you can install it using "),f,e(".")]),b,t("p",null,[e("This release includes a bundle of changes to environment handling and modules. For now, we kept also the old functionality, but in the 0.69, it will be removed. It is therefore recommended to port your scripts and modules to the new style to avoid breakages in the next release. You can read a more complete write-up on the motivation and overall design in "),t("a",k,[e("this document"),o(n)]),e(".")]),t("h3",v,[y,e(),w,e(" becomes "),x,e(" ("),t("a",A,[e("JT, kubouch"),o(n)]),e(")")]),T,t("p",null,[e("One of the most common pitfalls of Nushell was trying to "),N,e(" a dynamic path, such as "),j,e('. Since Nushell is a "compiled" language where commands and aliases are analyzed while parsing ("compiling") the code, sourcing dynamic paths is not possible for the same reason you cannot dynamically set '),S,e(" file names in C or "),I,e(" modules in Rust. You can read a bit more about this in "),t("a",R,[e("our Thinking in Nu book chapter"),o(n)]),e(".")]),F,t("p",null,[C,e(" You need to use a module and the "),W,e(" keyword. See our book chapter "),t("a",q,[e("about modules"),o(n)]),e(", it's quite simple. Alternatively, you can use "),t("a",$,[e("overlays"),o(n)]),e(".")]),M,O,t("h3",z,[B,e(" Module envrionment changes ("),t("a",P,[e("kubouch"),o(n)]),e(", "),t("a",U,[e("kubouch"),o(n)]),e(")")]),E,D,t("p",null,[e("This example shows one problem: it is easy to end up with namespaced environment variables, which in this case would be "),Y,e(". Another problem with the current design is that "),H,e(" is a parser keyword (like the removed "),L,e(') but contains both parser ("compiled") and runtime (evaluated) functionality. Since 0.67, it is possible to '),t("a",V,[e("use modules within other modules"),o(n)]),e(" but because environment is 100% handled in runtime, and "),G,e(" never evaluates the module itself, it was impossible to bring in environment variables from other modules inside a module.")]),J,t("h3",X,[Q,e(" Syntax unification ("),t("a",K,[e("kubouch"),o(n)]),e(")")]),Z,t("h3",ee,[te,e(" Overlay changes ("),t("a",ne,[e("kubouch"),o(n)]),e(", "),t("a",oe,[e("WindSoilder"),o(n)]),e(")")]),re,t("h2",le,[se,e(" Allow parentheses around command signatures ("),t("a",ae,[e("JT"),o(n)]),e(")")]),ie,de,he,t("h2",ce,[ue,e(" We added a new command "),pe,e(" which implements the Levenshtein alorithm "),t("a",me,[e("fdncred"),o(n)])]),_e,t("h2",ge,[fe,e(" We added string duration conversion to named durations "),t("a",be,[e("fdncred"),o(n)])]),ke,t("h2",ve,[ye,e(" External Completions (experimental) ("),t("a",we,[e("herlon214, rsteube"),o(n)]),e(")")]),t("p",null,[e("In this release, we're trying out integrating Nushell with external completers, instead of relying solely on Nushell ones. It is possible to set the "),xe,e(" field in a config to be a block which will be evaluated if no Nushell completions were found. You can configure the block to run an external completer, such as "),t("a",Ae,[e("carapace"),o(n)]),e(".")]),Te,Ne,t("p",null,[e("Note that this functionality is not perfectly polished yet and in some cases the external completer is not triggered correctly (see "),t("a",je,[e("this issue"),o(n)]),e(").")]),Se,Ie,t("h2",Re,[Fe,e(" Renaming of "),Ce,e(" to "),We,e(", "),qe,e(" to "),$e,e(", and "),Me,e(" to "),Oe,e(" ("),t("a",ze,[e("adamijak"),o(n)]),e(")")]),Be,t("h2",Pe,[Ue,e(" Renaming "),Ee,e(" commands ("),t("a",De,[e("WindSoilder"),o(n)]),e(")")]),Ye,t("h2",He,[Le,e(),Ve,e(" behaviour for Windows paths ("),t("a",Ge,[e("merelymyself"),o(n)]),e(")")]),Je,t("p",null,[e("We've been progressing with our design towards 0.80 as outlined in "),t("a",Xe,[e("this Notion page"),o(n)]),e(".")]),Qe,Ke,Ze,t("ul",null,[t("li",null,[e("jt created "),t("a",et,[e("bump to 0.68"),o(n)]),e(", and "),t("a",tt,[e('Reverted "Make '),nt,e(' on variable names optional" (just in case)'),o(n)]),e(", and "),t("a",ot,[e("Allow parens around signatures"),o(n)]),e(", and "),t("a",rt,[e("Make "),lt,e(" on variable names optional"),o(n)]),e(", and "),t("a",st,[e("Move from "),at,e(" to "),it,o(n)])]),t("li",null,[e("sholderbach created "),t("a",dt,[e("Pin reedline to 0.11.0 release"),o(n)]),e(", and "),t("a",ht,[e("Terminate REPL if not connected to tty input"),o(n)]),e(", and "),t("a",ct,[e("Fix search terms for "),ut,o(n)]),e(", and "),t("a",pt,[e("[Experiment] Reenable CI build cache for tests"),o(n)]),e(", and "),t("a",mt,[e("Test command names and search terms for redundancy"),o(n)])]),t("li",null,[e("merelymyself created "),t("a",_t,[e("let path split keeps 'C:' together"),o(n)]),e(", and "),t("a",gt,[e("Allow for rejecting nested record cells"),o(n)]),e(", and "),t("a",ft,[e("add tests, deal with pipes, newlines, tabs for "),bt,o(n)]),e(", and "),t("a",kt,[e("preserve space by letting "),vt,e(" only add quotes when necessary"),o(n)]),e(", and "),t("a",yt,[e("let "),wt,e(" convert column names with spaces"),o(n)]),e(", and "),t("a",xt,[e("default to file completion after first command, add "),At,e(" option for completions"),o(n)])]),t("li",null,[e("unrelentingtech created "),t("a",Tt,[e('Avoid update_last_command_context "No command run" error'),o(n)]),e(", and "),t("a",Nt,[e("Fix build on *BSD, illumos, etc."),o(n)])]),t("li",null,[e("WindSoilder created "),t("a",jt,[e("Restrict plugin name starts with "),St,o(n)]),e(", and "),t("a",It,[e("remove capnp relative file"),o(n)]),e(", and "),t("a",Rt,[e("shows wrong item when some commands runs to failed."),o(n)]),e(", and "),t("a",Ft,[e("shows wrong item when each command runs to failed."),o(n)]),e(", and "),t("a",Ct,[e("keep raw for variable inputed argument"),o(n)]),e(", and "),t("a",Wt,[e("remove capnp protocol for plugin..."),o(n)]),e(", and "),t("a",qt,[e("Try to make argument with quotes for external command better"),o(n)]),e(", and "),t("a",$t,[e("Plugin: Add benchmark for different encoding protocol"),o(n)]),e(", and "),t("a",Mt,[e("Rename overlay commands"),o(n)]),e(", and "),t("a",Ot,[e("Try again: in unix like system, set foreground process while running external command"),o(n)])]),t("li",null,[e("kubouch created "),t("a",zt,[e("Disable cyclical module imports"),o(n)]),e(", and "),t("a",Bt,[e("Fix overlays not preserving hidden env vars"),o(n)]),e(", and "),t("a",Pt,[e("Fix scoped "),Ut,e(" not finding a module"),o(n)]),e(", and "),t("a",Et,[e("Bring in module's environment when activating overlay"),o(n)]),e(", and "),t("a",Dt,[e('Allow "export-env" parsing in modules'),o(n)]),e(", and "),t("a",Yt,[e("Allow parsing modules as scripts"),o(n)]),e(", and "),t("a",Ht,[e("Add "),Lt,e(" command"),o(n)])]),t("li",null,[e("adamijak created "),t("a",Vt,[e("Rename "),Gt,e(", "),Jt,e(" and "),Xt,o(n)])]),t("li",null,[e("dependabot[bot] created "),t("a",Qt,[e("Bump lz4-sys from 1.9.3 to 1.9.4"),o(n)]),e(", and "),t("a",Kt,[e("Bump iana-time-zone from 0.1.44 to 0.1.47"),o(n)])]),t("li",null,[e("obaudys created "),t("a",Zt,[e("Fix ps command CPU usage on Apple Silicon M1 macs. #4142"),o(n)])]),t("li",null,[e("fdncred created "),t("a",en,[e('Revert "Add support for optional list stream output formatting"'),o(n)]),e(", and "),t("a",tn,[e("add more color highlighting to help"),o(n)]),e(", and "),t("a",nn,[e("add the ast command to peek at the internals of nushell"),o(n)]),e(", and "),t("a",on,[e("convert string duration to named duration"),o(n)]),e(", and "),t("a",rn,[e("add a plugin registration script"),o(n)]),e(", and "),t("a",ln,[e("add another split words example"),o(n)]),e(", and "),t("a",sn,[e("add edit distance/levenshtein command"),o(n)]),e(", and "),t("a",an,[e("add MessagePack as a plugin protocol"),o(n)]),e(", and "),t("a",dn,[e("fix the way lists are rendered in markdown"),o(n)]),e(", and "),t("a",hn,[e("add a split words command"),o(n)]),e(", and "),t("a",cn,[e("create clickable links in ls output if configured"),o(n)])]),t("li",null,[e("rgwood created "),t("a",un,[e("Upgrade "),pn,e(" dependency to fix case on Windows"),o(n)]),e(", and "),t("a",mn,[e("Disable clickable links in SSH sessions"),o(n)]),e(", and "),t("a",_n,[e("Always report errors in "),gn,o(n)]),e(", and "),t("a",fn,[e("Make "),bn,e(" errors more specific+accurate"),o(n)]),e(", and "),t("a",kn,[e("Add pause and cls to cmd.exe exceptions"),o(n)])]),t("li",null,[e("dscottboggs created "),t("a",vn,[e("better error handling for nu_command::env::conig::utils::get_editor"),o(n)])]),t("li",null,[e("nibon7 created "),t("a",yn,[e("Make run_external parameter required"),o(n)]),e(", and "),t("a",wn,[e('Fix the span of "invalid time zone"'),o(n)]),e(", and "),t("a",xn,[e("register-plugin.nu: refactor register plugin"),o(n)]),e(", and "),t("a",An,[e("register-plugin.nu: remove "),Tn,e(" extension match to simplify code"),o(n)]),e(", and "),t("a",Nn,[e("Add test cases for $nu.config-path change"),o(n)]),e(", and "),t("a",jn,[e("Get "),Sn,e(" and "),In,e(" from "),Rn,o(n)]),e(", and "),t("a",Fn,[e("Use string interpolation to construct log file path"),o(n)]),e(", and "),t("a",Cn,[e("Return error when "),Wn,e(" didn't terminate successfully "),o(n)])]),t("li",null,[e("herlon214 created "),t("a",qn,[e("nu-command/filters: drop column check positive value"),o(n)]),e(", and "),t("a",$n,[e("nu-cli: merge completions tests into one file"),o(n)]),e(", and "),t("a",Mn,[e("feat: external completions for commands/flags"),o(n)])]),t("li",null,[e("hustcer created "),t("a",On,[e("Update nu version for release workflow"),o(n)]),e(", and "),t("a",zn,[e("Bump dev version"),o(n)])]),t("li",null,[e("volucris1 created "),t("a",Bn,[e("Fix #6330"),o(n)])]),t("li",null,[e("panicbit created "),t("a",Pn,[e("Add support for optional list stream output formatting"),o(n)])]),t("li",null,[e("dbuch created "),t("a",Un,[e("Fix slice indexing"),o(n)])]),t("li",null,[e("CohenAriel created "),t("a",En,[e("Add --execute option"),o(n)])])]),Dn,t("ul",null,[t("li",null,[e("rgwood created "),t("a",Yn,[e("Add Homebrew PATH documentation"),o(n)])]),t("li",null,[e("sholderbach created "),t("a",Hn,[e("Update former question mark commands in docs"),o(n)])]),t("li",null,[e("chrjen created "),t("a",Ln,[e("Update types_of_data.md with missing values"),o(n)])]),t("li",null,[e("hustcer created "),t("a",Vn,[e("Upgrade vuepress and all related plugins to improve build performance"),o(n)]),e(", and "),t("a",Gn,[e("Upgrade all vuepress plugins and fix doc search navigation by pressing "),Jn,e(" key"),o(n)]),e(", and "),t("a",Xn,[e("Upgrade all vuepress plugins and fix doc search navigation by pressing "),Qn,e(" key"),o(n)]),e(", and "),t("a",Kn,[e("Try to fix deploy of docs by downgrade some plugins"),o(n)]),e(", and "),t("a",Zn,[e("lock vuepress and plugins version to fix ci"),o(n)])]),t("li",null,[e("fdncred created "),t("a",eo,[e("update to ubuntu-latest"),o(n)]),e(", and "),t("a",to,[e("change from deprecated version of ubuntu"),o(n)])]),t("li",null,[e("pedromfedricci created "),t("a",no,[e("Update accepted types for signatures"),o(n)])]),t("li",null,[e("Yethal created "),t("a",oo,[e("Add wrap-around merge"),o(n)])]),t("li",null,[e("merelymyself created "),t("a",ro,[e("Remove ambiguity about command quotes"),o(n)])]),t("li",null,[e("CAD97 created "),t("a",lo,[e("Note status of calling CMD builtins from Nushell"),o(n)]),e(", and "),t("a",so,[e("Note Windows caveat in Escaping to the System"),o(n)]),e(", and "),t("a",ao,[e("Mention coming_from_cmd in coming_to_nu"),o(n)]),e(", and "),t("a",io,[e("Update coming_from_cmd.md for nu 0.77"),o(n)]),e(", and "),t("a",ho,[e("Create coming_from_cmd.md"),o(n)])]),t("li",null,[e("1submarine created "),t("a",co,[e("correct escapes in coming_from_bash.md"),o(n)]),e(", and "),t("a",uo,[e("deduplicate `**' in operators.md"),o(n)])]),t("li",null,[e("amtoine created "),t("a",po,[e("FIX: "),mo,e(" flags"),o(n)])])]),_o,t("ul",null,[t("li",null,[e("dandavison created "),t("a",go,[e("Async git prompt"),o(n)])]),t("li",null,[e("sholderbach created "),t("a",fo,[e("Update old question mark commands "),bo,e("/"),ko,e("/"),vo,e(" to "),yo,e("/"),wo,e("/"),xo,o(n)])]),t("li",null,[e("skelly37 created "),t("a",Ao,[e("Added German diacritics"),o(n)])]),t("li",null,[e("Yethal created "),t("a",To,[e("Add function to remove diacritics from string"),o(n)])]),t("li",null,[e("fdncred created "),t("a",No,[e("remove engine-q references"),o(n)])]),t("li",null,[e("e2dk4r created "),t("a",jo,[e("custom completions: scoop: add some missing command completions"),o(n)]),e(", and "),t("a",So,[e("custom completions: scoop: add some missing command completions"),o(n)])]),t("li",null,[e("mk00pl created "),t("a",Io,[e("added webscrapping script for twitter"),o(n)])]),t("li",null,[e("azzamsa created "),t("a",Ro,[e("fix: zoxide support Nushell out of the box"),o(n)])])]),Fo,t("ul",null,[t("li",null,[e("sholderbach created "),t("a",Co,[e("Prepare 0.11.0 release"),o(n)])]),t("li",null,[e("unrelentingtech created "),t("a",Wo,[e("Add Reedline::has_last_command_context to allow checking if update_last_command_context will fail"),o(n)])]),t("li",null,[e("nibon7 created "),t("a",qo,[e("Fix panic when using sqlite as history backend"),o(n)])]),t("li",null,[e("morzel85 created "),t("a",$o,[e("README.md outline cleanup"),o(n)])])])])}const Po=l(h,[["render",Mo],["__file","2022-09-06-nushell-0_68.html.vue"]]);export{Po as default};
