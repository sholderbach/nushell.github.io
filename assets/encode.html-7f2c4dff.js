import{_ as n,p as r,q as o,Q as e,t,v as s,a1 as i}from"./framework-344bb0e4.js";const c={},d={id:"frontmatter-title-for-strings",tabindex:"-1"},p=e("a",{class:"header-anchor",href:"#frontmatter-title-for-strings","aria-hidden":"true"},"#",-1),h={class:"command-title"},l=i(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; encode (encoding) --ignore-errors</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>encoding</code>: the text encoding to use</li><li><code>--ignore-errors</code> <code>(-i)</code>: when a character isn&#39;t in the given encoding, replace with a HTML entity (like <code>&amp;#127880;</code>)</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><p>Multiple encodings are supported; here are a few: big5, euc-jp, euc-kr, gbk, iso-8859-1, cp1252, latin5</p><p>Note that since the Encoding Standard doesn&#39;t specify encoders for utf-16le and utf-16be, these are not yet supported.</p><p>For a more complete list of encodings, please refer to the encoding_rs documentation link at https://docs.rs/encoding_rs/latest/encoding_rs/#statics</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Encode an UTF-8 string into Shift-JIS</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&quot;負けると知って戦うのが、遥かに美しいのだ&quot;</span> <span class="token operator">|</span> encode shift-jis
</code></pre></div><p>Replace characters with HTML entities if they can&#39;t be encoded</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token string">&quot;🎈&quot;</span> <span class="token operator">|</span> encode <span class="token parameter variable">-i</span> shift-jis
</code></pre></div>`,13);function g(a,u){return r(),o("div",null,[e("h1",d,[p,t(),e("code",null,s(a.$frontmatter.title),1),t(" for strings")]),e("div",h,s(a.$frontmatter.strings),1),l])}const m=n(c,[["render",g],["__file","encode.html.vue"]]);export{m as default};
