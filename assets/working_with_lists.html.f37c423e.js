import{_ as p,z as l,A as c,X as s,C as n,T as e,$ as t,a6 as o,Q as r}from"./framework.3d018c9f.js";const i={},u=o(`<h1 id="mit-listen-arbeiten" tabindex="-1"><a class="header-anchor" href="#mit-listen-arbeiten" aria-hidden="true">#</a> Mit Listen arbeiten</h1><h2 id="listen-erstellen" tabindex="-1"><a class="header-anchor" href="#listen-erstellen" aria-hidden="true">#</a> Listen erstellen</h2><p>Eine Liste ist eine geordnete Sammlung von Werten. Erstellt wird eine <code>list</code> mit eckigen Klammern, in denen die Werte durch Leerzeichen und/oder Kommas getrennt werden, zur besseren Lesbarkeit. Zum Beispiel, <code>[foo bar baz]</code> oder <code>[foo, bar, baz]</code>,</p><h2 id="listen-updaten" tabindex="-1"><a class="header-anchor" href="#listen-updaten" aria-hidden="true">#</a> Listen updaten</h2><p>Mit den zwei Befehlen <code>update</code> und <code>insert</code> können Listen in einer Pipeline verändert werden, zum Beispiel fügt folgende Zeile den Wert <code>10</code> in der Mitte, also an Stelle 2 ein.</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; [1, 2, 3, 4] | insert 2 10
</code></pre></div><p>Mit dem Befehl <code>update</code> ersetzen wir hingegen das 2. Element mit dem Wert <code>10</code>.</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; [1, 2, 3, 4] | update 1 10
</code></pre></div><p>Zusätzlich zu <code>insert</code> und <code>update</code> stehen die Befehle <code>prepend</code> und <code>append</code> zu Verfügung. Diese fügen Werte am Anfang einer Liste oder am Ende ein.</p><p>Zum Beispiel:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>yellow green<span class="token punctuation">]</span>
<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token operator">|</span> prepend red<span class="token punctuation">)</span>
<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token operator">|</span> append purple<span class="token punctuation">)</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$colors</span> <span class="token comment"># [red yellow green purple]</span>
</code></pre></div><h2 id="durch-listen-iterieren" tabindex="-1"><a class="header-anchor" href="#durch-listen-iterieren" aria-hidden="true">#</a> Durch Listen iterieren</h2>`,12),d=s("code",null,"each",-1),k=s("code",null,"|it|",-1),m=s("code",null,"{ |it| echo $it }",-1),h=s("code",null,"--numbered",-1),b=s("code",null,"-n",-1),g=s("code",null,"index",-1),v=s("code",null,"item",-1),_=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span>Mark Tami Amanda Jeremy<span class="token punctuation">]</span>
<span class="token variable">$names</span> <span class="token operator">|</span> each <span class="token punctuation">{</span> <span class="token operator">|</span>it<span class="token operator">|</span> $<span class="token string">&quot;Hello, (<span class="token variable">$it</span>)!&quot;</span> <span class="token punctuation">}</span>
<span class="token comment"># Outputs &quot;Hello, Mark!&quot; and three more similar lines.</span>

<span class="token variable">$names</span> <span class="token operator">|</span> each <span class="token parameter variable">-n</span> <span class="token punctuation">{</span> <span class="token operator">|</span>it<span class="token operator">|</span> $<span class="token string">&quot;(<span class="token variable">$it</span>.index + 1) - (<span class="token variable">$it</span>.item)&quot;</span> <span class="token punctuation">}</span>
<span class="token comment"># Outputs &quot;1 - Mark&quot;, &quot;2 - Tami&quot;, etc.</span>
</code></pre></div>`,1),f=s("code",null,"where",-1),w=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>red orange yellow green blue purple<span class="token punctuation">]</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$colors</span> <span class="token operator">|</span> where <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str ends-with <span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>In diesem Beispiel werden nur Werte behalten, die höher als <code>7</code> sind.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># The block passed to where must evaluate to a boolean.</span>
<span class="token comment"># This outputs the list [orange blue purple].</span>

<span class="token builtin class-name">let</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span> <span class="token number">10</span> <span class="token number">8</span> <span class="token number">6</span> <span class="token number">7</span><span class="token punctuation">]</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$scores</span> <span class="token operator">|</span> where <span class="token variable">$it</span> <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token comment"># [10 8]</span>
</code></pre></div>`,3),$=s("code",null,"reduce",-1),x=s("code",null,"it",-1),z=s("code",null,"acc",-1),L=s("code",null,"--fold",-1),B=s("code",null,"-f",-1),q=s("code",null,"it",-1),y=s("code",null,"index",-1),D=s("code",null,"item",-1),E=s("code",null,"--numbered",-1),T=s("code",null,"-n",-1),A=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">8</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;total =&quot;</span> <span class="token punctuation">(</span><span class="token variable">$scores</span> <span class="token operator">|</span> reduce <span class="token punctuation">{</span> <span class="token operator">|</span>it, acc<span class="token operator">|</span> <span class="token variable">$acc</span> + <span class="token variable">$it</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># 15</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;total =&quot;</span> <span class="token punctuation">(</span><span class="token variable">$scores</span> <span class="token operator">|</span> math <span class="token function">sum</span><span class="token punctuation">)</span> <span class="token comment"># easier approach, same result</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;product =&quot;</span> <span class="token punctuation">(</span><span class="token variable">$scores</span> <span class="token operator">|</span> reduce <span class="token parameter variable">--fold</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token operator">|</span>it, acc<span class="token operator">|</span> <span class="token variable">$acc</span> * <span class="token variable">$it</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># 96</span>

<span class="token builtin class-name">echo</span> <span class="token variable">$scores</span> <span class="token operator">|</span> reduce <span class="token parameter variable">-n</span> <span class="token punctuation">{</span> <span class="token operator">|</span>it, acc<span class="token operator">|</span> <span class="token variable">$acc</span>.item + <span class="token variable">$it</span>.index * <span class="token variable">$it</span>.item <span class="token punctuation">}</span> <span class="token comment"># 3 + 1*8 + 2*4 = 19</span>
</code></pre></div><h2 id="auf-listen-zugreifen" tabindex="-1"><a class="header-anchor" href="#auf-listen-zugreifen" aria-hidden="true">#</a> Auf Listen zugreifen</h2><p>Um auf ein Element einer Liste zuzugreifen, wird <code>$name.index</code> verwendet, wobei in der <code>$name</code> Variablen eine Liste enthalten sein muss. Zum Beispiel kann in folgender Liste das 2. Element mit <code>$names.1</code> verwendet werden.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span>Mark Tami Amanda Jeremy<span class="token punctuation">]</span>
<span class="token variable">$names</span>.1 <span class="token comment"># gives Tami</span>
</code></pre></div><p>Wenn der Index in einer Variablen wie <code>$index</code> enthalten ist, kann dieser mit dem <code>get</code> Befehl extrahiert werden.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span>Mark Tami Amanda Jeremy<span class="token punctuation">]</span>
<span class="token builtin class-name">let</span> index <span class="token operator">=</span> <span class="token number">1</span>
<span class="token variable">$names</span> <span class="token operator">|</span> get <span class="token variable">$index</span> <span class="token comment"># gives Tami</span>
</code></pre></div>`,6),Z=s("code",null,"length",-1),M=s("code",null,"[red green blue] | length",-1),W=s("code",null,"3",-1),S=s("code",null,"is-empty",-1),V=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>red green blue<span class="token punctuation">]</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> is-empty <span class="token comment"># false</span>

<span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token variable">$colors</span> <span class="token operator">|</span> is-empty <span class="token comment"># true</span>
</code></pre></div><p>Der <code>in</code> und <code>not-in</code> Operator wird verwendet, um zu testen, ob ein Wert in einer Liste vorhanden ist oder nicht. Zum Beispiel:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>red green blue<span class="token punctuation">]</span>
<span class="token string">&#39;blue&#39;</span> <span class="token keyword">in</span> <span class="token variable">$colors</span> <span class="token comment"># true</span>
<span class="token string">&#39;yellow&#39;</span> <span class="token keyword">in</span> <span class="token variable">$colors</span> <span class="token comment"># false</span>
<span class="token string">&#39;gold&#39;</span> not-in <span class="token variable">$colors</span> <span class="token comment"># true</span>
</code></pre></div>`,3),C=s("code",null,"any",-1),N=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Do any color names end with &quot;e&quot;?</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$colors</span> <span class="token operator">|</span> any <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str ends-with <span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span> <span class="token comment"># true</span>

<span class="token comment"># Is the length of any color name less than 3?</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$colors</span> <span class="token operator">|</span> any <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token comment"># false</span>

<span class="token comment"># Are any scores greater than 7?</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$scores</span> <span class="token operator">|</span> any <span class="token variable">$it</span> <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token comment"># true</span>

<span class="token comment"># Are any scores odd?</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$scores</span> <span class="token operator">|</span> any <span class="token variable">$it</span> mod <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token comment"># true</span>
</code></pre></div>`,1),F=s("code",null,"all",-1),I=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Do all color names end with &quot;e&quot;?</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$colors</span> <span class="token operator">|</span> all <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str ends-with <span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span> <span class="token comment"># false</span>

<span class="token comment"># Is the length of all color names greater than or equal to 3?</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$colors</span> <span class="token operator">|</span> all <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token operator">|</span> str length<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token comment"># true</span>

<span class="token comment"># Are all scores greater than 7?</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$scores</span> <span class="token operator">|</span> all <span class="token variable">$it</span> <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token comment"># false</span>

<span class="token comment"># Are all scores even?</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$scores</span> <span class="token operator">|</span> all <span class="token variable">$it</span> mod <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment"># false</span>
</code></pre></div><h2 id="eine-liste-konvertieren" tabindex="-1"><a class="header-anchor" href="#eine-liste-konvertieren" aria-hidden="true">#</a> Eine Liste konvertieren</h2>`,2),U=s("code",null,"flatten",-1),j=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token number">4</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> flatten <span class="token comment"># [1 2 3 4 5 6]</span>

<span class="token builtin class-name">echo</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span> <span class="token punctuation">[</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> flatten <span class="token operator">|</span> flatten <span class="token operator">|</span> flatten <span class="token comment"># [1 2 3 4 5 6 7 8]</span>
</code></pre></div>`,1),J=s("code",null,"wrap",-1),P=o(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">let</span> zones <span class="token operator">=</span> <span class="token punctuation">[</span>UTC CET Europe/Moscow Asia/Yekaterinburg<span class="token punctuation">]</span>

<span class="token comment"># Show world clock for selected time zones</span>
<span class="token variable">$zones</span> <span class="token operator">|</span> wrap <span class="token string">&#39;Zone&#39;</span> <span class="token operator">|</span> upsert Time <span class="token punctuation">{</span><span class="token operator">|</span>it<span class="token operator">|</span> <span class="token punctuation">(</span>date now <span class="token operator">|</span> <span class="token function">date</span> to-timezone <span class="token variable">$it</span>.Zone <span class="token operator">|</span> <span class="token function">date</span> <span class="token function">format</span> <span class="token string">&#39;%Y.%m.%d %H:%M&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</code></pre></div>`,1);function H(O,K){const a=r("RouterLink");return l(),c("div",null,[u,s("p",null,[n("Um durch eine Liste zu iterieren, wird der "),e(a,{to:"/book/commands/each.html"},{default:t(()=>[d]),_:1}),n(" Befehl vewendet, dem ein "),e(a,{to:"/de/book/types_of_data.html#blocks"},{default:t(()=>[n("block")]),_:1}),n(" mit Nu-Code folgt, der auf jedes Element der Liste angewendet wird. Der Block Parameter (z.B. "),k,n(" in "),m,n(") entspricht normalerweise dem Element der Liste, was jedoch mit dem "),h,n(" ("),b,n(") Flag geändert werden kann in die zwei Parameter "),g,n(" und "),v,n(". zum Beispiel:")]),_,s("p",null,[n("Der "),e(a,{to:"/book/commands/where.html"},{default:t(()=>[f]),_:1}),n(' Befehl kann verwendet werden um einen Filter auf eine Liste anzuwenden. Das folgende Beispiel gibt alle Farben zurück, deren Namen auf "e" enden.')]),w,s("p",null,[n("Der "),e(a,{to:"/book/commands/reduce.html"},{default:t(()=>[$]),_:1}),n(" Befehl berechnet einen einfachen Wert aus einer Liste. Der darauffolgende Block enthält 2 Parameter: Das momentane Element (üblicherweise "),x,n(" genannt) und einen Sammler (Akkumulator) (üblicherweise "),z,n("). Um einen initialen Wert für den Akkumulator zu setzen, wird das "),L,n(" ("),B,n(") Flag gesetzt. Um den Iterator "),q,n(" zu ändern nach "),y,n(" und "),D,n(", wird wiederum das "),E,n(" ("),T,n(") Flag verwendet. Zum Beispiel:")]),A,s("p",null,[n("Der "),e(a,{to:"/book/commands/length.html"},{default:t(()=>[Z]),_:1}),n(" Befehl gibt die Anzahl Elemente in der Liste zurück. Zum Beispiel, "),M,n(" ergibt "),W,n(".")]),s("p",null,[n("Der "),e(a,{to:"/book/commands/is-empty.html"},{default:t(()=>[S]),_:1}),n(" Befehl ermittelt, ob ein String, eine Liste oder eine Tabelle leer ist. Mit einer Liste wird er so verwendet:")]),V,s("p",null,[n("Der "),e(a,{to:"/book/commands/any.html"},{default:t(()=>[C]),_:1}),n(" Befehl ermittelt, ob irgend ein Element der Liste einer Bedingung entspricht. Zum Beispiel:")]),N,s("p",null,[n("Der "),e(a,{to:"/book/commands/all.html"},{default:t(()=>[F]),_:1}),n(" Befehl wiederum ermittelt, ob jedes Element der Liste einer Bedingung entspricht. Zum Beispiel:")]),I,s("p",null,[n("Der "),e(a,{to:"/book/commands/flatten.html"},{default:t(()=>[U]),_:1}),n(" Befehl generiert aus einer bestehenden Liste eine neue Liste, indem eine verschachtelte Liste in die Top-Level Liste integriert werden. Dies kann mehrere Male aufgerufen werden, um verschachtelte Listen jeglicher Tiefe zu integrieren. Zum Beispiel:")]),j,s("p",null,[n("Der "),e(a,{to:"/book/commands/wrap.html"},{default:t(()=>[J]),_:1}),n(" Befehl konvertiert eine Liste in eine Tabelle. Jedes Listen-Element wird in eine eigene Zeile mit einer einzigen Spalte überführt.")]),P])}const Y=p(i,[["render",H],["__file","working_with_lists.html.vue"]]);export{Y as default};
