import{_ as o,z as l,A as r,X as e,C as s,T as a,a6 as t,Q as c}from"./framework.3d018c9f.js";const i={},u=e("h1",{id:"安装-nu",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装-nu","aria-hidden":"true"},"#"),s(" 安装 Nu")],-1),p={href:"https://github.com/nushell/nushell/releases",target:"_blank",rel:"noopener noreferrer"},d={href:"https://repology.org/project/nushell/versions",target:"_blank",rel:"noopener noreferrer"},h=e("h2",{id:"预编译二进制包",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#预编译二进制包","aria-hidden":"true"},"#"),s(" 预编译二进制包")],-1),g={href:"https://github.com/nushell/nushell/releases",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"PATH",-1),b=e("h2",{id:"软件包管理器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#软件包管理器","aria-hidden":"true"},"#"),s(" 软件包管理器")],-1),f=e("p",null,"Nu 可以通过几个软件包管理器获得：",-1),k={href:"https://repology.org/project/nushell/versions",target:"_blank",rel:"noopener noreferrer"},m=e("img",{src:"https://repology.org/badge/vertical-allrepos/nushell.svg",alt:"打包状态"},null,-1),v={href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"brew install nushell",-1),q=e("p",null,"对于 Windows 用户：",-1),w={href:"https://docs.microsoft.com/en-us/windows/package-manager/winget/",target:"_blank",rel:"noopener noreferrer"},N=e("code",null,"winget install nushell",-1),S={href:"https://chocolatey.org/",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"choco install nushell",-1),C={href:"https://scoop.sh/",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"scoop install nu",-1),H=t('<p>Nushell 的主要二进制文件被命名为 <code>nu</code>（或 Windows 下的 <code>nu.exe</code>）。安装完成后你可以通过输入 <code>nu</code> 来启动它。</p><h2 id="从源码构建" tabindex="-1"><a class="header-anchor" href="#从源码构建" aria-hidden="true">#</a> 从源码构建</h2><p>你也可以从源代码构建<code>Nu</code>。首先，你需要设置 Rust 工具链和它的依赖项。</p><h3 id="安装编译器套件" tabindex="-1"><a class="header-anchor" href="#安装编译器套件" aria-hidden="true">#</a> 安装编译器套件</h3><p>为了使 Rust 能够正常工作，你需要在你的系统上安装一个兼容的编译器套件。以下是推荐的编译器套件：</p>',5),L=e("li",null,"Linux：GCC 或 Clang",-1),V=e("li",null,"macOS：Clang (安装 Xcode)",-1),W={href:"https://visualstudio.microsoft.com/vs/community/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022",target:"_blank",rel:"noopener noreferrer"},O=e("ul",null,[e("li",null,'请确保安装 "用 C++进行桌面开发" 相关包'),e("li",null,"任何 Visual Studio 版本都可以(社区版是免费的)")],-1),E=e("h3",{id:"安装-rust",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装-rust","aria-hidden":"true"},"#"),s(" 安装 Rust")],-1),P={href:"https://rustup.rs/",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>Nu 目前需要 <strong>最新（1.60 或更高）的稳定</strong> 版本的 Rust。最好的方法是让<code>rustup</code>为你找到正确的版本。当你第一次打开<code>rustup</code>时，它会询问你想安装哪个版本的 Rust：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>Current installation options:

default <span class="token function">host</span> triple: x86_64-unknown-linux-gnu
default toolchain: stable
profile: default
modify <span class="token environment constant">PATH</span> variable: <span class="token function">yes</span>

<span class="token number">1</span><span class="token punctuation">)</span> Proceed with installation <span class="token punctuation">(</span>default<span class="token punctuation">)</span>
<span class="token number">2</span><span class="token punctuation">)</span> Customize installation
<span class="token number">3</span><span class="token punctuation">)</span> Cancel installation
</code></pre></div><p>一旦我们准备好了，我们就按 <code>1</code>，然后回车。</p><p>如果你不愿意通过<code>rustup</code>来安装 Rust，你也可以通过其他方法来安装它（比如从 Linux 发行版的软件包中）。只要确保安装 1.60 或更高版本的 Rust 即可。</p><h3 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h3><h4 id="debian-ubuntu" tabindex="-1"><a class="header-anchor" href="#debian-ubuntu" aria-hidden="true">#</a> Debian/Ubuntu</h4><p>你将需要安装 &quot;pkg-config&quot; 和 &quot;libssl-dev&quot; 包：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt</span> <span class="token function">install</span> pkg-config libssl-dev
</code></pre></div><p>对于希望使用 &quot;rawkey&quot; 或 &quot;clipboard&quot; 可选功能的 Linux 用户，需要安装 &quot;libx11-dev&quot; 和 &quot;libxcb-composite0-dev&quot; 软件包。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt</span> <span class="token function">install</span> libxcb-composite0-dev libx11-dev
</code></pre></div><h4 id="基于-rhel-的发行版" tabindex="-1"><a class="header-anchor" href="#基于-rhel-的发行版" aria-hidden="true">#</a> 基于 RHEL 的发行版</h4><p>你需要安装 &quot;libxcb&quot;、&quot;openssl-devel&quot; 和 &quot;libX11-devel&quot;：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> libxcb openssl-devel libX11-devel
</code></pre></div><h4 id="macos" tabindex="-1"><a class="header-anchor" href="#macos" aria-hidden="true">#</a> macOS</h4>`,14),G={href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer"},X=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[s("brew "),e("span",{class:"token function"},"install"),s(` openssl cmake
`)])])],-1),j={id:"使用-crates-io进行构建",tabindex:"-1"},A=e("a",{class:"header-anchor",href:"#使用-crates-io进行构建","aria-hidden":"true"},"#",-1),z={href:"https://crates.io",target:"_blank",rel:"noopener noreferrer"},I={href:"https://crates.io/",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"cargo",-1),$=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">cargo</span> <span class="token function">install</span> nu
</code></pre></div><p>如此即可! <code>cargo</code>工具将完成下载 Nu 及其源码依赖，构建并将其安装到 cargo bin 路径中，以便我们能够运行它。</p><p>如果你想安装更多的功能，你可以使用：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">cargo</span> <span class="token function">install</span> nu <span class="token parameter variable">--features</span><span class="token operator">=</span>dataframe
</code></pre></div><p>安装完毕后，我们可以使用 <code>nu</code> 命令运行 Nu：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ nu
/home/jt/Source<span class="token operator">&gt;</span>
</code></pre></div><h3 id="从-github-仓库构建" tabindex="-1"><a class="header-anchor" href="#从-github-仓库构建" aria-hidden="true">#</a> 从 GitHub 仓库构建</h3><p>我们也可以从 GitHub 上的最新源码构建自己的 Nu。这让我们可以立即获得最新的功能和错误修复。首先，克隆源码仓库：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">git</span> clone https://github.com/nushell/nushell.git
</code></pre></div><p>然后，我们可以用以下方式构建和运行 Nu：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">cd</span> nushell
nushell<span class="token operator">&gt;</span> <span class="token function">cargo</span> build <span class="token parameter variable">--workspace</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cargo</span> run
</code></pre></div><p>你也可以在<strong>发布</strong>模式下构建和运行 Nu：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>nushell<span class="token operator">&gt;</span> <span class="token function">cargo</span> build <span class="token parameter variable">--release</span> <span class="token parameter variable">--workspace</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cargo</span> run <span class="token parameter variable">--release</span>
</code></pre></div><p>熟悉 Rust 的人可能会问，如果 &quot;run&quot; 默认会构建，为什么我们还要做 &quot;build&quot; 和 &quot;run&quot; 这两个步骤？这是为了解决 Cargo 中新的 <code>default-run</code> 选项的缺陷，并确保所有插件都被构建，尽管这在将来可能不再需要。</p><h2 id="设置登录-shell-nix" tabindex="-1"><a class="header-anchor" href="#设置登录-shell-nix" aria-hidden="true">#</a> 设置登录 Shell (*nix)</h2><p><strong>!!! Nu 仍在开发中，对于日常使用可能并不稳定。!!!</strong></p>`,16),D={href:"https://linux.die.net/man/1/chsh",target:"_blank",rel:"noopener noreferrer"},J=e("code",null,"chsh",-1),Q=e("code",null,"/etc/shells",-1),U=e("code",null,"shells",-1),F=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`chsh: /home/username/.cargo/bin/nu is an invalid shell
`)])],-1),K=e("p",null,[s("你可以通过在"),e("code",null,"shells"),s("文件中添加你的 Nu 二进制文件来把 Nu 添加到允许的 Shells 列表中。 添加的路径可以用"),e("code",null,"which nu"),s("命令找到，通常是"),e("code",null,"$HOME/.cargo/bin/nu"),s("。")],-1),Y=e("h2",{id:"设置默认的-shell-windows-终端",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#设置默认的-shell-windows-终端","aria-hidden":"true"},"#"),s(" 设置默认的 Shell (Windows 终端)")],-1),Z={href:"https://github.com/microsoft/terminal",target:"_blank",rel:"noopener noreferrer"},ee=e("code",null,'"profiles"',-1),se=e("code",null,"nu",-1),ne=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;guid&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;{2b372ca1-1ee2-403d-a839-6d63077ad871}&quot;</span>,
  <span class="token string">&quot;hidden&quot;</span><span class="token builtin class-name">:</span> false,
  <span class="token string">&quot;icon&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;https://www.nushell.sh/icon.png&quot;</span>,
  <span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Nu Shell&quot;</span>,
  <span class="token string">&quot;commandline&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;nu.exe&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>最后需要做的是将 <code>&quot;defaultProfile&quot;</code> 改为:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;defaultProfile&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;{2b372ca1-1ee2-403d-a839-6d63077ad871}&quot;</span>,
</code></pre></div><p>之后，<code>nu</code> 应该会在 <strong>Windows Terminal</strong> 启动时被加载。</p>`,4);function ae(te,oe){const n=c("ExternalLinkIcon");return l(),r("div",null,[u,e("p",null,[s("有很多方法可以获取并使用 Nu。你可以从我们的"),e("a",p,[s("发布页面"),a(n)]),s("下载预编译的二进制文件，也可以 "),e("a",d,[s("使用你喜欢的软件包管理器"),a(n)]),s("，或者从源码构建。")]),h,e("p",null,[s("Nu 二进制文件在 "),e("a",g,[s("GitHub 的 Release 页"),a(n)]),s("发布，适用于 Linux、macOS 和 Windows。只需下载并解压二进制文件，然后将其复制到你的系统"),_,s("上的某个位置即可。")]),b,f,e("p",null,[e("a",k,[m,a(n)])]),e("p",null,[s("对于 macOS 和 Linux，"),e("a",v,[s("Homebrew"),a(n)]),s("是一个流行的选择（"),x,s("）。")]),q,e("ul",null,[e("li",null,[e("a",w,[s("Winget"),a(n)]),s(" ("),N,s(")")]),e("li",null,[e("a",S,[s("Chocolatey"),a(n)]),s(" ("),R,s(")")]),e("li",null,[e("a",C,[s("Scoop"),a(n)]),s(" ("),y,s(")")])]),H,e("ul",null,[L,V,e("li",null,[s("Windows：MSVC（安装 "),e("a",W,[s("Visual Studio"),a(n)]),s(" 或 "),e("a",T,[s("Visual Studio Build Tools"),a(n)]),s(") "),O])]),E,e("p",null,[s("如果我们的系统中还没有 Rust，最好的方法是通过 "),e("a",P,[s("rustup"),a(n)]),s(" 来安装它。Rustup 是一种管理 Rust 安装的工具，可以管理使用不同的 Rust 版本。")]),B,e("p",null,[s("使用 "),e("a",G,[s("Homebrew"),a(n)]),s('，你需要通过如下方式安装 "openssl" 和 "cmake" ：')]),X,e("h3",j,[A,s(" 使用 "),e("a",z,[s("crates.io"),a(n)]),s("进行构建")]),e("p",null,[s("Nu 发行版会作为源码发布到流行的 Rust 包仓库 "),e("a",I,[s("crates.io"),a(n)]),s("，这使得使用 "),M,s(" 构建并安装最新的 Nu 版本变得很容易：")]),$,e("p",null,[s("要设置登录 Shell，你可以使用"),e("a",D,[J,a(n)]),s("命令。 一些 Linux 发行版有一个位于"),Q,s("的有效 Shell 列表，在 Nu 被列入白名单之前不允许改变 Shell。如果你没有更新"),U,s("文件，你可能会看到类似于下面的错误：")]),F,K,Y,e("p",null,[s("如果你使用的是 "),e("a",Z,[s("Windows Terminal"),a(n)]),s("，你可以通过添加如下内容到你的终端设置"),ee,s("（JSON 文件）中来设置"),se,s("作为你的默认 Shell：")]),ne])}const re=o(i,[["render",ae],["__file","installation.html.vue"]]);export{re as default};
