import{_ as t,z as o,A as p,X as a,C as n,D as e,a6 as c}from"./framework.3d018c9f.js";const r={},l={id:"frontmatter-title-for-filters",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#frontmatter-title-for-filters","aria-hidden":"true"},"#",-1),u={class:"command-title"},d=c(`<h2 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h2><p><code>&gt; each (closure) --keep-empty --numbered</code></p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ul><li><code>closure</code>: the closure to run</li><li><code>--keep-empty</code>: keep empty result cells</li><li><code>--numbered</code>: iterate with an index (deprecated; use a two-parameter closure instead)</li></ul><h2 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h2><div class="language-text" data-ext="text"><pre class="language-text"><code>Since tables are lists of records, passing a table into &#39;each&#39; will
iterate over each record, not necessarily each cell within it.

Avoid passing single records to this command. Since a record is a
one-row structure, &#39;each&#39; will only run once, behaving similar to &#39;do&#39;.
To iterate over a record&#39;s values, try converting it to a table
with &#39;transpose&#39; first.
</code></pre></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Multiplies elements in the list</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> each <span class="token punctuation">{</span><span class="token operator">|</span>e<span class="token operator">|</span> <span class="token number">2</span> * <span class="token variable">$e</span> <span class="token punctuation">}</span>
</code></pre></div><p>Produce a list of values in the record, converted to string</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">{</span>major:2, minor:1, patch:4<span class="token punctuation">}</span> <span class="token operator">|</span> values <span class="token operator">|</span> each <span class="token punctuation">{</span> into string <span class="token punctuation">}</span>
</code></pre></div><p>Produce a list that has &quot;two&quot; for each 2 in the input</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">|</span> each <span class="token punctuation">{</span><span class="token operator">|</span>e<span class="token operator">|</span> <span class="token keyword">if</span> <span class="token variable">$e</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span> <span class="token string">&quot;two&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre></div><p>Iterate over each element, producing a list showing indexes of any 2s</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> each <span class="token punctuation">{</span><span class="token operator">|</span>el ind<span class="token operator">|</span> <span class="token keyword">if</span> <span class="token variable">$el</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span> $<span class="token string">&quot;found 2 at (<span class="token variable">$ind</span>)!&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre></div><p>Iterate over each element, keeping all results</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">|</span> each --keep-empty <span class="token punctuation">{</span><span class="token operator">|</span>e<span class="token operator">|</span> <span class="token keyword">if</span> <span class="token variable">$e</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span> <span class="token string">&quot;found 2!&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre></div>`,17);function k(s,h){return o(),p("div",null,[a("h1",l,[i,n(),a("code",null,e(s.$frontmatter.title),1),n(" for filters")]),a("div",u,e(s.$frontmatter.filters),1),d])}const g=t(r,[["render",k],["__file","each.html.vue"]]);export{g as default};
