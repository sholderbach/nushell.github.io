import{_ as d,z as o,A as n,X as t,C as e,T as r,a6 as c,Q as s}from"./framework.3d018c9f.js";const i={},l=c(`<h1 id="設定" tabindex="-1"><a class="header-anchor" href="#設定" aria-hidden="true">#</a> 設定</h1><p>Nu には、見た目や挙動を変更させるための内部的な変数があります。 以下がそのリストです。</p><table><thead><tr><th>Variable</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>completion_mode</td><td>&quot;list&quot; or &quot;circular&quot;</td><td>利用する自動補完のモード</td></tr><tr><td>ctrlc_exit</td><td>boolean</td><td>ctrl-c を複数回押したときに Nu を exit するかどうか</td></tr><tr><td>disable_table_indexes</td><td>boolean</td><td>テーブルインデックスカラムを無効にするかどうか</td></tr><tr><td>edit_mode</td><td>&quot;vi&quot; or &quot;emacs&quot;</td><td>行の編集モードを&quot;vi&quot;か&quot;emacs&quot;モードに変更する</td></tr><tr><td>env</td><td>row</td><td>外部コマンドに渡す環境変数</td></tr><tr><td>header_align</td><td>&quot;center&quot;, &quot;right&quot;, or other</td><td>テーブルのヘッダーの揃え方</td></tr><tr><td>key_timeout</td><td>integer</td><td>edit モードのスイッチ時のタイムアウト</td></tr><tr><td>nonzero_exit_errors</td><td>boolean</td><td>外部コマンドが 0 以外の終了ステータスの場合にエラーを表示するかどうか</td></tr><tr><td>path</td><td>list of strings</td><td>バイナリーを検索する PATH</td></tr><tr><td>startup</td><td>list of strings</td><td><code>alias</code>のような nushell 起動時に実行するコマンド</td></tr><tr><td>table_mode</td><td>&quot;light&quot; or other</td><td>テーブルのモード</td></tr><tr><td>no_auto_pivot</td><td>boolean</td><td>自動で 1 行のデータを pivot するかどうか</td></tr><tr><td>skip_welcome_message</td><td>boolean</td><td>nushell 起動時にウェルカムメッセージの表示をスキップするかどうか</td></tr></tbody></table><h2 id="利用方法" tabindex="-1"><a class="header-anchor" href="#利用方法" aria-hidden="true">#</a> 利用方法</h2><h3 id="変数の設定" tabindex="-1"><a class="header-anchor" href="#変数の設定" aria-hidden="true">#</a> 変数の設定</h3><p>これらの変数のいずれかを設定するには<code>config set</code> コマンドを利用します。例えば</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; config set edit_mode &quot;vi&quot;
</code></pre></div><h3 id="パイプラインからの変数を設定" tabindex="-1"><a class="header-anchor" href="#パイプラインからの変数を設定" aria-hidden="true">#</a> パイプラインからの変数を設定</h3><p>設定したい値をパイプラインを通じて設定することもできます。このためには<code>set_into</code>フラグを利用します。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; echo &quot;bar&quot; | config set_into foo
</code></pre></div><p>この方法は、<code>env</code>や<code>path</code>変数を設定する際に便利です。</p><h3 id="すべての変数の表示" tabindex="-1"><a class="header-anchor" href="#すべての変数の表示" aria-hidden="true">#</a> すべての変数の表示</h3><p><code>config</code>コマンドを引数なしで実行すると現在の設定されている変数を表示します。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; config
─────────────────┬──────────────────
 completion_mode │ circular
 env             │ [row 51 columns]
 path            │ [table 9 rows]
 startup         │ [table 1 rows]
─────────────────┴──────────────────
</code></pre></div><p>注: もしまだ変数を設定していない場合、出力が空の場合があります。</p><h3 id="変数の取得" tabindex="-1"><a class="header-anchor" href="#変数の取得" aria-hidden="true">#</a> 変数の取得</h3><p><code>get</code>フラグを利用して特定の変数の値を取得できます。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; config get edit_mode
</code></pre></div><h3 id="変数の削除" tabindex="-1"><a class="header-anchor" href="#変数の削除" aria-hidden="true">#</a> 変数の削除</h3><p>変数を削除する場合、<code>remove</code>フラグを利用します。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; config remove edit_mode
</code></pre></div><h3 id="設定全体のクリア" tabindex="-1"><a class="header-anchor" href="#設定全体のクリア" aria-hidden="true">#</a> 設定全体のクリア</h3><p>設定全体をクリアして、最初からやりなおしたい場合は<code>--clear</code>フラグを利用できます。このコマンドを実行すると設定ファイルもクリアされるので注意してください。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; config clear
</code></pre></div><h3 id="設定が保存されている場所をみつける" tabindex="-1"><a class="header-anchor" href="#設定が保存されている場所をみつける" aria-hidden="true">#</a> 設定が保存されている場所をみつける</h3><p>設定ファイルはデフォルトの場所から読み込まれます。この場所をみつけるには<code>-path</code>フラグを利用します。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; config path
/home/jonathant/.config/nu/config.toml
</code></pre></div><h3 id="ファイルから設定を読み込む" tabindex="-1"><a class="header-anchor" href="#ファイルから設定を読み込む" aria-hidden="true">#</a> ファイルから設定を読み込む</h3><p>デフォルトとは違う設定ファイルを読み込みたい場合は、<code>load</code> パラメーターを利用します。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; config load myconfiguration.toml
</code></pre></div><h2 id="nu-をログインシェルとして設定する" tabindex="-1"><a class="header-anchor" href="#nu-をログインシェルとして設定する" aria-hidden="true">#</a> Nu をログインシェルとして設定する</h2><p>Nu をログインシェルとして利用するには、<code>path</code>と<code>env</code>変数を設定する必要があります。これらによりログインシェルとして外部コマンドを実行するのに十分なサポートが得られます。</p><p>切り替える前に、Bash 等の別のシェルから Nu を実行します。そして次のコマンドで環境変数と PATH をシェルから取得します。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; config set path $nu.path
&gt; config set env $nu.env
</code></pre></div><p>0.7.2 より以前のバージョンでは</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&gt; config --set [path $nu:path]
&gt; config --set [env $nu:env]
</code></pre></div><p><code>$nu.path</code>および<code>$nu.env</code>にはそれぞれ、現在の PATH と環境変数がセットされています。これらをセットすると、のちに Nu をログインシェルとして利用したさいに利用できるようになります。</p><p>次にいくつかのディストリビューションでは、Nu が<code>/etc/shells</code>のリストに含まれているかを確認する必要があります。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>❯ cat /etc/shells
# /etc/shells: valid login shells
/bin/sh
/bin/dash
/bin/bash
/bin/rbash
/usr/bin/screen
/usr/bin/fish
/home/jonathan/.cargo/bin/nu
</code></pre></div><p>これにより、<code>chsh</code>で Nu をログインシェルとして設定できるようになります。ログアウト後、次回のログイン時に Nu の素敵なプロンプトが表示されます。</p><h2 id="プロンプトの設定" tabindex="-1"><a class="header-anchor" href="#プロンプトの設定" aria-hidden="true">#</a> プロンプトの設定</h2>`,41),h=t("code",null,"prompt",-1),u=t("br",null,null,-1),g={href:"https://starship.rs",target:"_blank",rel:"noopener noreferrer"},p=t("div",{class:"language-text","data-ext":"text"},[t("pre",{class:"language-text"},[t("code",null,`config set prompt "starship prompt"
`)])],-1),x=t("p",null,"Nu を再起動すると",-1),_=t("div",{class:"language-text","data-ext":"text"},[t("pre",{class:"language-text"},[t("code",null,`nushell on 📙 master [$] is 📦 v0.18.2 via 🦀 v1.48.0-nightly
❯
`)])],-1);function v(f,b){const a=s("ExternalLinkIcon");return o(),n("div",null,[l,t("p",null,[e("プロンプトの設定は"),h,e("の値を設定することで行います。"),u,e(" 例えば、"),t("a",g,[e("starship"),r(a)]),e("を使うには、ダウンロードして次のコマンドを実行します。(0.18.2 and later)")]),p,x,_])}const q=d(i,[["render",v],["__file","configuration.html.vue"]]);export{q as default};
