import{_ as i,z as l,A as o,X as e,C as n,T as a,a6 as t,Q as r}from"./framework.3d018c9f.js";const d={},c=e("h1",{id:"nu-installieren",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#nu-installieren","aria-hidden":"true"},"#"),n(" Nu installieren")],-1),u={href:"https://crates.io",target:"_blank",rel:"noopener noreferrer"},p={href:"https://github.com/nushell/nushell/releases",target:"_blank",rel:"noopener noreferrer"},h=e("h2",{id:"binardatei",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#binardatei","aria-hidden":"true"},"#"),n(" Binärdatei")],-1),g={href:"https://github.com/nushell/nushell/releases",target:"_blank",rel:"noopener noreferrer"},b={href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"brew install nushell",-1),m={href:"https://docs.microsoft.com/en-us/windows/package-manager/winget/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://chocolatey.org/",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"winget install nushell",-1),w=e("code",null,"choco install nushell",-1),v=e("h3",{id:"windows",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#windows","aria-hidden":"true"},"#"),n(" Windows")],-1),x=e("p",null,[e("strong",null,"Achtung:"),n(" Nu funtioniert aktuell auf Windows 10 und hat keine Unterstützung für Windows 7/8.1.")],-1),z=e("code",null,".zip",-1),S={href:"https://github.com/nushell/nushell/releases",target:"_blank",rel:"noopener noreferrer"},q=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code>C:<span class="token punctuation">\\</span>Program Files
</code></pre></div><p>Danach den <code>nu</code> beinhaltenden Ordner der Umgebungsvariable PATH hinzufügen. Wenn das passiert ist, kann <code>nu</code> wie folgt gestartet werden:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> nu
C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>user<span class="token operator">&gt;</span>
</code></pre></div>`,3),N={href:"https://github.com/microsoft/terminal",target:"_blank",rel:"noopener noreferrer"},D=e("code",null,"nu",-1),C=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;guid&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;{2b372ca1-1ee2-403d-a839-6d63077ad871}&quot;</span>,
  <span class="token string">&quot;hidden&quot;</span><span class="token builtin class-name">:</span> false,
  <span class="token string">&quot;icon&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;https://www.nushell.sh/icon.png&quot;</span>,
  <span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Nu Shell&quot;</span>,
  <span class="token string">&quot;commandline&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;nu.exe&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>zu <code>&quot;profiles&quot;</code> in den Terminal Einstellungen (JSON-Datei) hinzufügt wird. Zu guter Letzt, muss nur noch <code>&quot;defaultProfile&quot;</code> angepasst werden:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;defaultProfile&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;{2b372ca1-1ee2-403d-a839-6d63077ad871}&quot;</span>,
</code></pre></div><p>Jetzt sollte sich <code>nu</code> beim Start von Windows Terminal öffnen.</p><h2 id="vorbereitungen" tabindex="-1"><a class="header-anchor" href="#vorbereitungen" aria-hidden="true">#</a> Vorbereitungen</h2><p>Bevor Nu installiert werden kann, muss sichergestellt werden, dass das System die nötigen Anforderungen erfüllt. Aktuell bedeutet das sicherzustellen, dass die Rust-Toolchain und lokale Abhängigkeiten installiert sind.</p><h3 id="installieren-einer-compiler-suite" tabindex="-1"><a class="header-anchor" href="#installieren-einer-compiler-suite" aria-hidden="true">#</a> Installieren einer Compiler-Suite</h3><p>Damit Rust richtig funktioniert, muss eine kompatible Compiler-Suite auf dem System installiert sein. Die empfohlenen Compiler-Suites sind:</p>`,8),W=e("li",null,"Linux: GCC oder Clang",-1),R=e("li",null,"macOS: Clang (Xcode installieren)",-1),P={href:"https://visualstudio.microsoft.com/vs/community/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022",target:"_blank",rel:"noopener noreferrer"},B=e("ul",null,[e("li",null,'Sicherstellen, dass "Desktop development with C++" installiert wird'),e("li",null,"Jede Visual Studio Edition sollte funktionieren (Community ist gratis)")],-1),L=e("h3",{id:"rust-installieren",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#rust-installieren","aria-hidden":"true"},"#"),n(" Rust installieren")],-1),y={href:"https://rustup.rs/",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>Nu benötigt aktuell die <strong>latest stable (1.55 oder neuer)</strong> Version von Rust. Der einfachste Weg ist es, <code>rustup</code> die korrekte Version für finden zu lassen. Wenn <code>rustup</code> zum ersten Mal gestartet wird, wird nachgefragt, welche Version installiert werden soll:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>Current installation options:

default <span class="token function">host</span> triple: x86_64-unknown-linux-gnu
default toolchain: stable
profile: default
modify <span class="token environment constant">PATH</span> variable: <span class="token function">yes</span>

<span class="token number">1</span><span class="token punctuation">)</span> Proceed with installation <span class="token punctuation">(</span>default<span class="token punctuation">)</span>
<span class="token number">2</span><span class="token punctuation">)</span> Customize installation
<span class="token number">3</span><span class="token punctuation">)</span> Cancel installation
</code></pre></div><p>Wenn Sie bereit sind, drücken Sie <code>1</code> und dann <code>Enter</code>.</p><p>Wenn Rust nicht via <code>rustup</code> installiert werden soll, können auch andere Methoden verwendet werden um es zu installieren (z.B. vom Paketmanager der Linux-Distro). Dabei muss sichergestellt werden, dass es sich um Rust-Version 1.55 oder neuer handelt.</p><h2 id="abhangigkeiten" tabindex="-1"><a class="header-anchor" href="#abhangigkeiten" aria-hidden="true">#</a> Abhängigkeiten</h2><h3 id="debian-ubuntu" tabindex="-1"><a class="header-anchor" href="#debian-ubuntu" aria-hidden="true">#</a> Debian/Ubuntu</h3><p>Es müssen die Pakete <code>pkg-config</code> und <code>libssl-dev</code> installiert werden:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt</span> <span class="token function">install</span> pkg-config libssl-dev
</code></pre></div><p>Linux-Nutzer die die optionalen Funktionen <code>rawkey</code> und <code>clipboard</code> verwenden möchten, müssen außerdem die Pakete <code>libx11-dev</code> und <code>libxcb-composite0-dev</code> installieren:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt</span> <span class="token function">install</span> libxcb-composite0-dev libx11-dev
</code></pre></div><h3 id="rhel-basierte-distributionen" tabindex="-1"><a class="header-anchor" href="#rhel-basierte-distributionen" aria-hidden="true">#</a> RHEL basierte Distributionen</h3><p>Für RHEL basierte Distributionen müssen die Pakete <code>libxcb</code>, <code>openssl-devel</code> und <code>libX11-devel</code> installiert werden:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> libxcb openssl-devel libX11-devel
</code></pre></div><h3 id="macos" tabindex="-1"><a class="header-anchor" href="#macos" aria-hidden="true">#</a> macOS</h3>`,14),E={href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer"},T=e("code",null,"openssl",-1),F=e("code",null,"cmake",-1),H=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("brew "),e("span",{class:"token function"},"install"),n(` openssl cmake
`)])])],-1),U={id:"installieren-von-crates-io",tabindex:"-1"},I=e("a",{class:"header-anchor",href:"#installieren-von-crates-io","aria-hidden":"true"},"#",-1),M={href:"https://crates.io",target:"_blank",rel:"noopener noreferrer"},O=t(`<p>Wenn alle die Abhängigkeitenn, die für Nu benötigt werden, installiert sind, kann <code>cargo</code> verwendet werden um Nu zu installieren.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">cargo</span> <span class="token function">install</span> nu
</code></pre></div><p>Das war&#39;s! Cargo wird Nu und seine anderen Abhängigkeiten herunterladen, kompilieren und schließlich im cargo <code>bin</code> Pfad installieren, damit es benutzt werden kann.</p><p>Wenn mehr Funktionalitäten installiert werden sollen, kann der folgende Befehl verwendet werden:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">cargo</span> <span class="token function">install</span> nu <span class="token parameter variable">--features</span><span class="token operator">=</span>dataframe
</code></pre></div><p>Um alle verfügbaren Funktionalitäten zu bekommen, ist es am einfachsten einen Checkout durchzuführen und es selbst mit Hilfe der Rust-Tools zu kompilieren:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">git</span> clone https://github.com/nushell/nushell.git
<span class="token operator">&gt;</span> <span class="token builtin class-name">cd</span> nushell
nushell<span class="token operator">&gt;</span> <span class="token function">cargo</span> <span class="token function">install</span> <span class="token parameter variable">--path</span> <span class="token builtin class-name">.</span>
</code></pre></div><p>Damit das funktioniert, sollte sichergestellt werden, dass alle oben genannten Abhängigkeiten auf dem System installiert sind.</p><p>Wenn Nu schließlich installiert ist, kann die Shell mit dem <code>nu</code>-Befehl gestartet werden:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ nu
/home/jt/Source<span class="token operator">&gt;</span>
</code></pre></div><h2 id="kompilieren-von-quelldateien" tabindex="-1"><a class="header-anchor" href="#kompilieren-von-quelldateien" aria-hidden="true">#</a> Kompilieren von Quelldateien</h2><p>Nu kann auch direkt aus den Quelldateien, die auf GitHub verfügbar sind, kompiliert werden. Das stellt unmittelbar die neuesten Funktionen und Fehlerbehebungen von Nu zur Verfügung.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">git</span> clone https://github.com/nushell/nushell.git
</code></pre></div><p>Git clont das main nushell Repo. Von da aus, kann Nu, wenn <code>rustup</code> verwendet wird, wie folgt kompiliert und gestartet werden:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">cd</span> nushell
nushell<span class="token operator">&gt;</span> <span class="token function">cargo</span> build <span class="token parameter variable">--workspace</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cargo</span> run
</code></pre></div><p>Nu kann auch in &quot;release&quot; Modus kompiliert und gestartet werden:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>nushell<span class="token operator">&gt;</span> <span class="token function">cargo</span> build <span class="token parameter variable">--release</span> <span class="token parameter variable">--workspace</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cargo</span> run <span class="token parameter variable">--release</span>
</code></pre></div><p>Leute, die sich mit Rust auskennen, wundern sich womöglich, warum hier sowohl ein <code>build</code> als auch ein <code>run</code> durchgeführt wird, obwohl <code>run</code> standardmäßig auch einen Build durchführt. Das ist nötig, um ein Problem mit der neuen <code>default-run</code>-Option von Cargo zu umgehen, damit alle Plugins kompiliert werden. Dies wird unter Umständen in Zukunft nicht mehr nötig sein.</p><h2 id="als-login-shell-verwenden" tabindex="-1"><a class="header-anchor" href="#als-login-shell-verwenden" aria-hidden="true">#</a> Als Login-Shell verwenden</h2><p><strong>!!! Nu befindet sich noch in der Entwicklung und ist unter Umständen nicht stabil genug für die tägliche Nutzung. !!!</strong></p>`,20),X={href:"https://linux.die.net/man/1/chsh",target:"_blank",rel:"noopener noreferrer"},G=e("code",null,"chsh",-1),J=e("code",null,"/etc/shells",-1),Q=e("code",null,"shells",-1),Z=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`chsh: /home/username/.cargo/bin/nu is an invalid shell
`)])],-1),$=e("p",null,[n("Nu kann zur Liste der erlaubte Shells hinzugefügt werden, indem der Pfad von "),e("code",null,"nu"),n(" der "),e("code",null,"shells"),n("-Datei angefügt wird. Der Pfad, der hinzugefügt werden muss, kann mit dem Befehl "),e("code",null,"which nu"),n(" herausgefunden werden. Normalerweise ist es "),e("code",null,"$HOME/.cargo/bin/nu"),n(".")],-1);function j(K,Y){const s=r("ExternalLinkIcon");return l(),o("div",null,[c,e("p",null,[n("Der aktuell beste Weg Nu zu bekommen ist, es von "),e("a",u,[n("crates.io"),a(s)]),n(" zu installieren, Binärdateien von unserer "),e("a",p,[n("Release-Seite"),a(s)]),n(" herunterzuladen oder es selbst zu kompilieren.")]),h,e("p",null,[n("Von der "),e("a",g,[n("Release-Seite"),a(s)]),n(" kann Nushell bereits kompiliert heruntergeladen werden. Alternativ kann Nushell, wenn "),e("a",b,[n("Homebrew"),a(s)]),n(" verwendet wird, mit dem Befehl "),k,n(" installiert werden. Unter Windows können "),e("a",m,[n("Winget"),a(s)]),n(" oder "),e("a",f,[n("Chocolatey"),a(s)]),n(" zur Installation verwendet werden: "),_,n(" beziehungsweise "),w,n(".")]),v,x,e("p",null,[n("Die aktuelle, veröffentlichte "),z,n("-Datei von der "),e("a",S,[n("Release-Seite"),a(s)]),n(" herunterladen und den Inhalt extrahieren nach:")]),q,e("p",null,[n("Für Nutzer des "),e("a",N,[n("Windows Terminal"),a(s)]),n(" kann "),D,n(" als Standard-Shell gesetzt werden, indem:")]),C,e("ul",null,[W,R,e("li",null,[n("Windows: MSVC (installieren von "),e("a",P,[n("Visual Studio Community Edition"),a(s)]),n(" oder der "),e("a",V,[n("Visual Studio Build Tools"),a(s)]),n(") "),B])]),L,e("p",null,[n("Wenn Rust noch nicht auf dem System installiert ist, ist "),e("a",y,[n("rustup"),a(s)]),n(" der beste Weg es zu bekommen. Rustup ist ein Programm um Rust-Installationen zu managen wie beispielsweise verschiedene Rust-Versionen.")]),A,e("p",null,[n("Mittels "),e("a",E,[n("Homebrew"),a(s)]),n(", müssen die Pakete "),T,n(" und "),F,n(" über folgenden Befehl installiert werden:")]),H,e("h2",U,[I,n(" Installieren von "),e("a",M,[n("crates.io"),a(s)])]),O,e("p",null,[n("Um die Login-Shell festzulegen, kann der Befehl "),e("a",X,[G,a(s)]),n(" verwendet werden. Manche Linux-Distributionen haben eine Liste von erlaubten Shells in "),J,n(" und verbieten es die Shell zu ändern, bis Nu in der Whitelist ist. Wenn die "),Q,n("-Datei nicht abgeändert wurde, erscheint vielleicht einen ähnlichen Fehler, wie:")]),Z,$])}const ne=i(d,[["render",j],["__file","installation.html.vue"]]);export{ne as default};
