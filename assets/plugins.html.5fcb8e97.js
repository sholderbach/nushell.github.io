import{_ as i,z as p,A as c,X as e,C as n,T as a,$ as o,a6 as l,Q as r}from"./framework.3d018c9f.js";const d={},u=e("h1",{id:"插件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#插件","aria-hidden":"true"},"#"),n(" 插件")],-1),h=e("p",null,"Nu 可以通过插件进行扩展。插件的行为与 Nu 的内置命令很相似，另外的好处是它们可以与 Nu 本身分开添加。",-1),_={href:"https://en.wikipedia.org/wiki/Standard_streams",target:"_blank",rel:"noopener noreferrer"},g={href:"https://capnproto.org/",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"添加一个插件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#添加一个插件","aria-hidden":"true"},"#"),n(" 添加一个插件")],-1),b=e("code",null,"register",-1),k=l(`<p>Linux+macOS:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> register <span class="token parameter variable">--encoding</span><span class="token operator">=</span>capnp ./my_plugins/my-cool-plugin
</code></pre></div><p>Windows:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> register <span class="token parameter variable">--encoding</span><span class="token operator">=</span>capnp .<span class="token punctuation">\\</span>my_plugins<span class="token punctuation">\\</span>my-cool-plugin.exe
</code></pre></div>`,4),f=e("code",null,"register",-1),N=l(`<ol><li>Nu 启动该插件并通过 stdin 向其发送 &quot;签名&quot; 信息；</li><li>插件通过 stdout 响应，包含其签名（名称、描述、参数、标志等）的消息；</li><li>Nu 将插件的签名保存在<code>$nu.plugin-path</code>位置的文件中，因此在注册之后的多次启动中都是有效的；</li></ol><p>一旦注册，该插件就可以作为你的命令集的一部分被使用：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">help</span> commands <span class="token operator">|</span> where is_plugin <span class="token operator">==</span> <span class="token boolean">true</span>
</code></pre></div><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>Nu 的主版本中包含了一些插件的例子，这些例子对学习插件协议的工作方式很有帮助：</p>`,5),x={href:"https://github.com/nushell/nushell/tree/main/crates/nu_plugin_example",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/nushell/nushell/blob/main/crates/nu_plugin_python/plugin.py",target:"_blank",rel:"noopener noreferrer"},y=e("h2",{id:"调试",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#调试","aria-hidden":"true"},"#"),n(" 调试")],-1),w=e("p",null,"调试插件的最简单方法是打印到 stderr；插件的标准错误流会通过 Nu 重定向并显示给用户。",-1),L=e("h2",{id:"帮助",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#帮助","aria-hidden":"true"},"#"),n(" 帮助")],-1),C={href:"https://discord.gg/NtAbbGn",target:"_blank",rel:"noopener noreferrer"};function S(V,B){const s=r("ExternalLinkIcon"),t=r("RouterLink");return p(),c("div",null,[u,h,e("p",null,[n("Nu 的插件是可执行的；Nu 在需要时启动它们，并通过 "),e("a",_,[n("stdin, stdout 和 stderr"),a(s)]),n(" 与它们进行通信。Nu 的插件可以使用 JSON 或 "),e("a",g,[n("Cap'n Proto"),a(s)]),n(" 作为它们的通信编码方式。")]),m,e("p",null,[n("要添加一个插件，请调用"),a(t,{to:"/book/commands/register.html"},{default:o(()=>[b]),_:1}),n("命令来告诉 Nu 在哪里可以找到它，与此同时，你还需要告诉 Nushell 这个插件使用什么方式进行编码。")]),k,e("p",null,[n("当 "),a(t,{to:"/book/commands/register.html"},{default:o(()=>[f]),_:1}),n(" 被调用时：")]),N,e("ul",null,[e("li",null,[e("a",x,[n("Rust"),a(s)])]),e("li",null,[e("a",v,[n("Python"),a(s)])])]),y,w,L,e("p",null,[n("Nu 的插件文档尚在撰写中，如果你对某件事情不确定 "),e("a",C,[n("Nu Discord"),a(s)]),n("上的 #plugins 频道是一个提问的好地方!")])])}const R=i(d,[["render",S],["__file","plugins.html.vue"]]);export{R as default};
