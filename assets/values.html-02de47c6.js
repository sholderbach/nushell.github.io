import{_ as t,M as o,p,q as c,Q as n,t as a,N as l,U as i,a1 as s}from"./framework-344bb0e4.js";const u={},r=s(`<h1 id="values" tabindex="-1"><a class="header-anchor" href="#values" aria-hidden="true">#</a> Values</h1><p>A Value is the basic structure datatype in Nu.</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Value</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> value<span class="token punctuation">:</span> <span class="token class-name">UntaggedValue</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> tag<span class="token punctuation">:</span> <span class="token class-name">Tag</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div>`,3),d=n("code",null,"value",-1),k=n("code",null,"UntaggedValue",-1),h=n("code",null,"tag",-1),m=s(`<p>An <code>UntaggedValue</code> covers the following value types:</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">UntaggedValue</span> <span class="token punctuation">{</span>
    <span class="token class-name">Primitive</span><span class="token punctuation">(</span><span class="token class-name">Primitive</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Row</span><span class="token punctuation">(</span><span class="token class-name">Dictionary</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token class-name">ShellError</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token class-name">Block</span><span class="token punctuation">(</span><span class="token class-name">Evaluate</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Where <code>Primitive</code> is:</p><div class="language-rust" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Primitive</span> <span class="token punctuation">{</span>
    <span class="token class-name">Nothing</span><span class="token punctuation">,</span>
    <span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token class-name">BigInt</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Decimal</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Bytes</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Line</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">ColumnPath</span><span class="token punctuation">(</span><span class="token class-name">ColumnPath</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Pattern</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">DateTime</span><span class="token operator">&lt;</span><span class="token class-name">Utc</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Duration</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Range</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Range</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token class-name">PathBuf</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Binary</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token comment">// Stream markers (used as bookend markers rather than actual values)</span>
    <span class="token class-name">BeginningOfStream</span><span class="token punctuation">,</span>
    <span class="token class-name">EndOfStream</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Let&#39;s look at these in reverse order to see how Primitives build towards our full Value types:</p><h2 id="primitive" tabindex="-1"><a class="header-anchor" href="#primitive" aria-hidden="true">#</a> Primitive</h2><p>A <code>Primitive</code> data type is a fundamental type in Nu. While these have similarities to the fundamental data types of programming languages, there are a few differences because of the shell capabilities of Nu.</p><p>Nu comes with two &#39;big&#39; number types: <code>BigInt</code> for integers and <code>BigDecimal</code> for decimal numbers. This allows Nu in the future to do mathematical operations and maintain precision for longer.</p><p>Other data types that are perhaps a bit different from the norm:</p><ul><li><code>Nothing</code> = An empty value</li><li><code>Bytes(u64)</code> = filesize in number of bytes</li><li><code>Line(String)</code> = A string value with an implied carriage return (or cr/lf) ending</li><li><code>ColumnPath(ColumnPath)</code> = A path to travel to reach a value in a table</li><li><code>Pattern(string)</code> = a glob pattern (like the <code>nu*</code> in <code>ls nu*</code>)</li><li><code>Duration(u64)</code> = A count in the number of seconds (like <code>1hr</code> in <code>ls | where modified &lt; 1hr</code>)</li><li><code>Range(Box&lt;Range&gt;)</code> = A range of values (like <code>0..2</code> in <code>ls | range 0..2</code>)</li><li><code>Path(PathBuf)</code> = a filepath</li><li><code>Binary(Vec&lt;u8&gt;)</code> = an array of bytes</li><li><code>BeginningOfStream</code> = a marker to denote the beginning of a stream</li><li><code>EndOfStream</code> = a marker to denote the end of a stream</li></ul><h2 id="untaggedvalue" tabindex="-1"><a class="header-anchor" href="#untaggedvalue" aria-hidden="true">#</a> UntaggedValue</h2><p>In addition to the primitive types, Nu supports aggregate data types. Collectively, these aggregate types are called <code>UntaggedValue</code>s.</p><p>Currently, Nu supports 5 <code>UntaggedValue</code> types: <code>Row</code>, <code>Table</code>, <code>Block</code>, <code>Primitive</code>, and <code>Error</code>.</p><h3 id="tables-and-rows" tabindex="-1"><a class="header-anchor" href="#tables-and-rows" aria-hidden="true">#</a> Tables and Rows</h3><p>Nu uses a set of terms that match a bit more closely to spreadsheets. Rather than having lists of objects, Nu has a table, which contains rows. Each Row contains the column names and their corresponding Values.</p><h3 id="blocks" tabindex="-1"><a class="header-anchor" href="#blocks" aria-hidden="true">#</a> Blocks</h3><p>Blocks represent code that is ready to be executed by the evaluator. One example of this is the condition in <code>where {$it &gt; 10}</code>.</p><h3 id="errors" tabindex="-1"><a class="header-anchor" href="#errors" aria-hidden="true">#</a> Errors</h3><p>Represents errors that can happen when pipelines are run.</p>`,19);function g(f,v){const e=o("RouterLink");return p(),c("div",null,[r,n("p",null,[a("Where the "),d,a(" field is any given value type "),k,a(" and the "),h,a(" field holds "),l(e,{to:"/contributor-book/metadata.html"},{default:i(()=>[a("metadata")]),_:1}),a(" associated with it.")]),m])}const b=t(u,[["render",g],["__file","values.html.vue"]]);export{b as default};
